<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.EnterpriseLibrary.Validation.Silverlight</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.AttributeValidatorFactory">
            <summary>
             A CompositeValidatorFactory that produces validators based on reflection.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory">
            <summary>
             Abstract validator factory for creating validators for a specific type.
            </summary>
             <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.AttributeValidatorFactory"/>
             <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorFactory"/>    
             <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatorFactory"/>
             <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.CompositeValidatorFactory"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider)">
            <summary>
             Initializes a ValidatorFactory factory.
            </summary>
             <param name="instrumentationProvider">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider"/>
             to attach to created validators.  Validators will gain this instrumentation behavior
             automatically when they are wrapped with <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.GenericValidatorWrapper`1"/></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory.WrapAndInstrumentValidator(Microsoft.Practices.EnterpriseLibrary.Validation.Validator,System.Type)">
            <summary>
            Wraps a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> with a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.GenericValidatorWrapper`1"/> for instrumentation purposes.
            </summary>
            <param name="validator">The validator to wrap</param>
            <param name="type">Validator's target type</param>
            <returns>A new, wrapped validator</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory.WrapAndInstrumentValidator``1(Microsoft.Practices.EnterpriseLibrary.Validation.Validator,System.Type)">
            <summary>
            Wraps a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1"/> with a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.GenericValidatorWrapper`1"/> for instrumentation purposes.
            </summary>
            <typeparam name="T">Validator's target type.</typeparam>
            <param name="validator">Validator to wrap</param>
            <param name="unusedType">Not used in this implementation of WrapAndInstrumentValidator</param>
            <returns>A new, wrapped validator.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory.CreateValidator``1">
            <summary>
            Returns a validator representing the validation criteria specified for type <typeparamref name="T"/>
            through configuration and attributes on type <typeparamref name="T"/> and its ancestors for the default ruleset.
            </summary>
            <typeparam name="T">The type to get the validator for.</typeparam>
            <returns>The validator.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory.CreateValidator``1(System.String)">
            <summary>
            Returns a validator representing the validation criteria specified for type <typeparamref name="T"/>
            through configuration and attributes on type <typeparamref name="T"/> and its ancestors for the supplied ruleset.
            </summary>
            <typeparam name="T">The type to get the validator for.</typeparam>
            <param name="ruleset">The name of the required ruleset.</param>
            <returns>The validator.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="ruleset"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory.CreateValidator(System.Type)">
            <summary>
            Returns a validator representing the validation criteria specified for type <paramref name="targetType"/>
            through configuration and attributes on type <paramref name="targetType"/> and its ancestors for the default ruleset.
            </summary>
            <param name="targetType">The type to get the validator for.</param>
            <returns>The validator.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory.CreateValidator(System.Type,System.String)">
            <summary>
            Returns a validator representing the validation criteria specified for type <paramref name="targetType"/>
            through configuration and attributes on type <paramref name="targetType"/> and its ancestors for the supplied ruleset.
            </summary>
            <param name="targetType">The type to get the validator for.</param>
            <param name="ruleset">The name of the required ruleset.</param>
            <returns>The validator.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="ruleset"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory.InnerCreateValidator(System.Type,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            Creates the validator for the specified target and ruleset.
            </summary>
            <param name="targetType">The <see cref="T:System.Type"/>to validate.</param>
            <param name="ruleset">The ruleset to use when validating</param>
            <param name="mainValidatorFactory">Factory to use when building nested validators.</param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory.ResetCache">
            <summary>
             Clears the internal validator cache.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory.InstrumentationProvider">
            <summary>
             The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider"/> to attach to validators.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.AttributeValidatorFactory.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider)">
            <summary>
             Initializes an AttributeValidatorFactory
            </summary>
             <param name="instrumentationProvider">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider"/> 
             to provide to validators for instrumentation purposes.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.AttributeValidatorFactory.InnerCreateValidator(System.Type,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            Creates the validator for the specified target and ruleset.
            </summary>
            <param name="targetType">The <see cref="T:System.Type"/>to validate.</param>
            <param name="ruleset">The ruleset to use when validating</param>
            <param name="mainValidatorFactory">Factory to use when building nested validators.</param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.CompositeValidatorBuilder">
            <summary>
            Helps building validators composed by other validators.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.CompositeValidatorBuilder.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.CompositeValidatorBuilder"/> class.
            </summary>
            <param name="validatedElement">The element for which a composite validator will be created.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.CompositeValidatorBuilder.GetValidator">
            <summary>
            Returns the validator created by the builder.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.CompositeValidatorBuilder.DoGetValidator">
            <summary>
            Creates the composite validator built by the builder.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.CompositeValidatorBuilder.AddValueValidator(Microsoft.Practices.EnterpriseLibrary.Validation.Validator)">
            <summary>
            Adds a value validator to the composite validator.
            </summary>
            <param name="valueValidator">The validator to add.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.CompositeValidatorBuilder.IgnoreNulls">
            <summary>
            This member supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.CompositeValidatorBuilder.CompositionType">
            <summary>
            This member supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.CompositeValidatorBuilder.BuiltValidator">
            <summary>
            This member supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.CompositeValidatorBuilder.ValueValidators">
            <summary>
            This member supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.CompositeValidatorFactory">
            <summary>
             An instance factory for creating validators based on other validator factories.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.CompositeValidatorFactory.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory})">
            <summary>
             Initializes a composite validator factory from an array of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory"/> instances.
            </summary>
            <param name="instrumentationProvider">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider"/> to use when instrumenting validators.</param>
            <param name="validatorFactories">One or more validator factories to compose from.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.CompositeValidatorFactory.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider,Microsoft.Practices.EnterpriseLibrary.Validation.AttributeValidatorFactory,Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorFactory)">
            <summary>
             Initializes a composite validator factory from attribute and configuration validator factories
            </summary>
            <param name="instrumentationProvider">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider"/> to use when instrumenting validators.</param>
            <param name="attributeValidatorFactory">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.AttributeValidatorFactory"/> to composite.</param>
            <param name="configurationValidatorFactory">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorFactory"/> to composite.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.CompositeValidatorFactory.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider,Microsoft.Practices.EnterpriseLibrary.Validation.AttributeValidatorFactory,Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorFactory,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatorFactory)">
            <summary>
             Initializes a composite validator factory from attribute and configuration validator factories
            </summary>
            <param name="instrumentationProvider">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider"/> to use when instrumenting validators.</param>
            <param name="attributeValidatorFactory">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.AttributeValidatorFactory"/> to composite.</param>
            <param name="configurationValidatorFactory">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorFactory"/> to composite.</param>
            <param name="validationAttributeValidatorFactory">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatorFactory"/> to composite.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.CompositeValidatorFactory.InnerCreateValidator(System.Type,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            Creates the validator for the specified target and ruleset.
            </summary>
            <param name="targetType">The <see cref="T:System.Type"/>to validate.</param>
            <param name="ruleset">The ruleset to use when validating</param>
            <param name="mainValidatorFactory">Factory to use when building nested validators.</param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.CompositeValidatorFactory.ResetCache">
            <summary>
             Clears the internal validator cache.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatedElement">
            <summary>
            Represents the description of how validation must be performed on a language element as defined by configuration.
            </summary>
            <remarks>
            This class is a flyweight, so instances should not be kept for later use.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement">
            <summary>
            Represents the description of how validation must be performed on a language element.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement.GetValidatorDescriptors">
            <summary>
            Gets the validator descriptors for the validated element.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement.CompositionType">
            <summary>
            Gets the value indicating how the validators for the validated element.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement.CompositionMessageTemplate">
            <summary>
            Gets the message to use for the validator composing the validators for element.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement.CompositionTag">
            <summary>
            Gets the tag to use for the validator composing the validators for the element.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement.IgnoreNulls">
            <summary>
            Gets the flag indicating whether null values should be ignored.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement.IgnoreNullsMessageTemplate">
            <summary>
            Gets the message for null failures.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement.IgnoreNullsTag">
            <summary>
            Gets the tag for null failures.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement.MemberInfo">
            <summary>
            Gets the validated member.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement.TargetType">
            <summary>
            Gets the type of the validated member.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatedElement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatedElement"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatedElement.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedFieldReference,System.Reflection.FieldInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatedElement"/> class for a field.
            </summary>
            <param name="validatedFieldReference">The field reference configuration object.</param>
            <param name="fieldInfo">The field.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatedElement.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedMethodReference,System.Reflection.MethodInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatedElement"/> class for a method.
            </summary>
            <param name="validatedMethodReference">The method reference configuration object.</param>
            <param name="methodInfo">The method.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatedElement.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedPropertyReference,System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatedElement"/> class for a property.
            </summary>
            <param name="validatedPropertyReference">The property reference configuration object.</param>
            <param name="propertyInfo">The property.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatedElement.UpdateFlyweight(Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedFieldReference,System.Reflection.FieldInfo)">
            <summary>
            Updates the flyweight for a field.
            </summary>
            <param name="validatedFieldReference">The field reference configuration object.</param>
            <param name="fieldInfo">The field.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatedElement.UpdateFlyweight(Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedMethodReference,System.Reflection.MethodInfo)">
            <summary>
            Updates the flyweight for a method.
            </summary>
            <param name="validatedMethodReference">The method reference configuration object.</param>
            <param name="methodInfo">The method.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatedElement.UpdateFlyweight(Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedPropertyReference,System.Reflection.PropertyInfo)">
            <summary>
            Updates the flyweight for a property.
            </summary>
            <param name="validatedPropertyReference">The property reference configuration object.</param>
            <param name="propertyInfo">The property.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatedType">
            <summary>
            Represents the description of how validation must be performed on a type as defined by configuration.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedType">
            <summary>
            Represents the description of how validation must be performed on a type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedType.GetValidatedProperties">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement"/> instances representing the properties on the validated type.
            </summary>
            <returns>The validated properties.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedType.GetValidatedFields">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement"/> instances representing the fields on the validated type.
            </summary>
            <returns>The validated fields.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedType.GetValidatedMethods">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement"/> instances representing the methods on the validated type.
            </summary>
            <returns>The validated methods.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedType.GetSelfValidationMethods">
            <summary>
            Gets the self-validation methods on the validated type.
            </summary>
            <returns>The self-validation methods.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatedType.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationRulesetData,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatedType"/> class for a ruleset on a 
            target type.
            </summary>
            <param name="ruleData">The validation rules corresponding to a ruleset.</param>
            <param name="targetType">The target type.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorBuilderBase">
            <summary>
            Encapsulates shared validator building behavior.
            </summary>
            <remarks>
            This class relies on implementations of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedType"/> to supply validation descriptors.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorBuilderBase.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.MemberAccessValidatorBuilderFactory,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            
            </summary>
            <param name="memberAccessValidatorFactory"></param>
            <param name="validatorFactory"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorBuilderBase.CreateValidator(Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedType)">
            <summary>
            
            </summary>
            <param name="validatedType"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorBuilderBase.CreateValidatorForValidatedElement(Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorBuilderBase.CompositeValidatorBuilderCreator)">
            <summary>
            
            </summary>
            <param name="validatedElement"></param>
            <param name="validatorBuilderCreator"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorBuilderBase.GetCompositeValidatorBuilderForProperty(Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement)">
            <summary>
            
            </summary>
            <param name="validatedElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorBuilderBase.GetValueCompositeValidatorBuilderForProperty(Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement)">
            <summary>
            
            </summary>
            <param name="validatedElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorBuilderBase.GetCompositeValidatorBuilderForField(Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement)">
            <summary>
            
            </summary>
            <param name="validatedElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorBuilderBase.GetCompositeValidatorBuilderForMethod(Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement)">
            <summary>
            
            </summary>
            <param name="validatedElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorBuilderBase.GetCompositeValidatorBuilderForType(Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement)">
            <summary>
            
            </summary>
            <param name="validatedElement"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorBuilderBase.ValidatorFactory">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorBuilderBase.CompositeValidatorBuilderCreator">
            <summary>
            
            </summary>
            <param name="validatedElement"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorBuilder.FromConfiguration(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Validation.MemberAccessValidatorBuilderFactory,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            </summary>
            <param name="configurationSource"></param>
            <param name="memberAccessValidatorBuilderFactory"></param>
            <param name="validatorFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorBuilder.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationSettings,Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider)">
            <summary>
            </summary>
            <param name="validationSettings"></param>
            <param name="instrumentationProvider"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorBuilder.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationSettings,Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider,Microsoft.Practices.EnterpriseLibrary.Validation.MemberAccessValidatorBuilderFactory,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            </summary>
            <param name="validationSettings"></param>
            <param name="instrumentationProvider"></param>
            <param name="memberAccessValidatorFactory"></param>
            <param name="validatorFactory"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorBuilder.CreateValidator(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="ruleset"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorBuilder.CreateValidator(System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedTypeReference,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="typeReference"></param>
            <param name="ruleset"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorBuilder.CreateValidatorForProperty(System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedPropertyReference)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="propertyReference"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorBuilder.CreateValidatorForRule(System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationRulesetData)">
            <summary>
            This member supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorBuilder.CreateValidatorForType(System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationRulesetData)">
            <summary>
            This member supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorBuilder.CreateValidatorForField(System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedFieldReference)">
            <summary>
            This member supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorBuilder.CreateValidatorForMethod(System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedMethodReference)">
            <summary>
            This member supports the Enterprise Library infrastructure and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorFactory">
            <summary>
             A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> factory producing validators from rules specified in a configuration file.
            </summary>
             <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorFactory.FromConfigurationSource(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
             Creates a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorFactory"/> based on a configuration source.
            </summary>
            <param name="configurationSource"></param>
            <returns>A new ConfigurationValidatorFactory</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorFactory.#ctor(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider)">
            <summary>
             Initializes a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorFactory"/>.
            </summary>
            <param name="configurationSource">The configuration source containing the validation rules to create validators from.</param>
            <param name="instrumentationProvider">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider"/> provider to use for instrumentation purposes.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorFactory.InnerCreateValidator(System.Type,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            Creates the validator for the specified target and ruleset.
            </summary>
            <param name="targetType">The <see cref="T:System.Type"/>to validate.</param>
            <param name="ruleset">The ruleset to use when validating</param>
            <param name="mainValidatorFactory">Factory to use when building nested validators.</param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ConfigurationValidatorFactory.ConfigurationSource">
            <summary>
             The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> the factory uses for determining validation rules.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.AndCompositeValidatorData">
            <summary>
            Configuration object to describe an instance of class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator"/>.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData"/>
            <summary>
            Configuration object to describe an instance of class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator"/>.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData">
            <summary>
            Base class for configuration objects describing validators.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatorDescriptor">
            <summary>
            Represents the behavior to create a validator for a target type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatorDescriptor.CreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            Creates the represented <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <param name="ownerType">The type of the object from which the value to validate is extracted.</param>
            <param name="memberValueAccessBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder"/> to use for validators that
            require access to properties.</param>
            <param name="validatorFactory">Factory to use when building nested validators.</param>
            <returns>The new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.Microsoft#Practices#EnterpriseLibrary#Validation#IValidatorDescriptor#CreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <param name="ownerType">The type of the object from which the value to validate is extracted.</param>
            <param name="memberValueAccessBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder"/> to use for validators that
            require access to properties.</param>
            <param name="validatorFactory">Factory to use when building nested validators.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.DoCreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <param name="ownerType">The type of the object from which the value to validate is extracted.</param>
            <param name="memberValueAccessBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder"/> to use for validators that
            require access to properties.</param>
            <param name="validatorFactory">Factory to use when building nested validators.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.</returns>
            <remarks>
            The default implementation invokes <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.DoCreateValidator(System.Type)"/>. Subclasses requiring access to all
            the parameters or this method may override it instead of <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.DoCreateValidator(System.Type)"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This operation must be overridden by subclasses.</remarks>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.GetMessageTemplate">
            <summary>
            Returns the message template for the represented validator.
            </summary>
            <remarks>
            The textual message is given precedence over the resource based mechanism.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.MessageTemplate">
            <summary>
            Gets or sets the message template to use when logging validation results.
            </summary>
            <remarks>
            Either the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.MessageTemplate"/> or the 
            pair <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.MessageTemplateResourceName"/> 
            and <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.MessageTemplateResourceTypeName"/> can be used to 
            provide a message template for the represented validator.
            <para/>
            If both the template and the resource reference are specified, the template will be used.
            </remarks>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.MessageTemplateResourceName"/> 
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.MessageTemplateResourceTypeName"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.MessageTemplateResourceName">
            <summary>
            Gets or sets the name of the resource to retrieve the message template to use when logging validation results.
            </summary>
            <remarks>
            Used in combination with <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.MessageTemplateResourceTypeName"/>.
            <para/>
            Either the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.MessageTemplate"/> or the 
            pair <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.MessageTemplateResourceName"/> 
            and <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.MessageTemplateResourceTypeName"/> can be used to 
            provide a message template for the represented validator.
            <para/>
            If both the template and the resource reference are specified, the template will be used.
            </remarks>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.MessageTemplate"/> 
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.MessageTemplateResourceTypeName"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.MessageTemplateResourceTypeName">
            <summary>
            Gets or sets the name of the type to retrieve the message template to use when logging validation results.
            </summary>
            <remarks>
            Used in combination with <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.MessageTemplateResourceName"/>.
            <para/>
            Either the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.MessageTemplate"/> or the 
            pair <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.MessageTemplate"/> 
            and <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.MessageTemplateResourceTypeName"/> can be used to 
            provide a message template for the represented validator.
            <para/>
            If both the template and the resource reference are specified, the template will be used.
            </remarks>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.MessageTemplate"/> 
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.MessageTemplateResourceName"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData.Tag">
            <summary>
            Gets or sets the tag that will characterize the results logged by the represented validator.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.AndCompositeValidatorData.DoCreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <param name="ownerType">The type of the object from which the value to validate is extracted.</param>
            <param name="memberValueAccessBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder"/> to use for validators that
            require access to properties.</param>
            <param name="validatorFactory">Factory to use when building nested validators.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator"/>.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.AndCompositeValidatorData.Validators">
            <summary>
            Gets the collection with the definitions for the validators composed by 
            the represented <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ContainsCharactersValidatorData">
            <summary>
            Configuration object to describe an instance of class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ContainsCharactersValidatorData"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValueValidatorData">
            <summary>
            Configuration object to describe an instance of class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator"/>.
            </summary>
            <summary>
            Configuration object to describe an instance of class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValueValidatorData"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValueValidatorData.Negated">
            <summary>
            Gets or sets a value indicating whether the behavior of the represented validator should be negated.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ContainsCharactersValidatorData.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/>.</returns>	
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ContainsCharactersValidatorData.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ContainsCharactersValidatorData"/> class.</para>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ContainsCharactersValidatorData.CharacterSet">
            <summary>
            Gets or sets the string containing the characters to use by the represented 
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ContainsCharactersValidatorData.ContainsCharacters">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ContainsCharactersValidatorData.ContainsCharacters"/> value indicating the behavior for 
            the represented <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.DateTimeRangeValidatorData">
            <summary>
            Describes a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/>.
            </summary>
            <summary>
            Describes a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RangeValidatorData`1">
            <summary>
            Describes a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1"/>.
            </summary>
            <summary>
            Describes a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RangeValidatorData`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RangeValidatorData`1"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RangeValidatorData`1.LowerBound">
            <summary>
            Gets or sets the lower bound for the represented validator.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RangeValidatorData`1.LowerBoundType">
            <summary>
            Gets or sets the lower bound type for the represented validator.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RangeValidatorData`1.UpperBound">
            <summary>
            Gets or sets the upper bound for the represented validator.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RangeValidatorData`1.UpperBoundType">
            <summary>
            Gets or sets the upper bound type for the represented validator.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.DateTimeRangeValidatorData.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/>.</returns>	
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.DateTimeRangeValidatorData.LowerBound">
            <summary>
            Overridden in order to add DateTimeTypeConverter attribute.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.DateTimeRangeValidatorData.UpperBound">
            <summary>
            Overridden in order to add DateTimeTypeConverter attribute.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationCallHandlerData">
            <summary>
            A configuration element class that stores the configuration data for
            the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandler"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationCallHandlerData.#ctor">
            <summary>
            Create a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationCallHandlerData"/> instance.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationCallHandlerData.GetRegistrations(System.String)">
            <summary>
            Get the set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to
            register the call handler represented by this config element and its associated objects.
            </summary>
            <param name="nameSuffix">A suffix for the names in the generated type registration objects.</param>
            <returns>The set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationCallHandlerData.RuleSet">
            <summary>
            The ruleset name to use for all types. Empty string means default ruleset 
            </summary>
            <value>The "ruleSet" configuration property.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationCallHandlerData.SpecificationSource">
            <summary>
            SpecificationSource (Both | Attributes | Configuration) : Where to look for validation rules. Default is Both.
            </summary>
            <value>The "specificationSource" configuration attribute.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.CustomValidatorData">
            <summary>
            Configuration object to describe an instance of custom <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> class.
            </summary>
            <remarks>
            Custom <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> classes must implement a constructor with name and value collection parameters.
            </remarks>
            <summary>
            Configuration object to describe an instance of custom <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> class.
            </summary>
            <remarks>
            Custom <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> classes must implement a constructor with name and value collection parameters.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.CustomValidatorData.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.CustomValidatorData.Type">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.CustomValidatorData.Type"/> the element is the configuration for.
            </summary>
            <value>
            The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.CustomValidatorData.Type"/> the element is the configuration for.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.CustomValidatorData.TypeName">
            <summary>
            Gets or sets the fully qualified name of the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.CustomValidatorData.Type"/> the element is the configuration for.
            </summary>
            <value>
            the fully qualified name of the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.CustomValidatorData.Type"/> the element is the configuration for.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.CustomValidatorData.Attributes">
            <summary>
            Gets the custom configuration attributes.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.DomainConfigurationElement">
            <summary>
            Represents an individual domain element for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.DomainValidatorData">
            <summary>
            Configuration object to describe an instance of class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.DomainValidatorData"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.DomainValidatorData.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1"/>.</returns>	
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.DomainValidatorData.Domain">
            <summary>
            Gets the collection of elements for the domain for the represented <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.EnumConversionValidatorData">
            <summary>
            Configuration object to describe an instance of class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.EnumConversionValidatorData"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.EnumConversionValidatorData.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator"/>.</returns>	
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.EnumConversionValidatorData.EnumType">
            <summary>
            Gets or sets the enum element type.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.EnumConversionValidatorData.EnumTypeName">
            <summary>
            Gets or sets the name of the target element type for the represented validator.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.NotNullValidatorData">
            <summary>
            Configuration object to describe an instance of class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.NotNullValidatorData.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ObjectCollectionValidatorData">
            <summary>
            Configuration object to describe an instance of class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ObjectCollectionValidatorData.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see ObjectCollectionValidator="ObjectValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This method must not be called on this class. Call 
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ObjectCollectionValidatorData.DoCreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)"/>.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ObjectCollectionValidatorData.DoCreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <param name="ownerType">The type of the object from which the value to validate is extracted.</param>
            <param name="memberValueAccessBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder"/> to use for validators that
            require access to properties.</param>
            <param name="validatorFactory">Factory to use when building nested validators.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator"/>.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ObjectCollectionValidatorData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ObjectCollectionValidatorData"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ObjectCollectionValidatorData.TargetType">
            <summary>
            Gets or sets the target element type.
            </summary>
            <value>
            The target element type.
            </value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ObjectCollectionValidatorData.TargetTypeName">
            <summary>
            Gets or sets the name of the target element type for the represented validator.
            </summary>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ObjectCollectionValidatorData.TargetTypeName"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ObjectCollectionValidatorData.TargetRuleset">
            <summary>
            Gets or sets the name for the target ruleset for the represented validator.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ObjectValidatorData">
            <summary>
            Configuration object to describe an instance of class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ObjectValidatorData.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This method must not be called on this class. Call 
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ObjectValidatorData.DoCreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)"/>.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ObjectValidatorData.DoCreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <param name="ownerType">The type of the object from which the value to validate is extracted.</param>
            <param name="memberValueAccessBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder"/> to use for validators that
            require access to properties.</param>
            <param name="validatorFactory">Factory to use when building nested validators.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/>.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ObjectValidatorData.TargetRuleset">
            <summary>
            Gets or sets the name for the target ruleset for the represented validator.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ObjectValidatorData.ValidateActualType">
            <summary>
            Gets or sets the value indicating whether to validate based on the static type or the actual type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.OrCompositeValidatorData">
            <summary>
            Configuration object to describe an instance of class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator"/>.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData"/>
            <summary>
            Configuration object to describe an instance of class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator"/>.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.OrCompositeValidatorData.DoCreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <param name="ownerType">The type of the object from which the value to validate is extracted.</param>
            <param name="memberValueAccessBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder"/> to use for validators that
            require access to properties.</param>
            <param name="validatorFactory">Factory to use when building nested validators.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.OrCompositeValidatorData.Validators">
            <summary>
            Gets the collection with the definitions for the validators composed by 
            the represented <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.PropertyComparisonValidatorData">
            <summary>
            Represents a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.PropertyComparisonValidatorData.DoCreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <param name="ownerType">The type of the object from which the value to validate is extracted.</param>
            <param name="memberValueAccessBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder"/> to use for validators that
            require access to properties.</param>
            <param name="validatorFactory">Factory to use when building nested validators.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidator"/>.</returns>	
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.PropertyComparisonValidatorData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.PropertyComparisonValidatorData"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.PropertyComparisonValidatorData.ComparisonOperator">
            <summary>
            Gets or sets the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.PropertyComparisonValidatorData.ComparisonOperator"/> describing the comparison that the represented <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidator"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.PropertyComparisonValidatorData.PropertyToCompare">
            <summary>
            Gets or sets the name of the property that the represented <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidator"/> will use to retrieve the value to compare.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RangeValidatorData">
            <summary>
            Describes a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator"/>.
            </summary>
            <summary>
            Describes a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RangeValidatorData.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator"/>.</returns>	
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RangeValidatorData.Culture">
            <summary>
            Gets or sets the name of the culture that will be used to read lower and upperbound from the configuration file.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RegexValidatorData">
            <summary>
            Configuration object to describe an instance of class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/>.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RegexValidatorData.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RegexValidatorData.Pattern">
            <summary>
            Gets or sets the pattern for the represented validator.
            </summary>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.Pattern"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RegexValidatorData.Options">
            <summary>
            Gets or sets the regex options for the represented validator.
            </summary>
            <seealso cref="T:System.Text.RegularExpressions.RegexOptions"/>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.Options"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RegexValidatorData.PatternResourceName">
            <summary>
            Gets or sets the name of the resource holding the regex pattern.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RegexValidatorData.PatternResourceTypeName">
            <summary>
            Gets or sets the name of the resource type holding the regex pattern.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RegexValidatorData.PatternResourceType">
            <summary>
            Gets or sets the enum element type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RelativeDateTimeValidatorData">
            <summary>
            Configuration object to describe an instance of class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RelativeDateTimeValidatorData"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RelativeDateTimeValidatorData.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</returns>	
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RelativeDateTimeValidatorData.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RelativeDateTimeValidatorData"/> class.</para>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RelativeDateTimeValidatorData.LowerUnit">
            <summary>
            Gets or sets the unit to use when calculating the relative lower bound for the represented <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.RelativeDateTimeValidatorData.UpperUnit">
            <summary>
            Gets or sets the unit to use when calculating the relative upper bound for the represented <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.TypeConversionValidatorData">
            <summary>
            Configuration object to describe an instance of class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.TypeConversionValidatorData"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.TypeConversionValidatorData.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator"/>.</returns>	
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.TypeConversionValidatorData.TargetTypeName">
            <summary>
            Gets or sets name of the type the represented <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator"/> must use for testing conversion.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.TypeConversionValidatorData.TargetType">
            <summary>
            Gets or sets the target element type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.InjectionValidationSource">
            <summary>
            An object that can be passed to <see cref="M:Microsoft.Practices.Unity.IUnityContainer.RegisterType(System.Type,System.Type,System.String,Microsoft.Practices.Unity.LifetimeManager,Microsoft.Practices.Unity.InjectionMember[])"/> in order
            to specify where validation comes from: config, attribute, data annotations, or
            some combination thereof.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.InjectionValidationSource.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource)">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.InjectionValidationSource"/>, specifying
            the validation source.
            </summary>
            <param name="source">Source of validation metadata.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.InjectionValidationSource.AddPolicies(System.Type,System.Type,System.String,Microsoft.Practices.ObjectBuilder2.IPolicyList)">
            <summary>
            Add policies to the <paramref name="policies"/> to configure the
                        container to call this constructor with the appropriate parameter values.
            </summary>
            <param name="serviceType">Type of interface being registered. If no interface,
                        this will be null.</param><param name="implementationType">Type of concrete type being registered.</param><param name="name">Name used to resolve the type object.</param><param name="policies">Policy list to add policies to.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.InjectionValidationSource.Source">
            <summary>
            The current source of validation metadata.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidationBlockExtension">
            <summary>
             A <see cref="T:Microsoft.Practices.Unity.UnityContainerExtension"/> that allows the container
             to directly resolve <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidationBlockExtension.Initialize">
            <summary>
            Ensure that this container has been configured to resolve Validation
            block objects.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidationSpecificationSourcePolicy">
            <summary>
             A small objectbuilder policy used to pass the requested
             <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource"/> along to the
             <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorCreationStrategy"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidationSpecificationSourcePolicy.#ctor">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidationSpecificationSourcePolicy"/>
            with the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidationSpecificationSourcePolicy.Source"/> property initialized to All.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidationSpecificationSourcePolicy.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource)">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidationSpecificationSourcePolicy"/>
            with the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidationSpecificationSourcePolicy.Source"/> property initialized to the given value.
            </summary>
            <param name="source">The desired <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource"/>.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidationSpecificationSourcePolicy.Source">
            <summary>
             The desired <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorCreationStrategy">
            <summary>
             A <see cref="T:Microsoft.Practices.ObjectBuilder2.BuilderStrategy"/> for Unity that lets the container
             resolve <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1"/> objects directly.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorCreationStrategy.PreBuildUp(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Called during the chain of responsibility for a build operation. The
                        PreBuildUp method is called when the chain is being executed in the
                        forward direction.
            </summary>
            <param name="context">Context of the build operation.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorDependencyAttribute">
            <summary>
            An attribute used when injecting dependencies that are <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1"/>
            that allows you to specify the ruleset and an optional <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorDependencyAttribute.#ctor">
            <summary>
            A new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorDependencyAttribute"/> instance with the default
            rule set and a ValidationSpecificationSource of all.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorDependencyAttribute.#ctor(System.String)">
            <summary>
            A new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorDependencyAttribute"/> instance with the given
            rule set and a ValidationSpecificationSource of all.
            </summary>
            <param name="ruleSetName">Name of the rule set used to resolve this
            validator.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorDependencyAttribute.CreateResolver(System.Type)">
            <summary>
            Create an instance of <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> that
                        will be used to get the value for the member this attribute is
                        applied to.
            </summary>
            <param name="typeToResolve">Type of parameter or property that
                        this attribute is decoration.</param>
            <returns>
            The resolver object.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorDependencyAttribute.RuleSet">
            <summary>
            Rule set name to resolve with.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorDependencyAttribute.ValidationSource">
            <summary>
            The source for the validation configuration: configuration, attributes,
            data annotations, or some combination thereof.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorParameter">
            <summary>
            An <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/> class that can be passed
            as the value for a dependency in the Unity RegisterType API.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorParameter.#ctor(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorParameter"/> object, which resolves
            the default ruleset and all sources.
            </summary>
            <param name="typeToValidate">Type to construct a validator for.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorParameter.#ctor(System.Type,System.String)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorParameter"/> object which resolves
            using the given <paramref name="ruleSet"/> and all sources.
            </summary>
            <param name="typeToValidate">Type to construct a validator for.</param>
            <param name="ruleSet">Rule set to use.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorParameter.#ctor(System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorParameter"/> object which resolves
            using the default rule set and the given <paramref name="validationSource"/>.
            </summary>
            <param name="typeToValidate">Type to construct a validator for.</param>
            <param name="validationSource"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource"/> controlling which
            set of validator to retrieve.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorParameter.#ctor(System.Type,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource)">
            <summary>
            Resolve a validator with the given ruleset and validation source.
            </summary>
            <param name="typeToValidate">Type to construct a validator for.</param>
            <param name="ruleSet">Ruleset to use, or null for the default.</param>
            <param name="validationSource"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource"/> controlling which
            set of validator to retrieve.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorParameter.MatchesType(System.Type)">
            <summary>
            Test to see if this parameter value has a matching type for the given type.
            </summary>
            <param name="t">Type to check.</param>
            <returns>
            True if this parameter value is compatible with type <paramref name="t"/>,
                        false if not.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorParameter.GetResolverPolicy(System.Type)">
            <summary>
            Return a <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> instance that will
                        return this types value for the parameter.
            </summary>
            <param name="typeToBuild">Type that contains the member that needs this parameter. Used
                        to resolve open generic parameters.</param>
            <returns>
            The <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/>.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorParameter.ParameterTypeName">
            <summary>
            Name for the type represented by this <see cref="T:Microsoft.Practices.Unity.InjectionParameterValue"/>.
                        This may be an actual type name or a generic argument name.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorParameter`1">
            <summary>
            A version of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorParameter"/> that lets you specify the type to
            validate using generic syntax.
            </summary>
            <typeparam name="T">Type to construct a validator for.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorParameter`1.#ctor">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorParameter"/> object, which resolves
            the default ruleset and all sources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorParameter`1.#ctor(System.String)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorParameter"/> object which resolves
            using the given <paramref name="ruleSet"/> and all sources.
            </summary>
            <param name="ruleSet">Rule set to use.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorParameter`1.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorParameter"/> object which resolves
            using the default rule set and the given <paramref name="validationSource"/>.
            </summary>
            <param name="validationSource"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource"/> controlling which
            set of validator to retrieve.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorParameter`1.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource)">
            <summary>
            Resolve a validator with the given ruleset and validation source.
            </summary>
            <param name="ruleSet">Ruleset to use, or null for the default.</param>
            <param name="validationSource"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource"/> controlling which
            set of validator to retrieve.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorResolver">
            <summary>
            A <see cref="T:Microsoft.Practices.ObjectBuilder2.IDependencyResolverPolicy"/> object that will resolve a
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorResolver.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource,System.Type)">
            <summary>
            Create a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorResolver"/> with the given
            parameters.
            </summary>
            <param name="ruleSet">Rule set name, or null to use default.</param>
            <param name="validationSource"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource"/> to use when resolving.</param>
            <param name="validatorType">Type of validator to resolve.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.Unity.ValidatorResolver.Resolve(Microsoft.Practices.ObjectBuilder2.IBuilderContext)">
            <summary>
            Get the value for a dependency.
            </summary>
            <param name="context">Current build context.</param>
            <returns>
            The value for the dependency.
            </returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedFieldReference">
            <summary>
            Represents the validation information for a field.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedTypeReference"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationRulesetData"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedMemberReference"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedMemberReference">
            <summary>
            Represents the validation information for a member of a type.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationRulesetData"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedMemberReference"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedMemberReference.Validators">
            <summary>
            Gets the collection of validators configured for the member.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedMethodReference">
            <summary>
            Represents the validation information for a method.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedTypeReference"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationRulesetData"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedMemberReference"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedPropertyReference">
            <summary>
            Represents the validation information for a property.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedTypeReference"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationRulesetData"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedMemberReference"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedTypeReference">
            <summary>
            Represents validation information for a type and its members.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationRulesetData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedTypeReference.Create(System.Type)">
            <summary>
            <para>Creates a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedTypeReference"/> class with a type.</para>
            </summary>
            <param name="type">The represented type.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedTypeReference.Rulesets">
            <summary>
            Gets the collection with the validation rulesets configured the represented type.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedTypeReference.DefaultRuleset">
            <summary>
            Gets or sets the default ruleset for the represented type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationRulesetData">
            <summary>
            Represents a ruleset for a validated type.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedTypeReference"/>
            <remarks>
            Self validation is not supported through configuration.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedTypeReference"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationRulesetData.Validators">
            <summary>
            Gets the collection of validators configured for the type owning the ruleset.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationRulesetData.Fields">
            <summary>
            Gets the collection of validated fields for the type owning the ruleset.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationRulesetData.Methods">
            <summary>
            Gets the collection of validated methods for the type owning the ruleset.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationRulesetData.Properties">
            <summary>
            Gets the collection of validated properties for the type owning the ruleset.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationSettings">
            <summary>
            Configuration section for stored validation information.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatedTypeReference"/>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationSettings.SectionName">
            <summary>
            The name used to serialize the configuration section.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationSettings.TryGet(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider)">
            <summary>
             Tries to retrieve the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationSettings"/> and notifies the provided <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider"/>
             if there is a <see cref="T:System.Exception"/>.  The exception is rethrown.
            </summary>
            <param name="configurationSource"></param>
            <param name="instrumentationProvider"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationSettings.Types">
            <summary>
            Gets the collection of types for which validation has been configured.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.DataAnnotations.MetadataTypeAttribute">
            <summary>
            Specifies the metadata class to associate with a data model class.
            </summary>
            <remarks>
            <para>
            This attribute might be deprecated in the future in favor of a Silverlight built-in System.ComponentModel.DataAnnotations.MetatadataTypeAttribute.
            The current implementation allows a Silverlight application using Validation Application Block to take advantage of this feature which is available
            in the .NET Framework, and it can be useful for cross-tier validation scenarios.
            </para>
            <para>
            The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.DataAnnotations.MetadataTypeAttribute"/> attribute enables you to associate a class with a data-model partial class.
            In this associated class you provide additional metadata information that is not in the data model.
            For example, in the associated class you can apply the <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute"/>  attribute to a data field. 
            This enforces that a value is provided for the field even if this constraint is not required by the database schema.
            </para>
            <para>
            You use the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.DataAnnotations.MetadataTypeAttribute"/> attribute as follows:
             - In your application, create a file in which you create the data-model partial class that you want to modify.
             - Create the associated metadata class.
             - Apply the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.DataAnnotations.MetadataTypeAttribute"/> attribute to the partial entity class, specifying the associated class.
            </para>
            <para>
            When you apply this attribute, you must adhere to the following usage constraints:
             - The attribute can only be applied to a class.
             - The attribute cannot be inherited by derived classes.
             - The attribute can be applied only one time.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.DataAnnotations.MetadataTypeAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.DataAnnotations.MetadataTypeAttribute"/> class.
            </summary>
            <param name="metadataClassType">The metadata class to reference.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.DataAnnotations.MetadataTypeAttribute.MetadataClassType">
            <summary>
            Gets the metadata class that is associated with a data-model partial class.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.DataErrorInfoHelper">
            <summary>
            Helper class to implement the <see cref="T:System.ComponentModel.IDataErrorInfo"/> interface using the 
            Validation Application Block.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.DataErrorInfoHelper.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.DataErrorInfoHelper"/> class for a target object.
            </summary>
            <param name="target">The target object.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.DataErrorInfoHelper.#ctor(System.Object,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.DataErrorInfoHelper"/> class for a target object with the 
            supplied source and ruleset.
            </summary>
            <param name="target">The target object.</param>
            <param name="source">The source for validation rules for the target object.</param>
            <param name="ruleset">The ruleset to use when retrieving rules for the target object.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.DataErrorInfoHelper.Error">
            <summary>
            Gets an error message indicating what is wrong with this object.
            </summary>
            <value>An error message indicating what is wrong with this object. The default is an empty string ("").</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.DataErrorInfoHelper.Item(System.String)">
            <summary>
            Gets the error message for the property with the given name.
            </summary>
            <param name="columnName">The name of the property whose error message to get. </param>
            <value>The error message for the property. The default is an empty string ("").</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.NullValidationInstrumentationProvider">
            <summary>
            Implementation of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider"/> that performs no instrumentation actions.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider">
            <summary>
             Describes the logical notifications raised by various validation classes to which providers will respond.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider.NotifyValidationSucceeded(System.Type)">
            <summary>
             Notifies provider that a validation has succeeded.
            </summary>
            <param name="typeBeingValidated"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider.NotifyValidationFailed(System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
             Notifies provider that validation has failed.
            </summary>
            <param name="typeBeingValidated"></param>
            <param name="validationResult"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider.NotifyConfigurationFailure(System.Exception)">
            <summary>
             Notifies provider that configuration for validation has failed.
            </summary>
            <param name="configurationException"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider.NotifyConfigurationCalled(System.Type)">
            <summary>
             Notifies provider that a configuration based validation has been called.
            </summary>
            <param name="typeBeingValidated"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider.NotifyValidationException(System.Type,System.String,System.Exception)">
            <summary>
             Notifies provider of a validation exception.
            </summary>
            <param name="typeBeingValidated"></param>
            <param name="errorMessage"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.NullValidationInstrumentationProvider.NotifyValidationSucceeded(System.Type)">
            <summary>
            Notifies provider that a validation has succeeded.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.NullValidationInstrumentationProvider.NotifyValidationFailed(System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Notifies provider that validation has failed.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.NullValidationInstrumentationProvider.NotifyConfigurationCalled(System.Type)">
            <summary>
            Notifies provider that a configuration based validation has been called.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.NullValidationInstrumentationProvider.NotifyValidationException(System.Type,System.String,System.Exception)">
            <summary>
            Notifies provider of a validation exception.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.NullValidationInstrumentationProvider.NotifyConfigurationFailure(System.Exception)">
            <summary>
            Notifies provider that configuration for validation has failed.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationTypeRegistrationProvider">
            <summary>
             Provides <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> entries used by 
             a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.IContainerConfigurator"/> for the validation block.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationTypeRegistrationProvider.GetRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to configure
            the container for the Validation Application Block.
            </summary>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> used when creating the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration`1"/> entries.</param>
            <returns>The sequence of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidationTypeRegistrationProvider.GetUpdatedRegistrations(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Return the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects needed to reconfigure
            the container after a configuration source has changed.
            </summary>
            <remarks>If there are no reregistrations, return an empty sequence.</remarks>
            <param name="configurationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/> containing
            the configuration information.</param>
            <returns>The sequence of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.ContainerModel.TypeRegistration"/> objects.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.StringLengthValidatorData">
            <summary>
            Configuration object to describe an instance of class <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/>.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.ValidatorData"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Configuration.StringLengthValidatorData.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.MemberAccessValidatorBuilderFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MemberAccessValidatorBuilderFactory.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MemberAccessValidatorBuilderFactory.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder)">
            <summary>
            
            </summary>
            <param name="valueAccessBuilder"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MemberAccessValidatorBuilderFactory.GetPropertyValueAccessValidatorBuilder(System.Reflection.PropertyInfo,Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement)">
            <summary>
            Returns an object that will build a ValueAccessValidator for <paramref name="propertyInfo"/> with the supplied 
            validation modifiers.
            </summary>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccessValidatorBuilder"/> for the supplied parameters.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="propertyInfo"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MemberAccessValidatorBuilderFactory.GetFieldValueAccessValidatorBuilder(System.Reflection.FieldInfo,Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement)">
            <summary>
            Returns an object that will build a ValueAccessValidator for <paramref name="fieldInfo"/> with the supplied 
            validation modifiers.
            </summary>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccessValidatorBuilder"/> for the supplied parameters.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="fieldInfo"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MemberAccessValidatorBuilderFactory.GetMethodValueAccessValidatorBuilder(System.Reflection.MethodInfo,Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement)">
            <summary>
            Returns an object that will build a ValueAccessValidator for <paramref name="methodInfo"/> with the supplied 
            validation modifiers.
            </summary>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccessValidatorBuilder"/> for the supplied parameters.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="methodInfo"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="methodInfo"/> returns <see langword="void"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="methodInfo"/> has parameters.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MemberAccessValidatorBuilderFactory.GetTypeValidatorBuilder(System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="validatedElement"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.MemberAccessValidatorBuilderFactory.MemberValueAccessBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder">
            <summary>
            Creates <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> objects for member descriptors.
            </summary>
            <remarks>
            Subclasses might return <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> implementations that do not assume
            a value is being extracted from the type that owns the member descriptors.<para/>
            This is necessary in the integration scenarios.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder.GetFieldValueAccess(System.Reflection.FieldInfo)">
            <summary>
            Creates a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> suitable for accessing the value in <paramref name="fieldInfo"/>.
            </summary>
            <param name="fieldInfo">The <see cref="T:System.Reflection.FieldInfo"/></param> representing the field for which a
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> is required.
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> that allows for accessing the value in <paramref name="fieldInfo"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="fieldInfo"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder.DoGetFieldValueAccess(System.Reflection.FieldInfo)">
            <summary>
            Performs the actual creation of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> suitable for accessing the value in <paramref name="fieldInfo"/>.
            </summary>
            <param name="fieldInfo">The <see cref="T:System.Reflection.FieldInfo"/></param> representing the field for which a
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> is required.
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> that allows for accessing the value in <paramref name="fieldInfo"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder.GetMethodValueAccess(System.Reflection.MethodInfo)">
            <summary>
            Creates a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> suitable for accessing the return value for <paramref name="methodInfo"/>.
            </summary>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/></param> representing the method for which a
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> is required.
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> that allows for accessing the value in <paramref name="methodInfo"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="methodInfo"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="methodInfo"/> represents a method with a non-void return type.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="methodInfo"/> represents a method with parameters.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder.DoGetMethodValueAccess(System.Reflection.MethodInfo)">
            <summary>
            Performs the actual creation of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> suitable for accessing the value in <paramref name="methodInfo"/>.
            </summary>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/></param> representing the method for which a
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> is required.
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> that allows for accessing the value in <paramref name="methodInfo"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder.GetPropertyValueAccess(System.Reflection.PropertyInfo)">
            <summary>
            Creates a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> suitable for accessing the value for <paramref name="propertyInfo"/>.
            </summary>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/></param> representing the property for which a
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> is required.
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> that allows for accessing the value in <paramref name="propertyInfo"/>.</returns>
            <exception cref="T:System.ArgumentNullException">when <paramref name="propertyInfo"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder.DoGetPropertyValueAccess(System.Reflection.PropertyInfo)">
            <summary>
            Performs the actual creation of a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> suitable for accessing the value in <paramref name="propertyInfo"/>.
            </summary>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/></param> representing the property for which a
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> is required.
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> that allows for accessing the value in <paramref name="propertyInfo"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedElement">
            <summary>
            Represents the description of how validation must be performed on a language element as defined by attributes.
            </summary>
            <remarks>
            This class is a flyweight, so instances should not be kept for later use.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedElement.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedElement"/> class for a ruleset..
            </summary>
            <param name="ruleset">The ruleset.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedElement.#ctor(System.Reflection.FieldInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedElement"/> class for a field and a ruleset.
            </summary>
            <param name="fieldInfo">The field.</param>
            <param name="ruleset">The ruleset.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedElement.#ctor(System.Reflection.MethodInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedElement"/> class for a method and a ruleset.
            </summary>
            <param name="methodInfo">The method.</param>
            <param name="ruleset">The ruleset.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedElement.#ctor(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedElement"/> class for a property and a ruleset.
            </summary>
            <param name="propertyInfo">The property.</param>
            <param name="ruleset">The ruleset.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedElement.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedElement"/> class for a type and a ruleset.
            </summary>
            <param name="type">The property.</param>
            <param name="ruleset">The ruleset.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedElement.UpdateFlyweight(System.Reflection.FieldInfo)">
            <summary>
            Updates the flyweight for a field.
            </summary>
            <param name="fieldInfo">The field.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedElement.UpdateFlyweight(System.Reflection.MethodInfo)">
            <summary>
            Updates the flyweight for a method.
            </summary>
            <param name="methodInfo">The method.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedElement.UpdateFlyweight(System.Reflection.PropertyInfo)">
            <summary>
            Updates the flyweight for a property.
            </summary>
            <param name="propertyInfo">The property.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedElement.UpdateFlyweight(System.Type)">
            <summary>
            Updates the flyweight for a type.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedElement.Ruleset">
            <summary>
            Gets the ruleset.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedElement.TargetType">
            <summary>
            Gets the target type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedParameterElement">
            <summary>
            Describes how validation must be performed on a parameter as defined by attributes.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedParameterElement.GetValidatorDescriptors">
            <summary>
            Gets the validator descriptors for the validated element.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedParameterElement.UpdateFlyweight(System.Reflection.ParameterInfo)">
            <summary>
            Updates the flyweight for a parameter.
            </summary>
            <param name="parameterInfo">The parameter.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedParameterElement.CompositionType">
            <summary>
            Gets the value indicating how the validators for the validated element.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedParameterElement.CompositionMessageTemplate">
            <summary>
            Gets the message to use for the validator composing the validators for element.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedParameterElement.CompositionTag">
            <summary>
            Gets the tag to use for the validator composing the validators for the element.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedParameterElement.IgnoreNulls">
            <summary>
            Gets the flag indicating whether null values should be ignored.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedParameterElement.IgnoreNullsMessageTemplate">
            <summary>
            Gets the message for null failures.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedParameterElement.IgnoreNullsTag">
            <summary>
            Gets the tag for null failures.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedParameterElement.MemberInfo">
            <summary>
            Gets the validated member.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedParameterElement.TargetType">
            <summary>
            Gets the type of the validated member.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedType">
            <summary>
            Represents the description of how validation must be performed on a type as defined by attributes.
            </summary>
            <remarks>
            This class is a flyweight, so instances should not be kept for later use.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedType.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatedType"/> class for a type and a ruleset.
            </summary>
            <param name="targetType">The target type.</param>
            <param name="ruleset">The ruleset.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatorBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatorBuilder.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatorBuilder.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.MemberAccessValidatorBuilderFactory)">
            <summary>
            
            </summary>
            <param name="memberAccessValidatorFactory"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatorBuilder.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.MemberAccessValidatorBuilderFactory,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            
            </summary>
            <param name="memberAccessValidatorFactory"></param>
            <param name="validatorFactory"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatorBuilder.CreateValidator(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="ruleset"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatorBuilder.CreateValidatorForType(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="ruleset"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatorBuilder.CreateValidatorForProperty(System.Reflection.PropertyInfo,System.String)">
            <summary>
            
            </summary>
            <param name="propertyInfo"></param>
            <param name="ruleset"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatorBuilder.CreateValidatorForField(System.Reflection.FieldInfo,System.String)">
            <summary>
            
            </summary>
            <param name="fieldInfo"></param>
            <param name="ruleset"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.MetadataValidatorBuilder.CreateValidatorForMethod(System.Reflection.MethodInfo,System.String)">
            <summary>
            
            </summary>
            <param name="methodInfo"></param>
            <param name="ruleset"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ParameterValidatorFactory">
            <summary>
            A special factory class that creates Validator objects based on
            attributes specified on a method parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ParameterValidatorFactory.CreateValidator(System.Reflection.ParameterInfo)">
            <summary>
            Create a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> instance based on the validation
            attributes on the given parameter.
            </summary>
            <remarks>This factory method ignores configuration and rulesets. For parameters,
            only attribute based configuration is supported at this time.</remarks>
            <param name="paramInfo">The <see cref="T:System.Reflection.ParameterInfo"/> for the parameter to construct a validator for.</param>
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ArgumentValidationException">
            <summary>
            Exception thrown by the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandler"/> if validation fails.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ArgumentValidationException.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ArgumentValidationException"/>, storing the validation
            results and the name of the parameter that failed.
            </summary>
            <param name="validationResults"><see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults"/> returned from the Validation Application Block.</param>
            <param name="paramName">Parameter that failed validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ArgumentValidationException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>A string representation of the current exception.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandler">
            <summary>
            An <see cref="T:Microsoft.Practices.Unity.InterceptionExtension.ICallHandler"/> that runs validation of a call's parameters
            before calling the target.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandler.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.SpecificationSource)">
            <summary>
            Creates a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandler"/> that uses the given
            ruleset and <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.SpecificationSource"/> to get the validation rules.
            </summary>
            <param name="ruleSet">Validation ruleset as specified in configuration.</param>
            <param name="specificationSource">Should the validation come from config, attributes, or both?</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandler.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.SpecificationSource,System.Int32)">
            <summary>
            Creates a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandler"/> that uses the given
            ruleset and <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.SpecificationSource"/> to get the validation rules.
            </summary>
            <param name="ruleSet">Validation ruleset as specified in configuration.</param>
            <param name="specificationSource">Should the validation come from config, attributes, or both?</param>
            <param name="handlerOrder">Order of the handler</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandler.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory,System.Int32)">
            <summary>
            Creates a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandler"/> that uses the given
            ruleset and <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandler.ValidatorFactory"/> to get the validation rules.
            </summary>
            <param name="ruleSet">Validation ruleset as specified in configuration.</param>
            <param name="validatorFactory">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandler.ValidatorFactory"/> to use when building the validator for the 
            type of a parameter, or <see langword="null"/> if no such validator is desired.</param>
            <param name="handlerOrder">Order of the handler</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandler.Invoke(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Microsoft.Practices.Unity.InterceptionExtension.GetNextHandlerDelegate)">
            <summary>
            Runs the call handler. This does validation on the parameters, and if validation
            passes it calls the handler. It throws <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ArgumentValidationException"/>
            if validation fails.
            </summary>
            <param name="input"><see cref="T:Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation"/> containing details of the current call.</param>
            <param name="getNext">delegate to call to get the next handler in the pipeline.</param>
            <returns>Return value from the target.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandler.Order">
            <summary>
            Gets or sets the order in which the handler will be executed
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandler.RuleSet">
            <summary>
            Gets the ruleset for this call handler.
            </summary>
            <value>Ruleset name.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandler.ValidatorFactory">
            <summary>
            Factory used to build validators.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.SpecificationSource">
            <summary>
            Where should the information for validation come from?
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.SpecificationSource.Both">
            <summary>
            Configuration and type attributes
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.SpecificationSource.Attributes">
            <summary>
            Type attributes only, ignoring configuration
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.SpecificationSource.Configuration">
            <summary>
            Configuration only, ignoring type attributes
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.SpecificationSource.ParameterAttributesOnly">
            <summary>
            Only use attributes on the parameters themselves, ignoring types and configuration
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandlerAttribute">
            <summary>
            An attribute that applies the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandler"/> to its target.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandlerAttribute.#ctor">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandlerAttribute"/> that uses the
            default ruleset.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandlerAttribute.#ctor(System.String)">
            <summary>
            Constructs a new <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandlerAttribute"/> that uses the
            given ruleset.
            </summary>
            <param name="ruleSet">Ruleset name to use.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandlerAttribute.CreateHandler(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            Derived classes implement this method. When called, it
            creates a new call handler as specified in the attribute
            configuration.
            </summary>
            <returns>A new call handler object.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandlerAttribute.SpecificationSource">
            <summary>
            <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.PolicyInjection.ValidationCallHandlerAttribute.SpecificationSource"/> determining where to get validation rules.
            </summary>
            <value>specification source.</value>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ContainsCharactersNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must not contain the characters in &quot;{3}&quot; with mode &quot;{4}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ContainsCharactersNonNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must contain the characters in &quot;{3}&quot; with mode &quot;{4}&quot;. .
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.DomainNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must not belong to the domain..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.DomainNonNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value does not belong to the domain..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.EnumConversionNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must not be defined in the &quot;{3}&quot; enum type..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.EnumConversionNonNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must be defined in the &quot;{3}&quot; enum type..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ErrorValueAccessInvalidType">
            <summary>
              Looks up a localized string similar to The value for &quot;{0}&quot; could not be accessed from an instance of &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ErrorValueAccessNull">
            <summary>
              Looks up a localized string similar to The value for &quot;{0}&quot; could not be accessed from null..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionBoundTypeNotIComparable">
            <summary>
              Looks up a localized string similar to The supplied bound type is not compatible with IComparable..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionCannotConvertBound">
            <summary>
              Looks up a localized string similar to The string representing the bound value could not be converted to the bound type..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionCannotIgnoreBothBoundariesInRange">
            <summary>
              Looks up a localized string similar to At most one range bound can be ignored..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionCannotSetResourceBasedMessageTemplatesIfTemplateIsSet">
            <summary>
              Looks up a localized string similar to A message template has been set already, resource based message templates are not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionCannotSetResourceMessageTemplatesIfResourceTemplateIsSet">
            <summary>
              Looks up a localized string similar to A message template resource has been set already; template override is not allowed..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionContainsNullElements">
            <summary>
              Looks up a localized string similar to Enumerable contains null elements..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionInvalidDate">
            <summary>
              Looks up a localized string similar to The supplied string is not a valid date representation..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionInvalidField">
            <summary>
              Looks up a localized string similar to The field &quot;{0}&quot; on type &quot;{1}&quot; is either missing or non public..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionInvalidMethod">
            <summary>
              Looks up a localized string similar to The method &quot;{0}&quot; on type &quot;{1}&quot; is either missing, non public, void or has parameters..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionInvalidProperty">
            <summary>
              Looks up a localized string similar to The property &quot;{0}&quot; on type &quot;{1}&quot; is either missing, non public or read-only..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionInvalidTargetType">
            <summary>
              Looks up a localized string similar to Value to validate is not of the expected type: expected {0} but got {1} instead..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionLowerBoundNull">
            <summary>
              Looks up a localized string similar to The lower bound cannot be null unless it&apos;s type is Ignore..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionMethodHasNoReturnValue">
            <summary>
              Looks up a localized string similar to Method to access value does not have a return value..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionMethodHasParameters">
            <summary>
              Looks up a localized string similar to Method to access value has parameters..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionPartiallyDefinedResourceForMessageTemplate">
            <summary>
              Looks up a localized string similar to Both resource name and resource type must be defined to retrieve the message template..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionPropertyNotFound">
            <summary>
              Looks up a localized string similar to The source property to request validators from does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionPropertyNotReadable">
            <summary>
              Looks up a localized string similar to The source property to request validators from is not readable..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionPropertyToCompareNotFound">
            <summary>
              Looks up a localized string similar to No public readable property with name &quot;{0}&quot; could be found for type &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionPropertyToCompareNull">
            <summary>
              Looks up a localized string similar to The name for the property to compare is null for PropertyComparisonValidator..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionSelfValidationMethodWithInvalidSignature">
            <summary>
              Looks up a localized string similar to The self validation method has an invalid signature. It should be &quot;void [method name](ValidationResults)&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionShouldNotCall">
            <summary>
              Looks up a localized string similar to This method should not have been called..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionTypeNotFound">
            <summary>
              Looks up a localized string similar to The source type to request validators from has not been found..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionTypeOfBoundsMustMatch">
            <summary>
              Looks up a localized string similar to Range bounds must have the same type..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionUpperBoundLowerThanLowerBound">
            <summary>
              Looks up a localized string similar to Upper bound cannot be lower than lower bound..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionUpperBoundNull">
            <summary>
              Looks up a localized string similar to The upper bound cannot be null unless it&apos;s type is Ignore..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionValidatingNullOnValueType">
            <summary>
              Looks up a localized string similar to Value to validate is null but expected an instance of the non-reference type {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ExceptionValidationAttributeNotSupported">
            <summary>
              Looks up a localized string similar to A validation attribute of type {0} cannot be used to validate values..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.IllegalUseOfInjectionValidationSource">
            <summary>
              Looks up a localized string similar to The InjectionValidationSource may only be used to configure generic Enterprise Library validator classes..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.IllegalUseOfValidationDependencyAttribute">
            <summary>
              Looks up a localized string similar to The ValidationDependencyAttribute was applied to a dependency of type {0}, which is a generic Enterprise Library validator class..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.InvalidValidationSpecificationSource">
            <summary>
              Looks up a localized string similar to The Validation Specification Source {0} is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.MetadataTypeAttribute_TypeCannotBeNull">
            <summary>
              Looks up a localized string similar to MetadataClassType cannot be null..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.MustImplementOperation">
            <summary>
              Looks up a localized string similar to The operation must be implemented by a subclass..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.NonNullNegatedValidatorDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must be null..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.NonNullNonNegatedValidatorDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value cannot be null..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ObjectCollectionValidatorIncompatibleElementInTargetCollection">
            <summary>
              Looks up a localized string similar to The element in the validated collection is not compatible with the expected type..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ObjectCollectionValidatorTargetNotCollection">
            <summary>
              Looks up a localized string similar to The supplied object is not a collection..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ObjectValidatorInvalidTargetType">
            <summary>
              Looks up a localized string similar to The supplied object is not compatible with the expected type..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.OrCompositeValidatorDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to All validators failed for key &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.RangeValidatorNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must not fall within the range &quot;{3}&quot; ({4}) - &quot;{5}&quot; ({6})..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.RangeValidatorNonNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must fall within the range &quot;{3}&quot; ({4}) - &quot;{5}&quot; ({6})..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.RegexValidatorNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must not match the regular expression &quot;{3}&quot; with options &quot;{4}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.RegexValidatorNonNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must match the regular expression &quot;{3}&quot; with options &quot;{4}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.RelativeDateTimeNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must not fall within the range &quot;{3}&quot; ({4}) - &quot;{5}&quot; ({6}) relative to now..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.RelativeDateTimeNonNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must fall within the range &quot;{3}&quot; ({4}) - &quot;{5}&quot; ({6}) relative to now..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.RelativeDateTimeValidatorNotValidDateTimeUnit">
            <summary>
              Looks up a localized string similar to It&apos;s not possible to specify a None DateTime unit if a BoundaryType different from Ignore is used..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.SelfValidationMethodThrownMessage">
            <summary>
              Looks up a localized string similar to The self validation method thrown an exception while evaluating..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.SelfValidationValidatorMessage">
            <summary>
              Looks up a localized string similar to The reference provided to the self validation method is either null or references an instance of a non-compatible type..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.StringLengthValidatorNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The length of the value must not fall within the range &quot;{3}&quot; ({4}) - &quot;{5}&quot; ({6})..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.StringLengthValidatorNonNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The length of the value must fall within the range &quot;{3}&quot; ({4}) - &quot;{5}&quot; ({6})..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.TypeConversionNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must not be convertible to type &quot;{3}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.TypeConversionNonNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value must be convertible to type &quot;{3}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ValidationAttributeFailed">
            <summary>
              Looks up a localized string similar to Validation using {0} threw an exception: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ValidationFailedMessage">
            <summary>
              Looks up a localized string similar to Parameter validation failed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ValidationResultsHeader">
            <summary>
              Looks up a localized string similar to Validation results:.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ValidationResultTemplate">
            <summary>
              Looks up a localized string similar to     Result: {0} Message: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ValidationResultWithKeyTemplate">
            <summary>
              Looks up a localized string similar to     Result: {0} Key: {2} Message: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ValueAccessComparisonValidatorFailureToRetrieveComparand">
            <summary>
              Looks up a localized string similar to Failure to retrieve comparand for key &quot;{0}&quot;: {1}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ValueAccessComparisonValidatorNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value should not have succeeded in the comparison with value for key &quot;{4}&quot; using operator &quot;{5}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ValueAccessComparisonValidatorNonNegatedDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to The value failed the comparison with value for key &quot;{4}&quot; using operator &quot;{5}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Properties.Resources.ValueValidatorDefaultMessageTemplate">
            <summary>
              Looks up a localized string similar to Value Validator.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.PropertyValidationFactory">
            <summary>
            Factory for creating <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> objects for properties.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PropertyValidationFactory.ResetCaches">
            <summary>
            Resets the cached validators.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PropertyValidationFactory.GetPropertyValidator(System.Type,System.Reflection.PropertyInfo,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="propertyInfo"></param>
            <param name="ruleset"></param>
            <param name="validationSpecificationSource"></param>
            <param name="memberValueAccessBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PropertyValidationFactory.GetPropertyValidator(System.Type,System.Reflection.PropertyInfo,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource,Microsoft.Practices.EnterpriseLibrary.Validation.MemberAccessValidatorBuilderFactory)">
            <summary>
            Returns a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> for <paramref name="propertyInfo"/> as defined in the validation specification
            for <paramref name="type"/>.
            </summary>
            <param name="type">The type for which the validation specification must be retrieved.</param>
            <param name="propertyInfo">The property for which the validator must be returned.</param>
            <param name="ruleset">The ruleset to use when retrieving validation information, or an empty string to use
            the default ruleset.</param>
            <param name="validationSpecificationSource">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource"/> indicating
            where to retrieve validation specifications.</param>
            <param name="memberAccessValidatorBuilderFactory"></param>
            <returns>The appropriate validator, or null if there is no such validator specified.</returns>
            <exception cref="T:System.InvalidOperationException">when <paramref name="type"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">when <paramref name="propertyInfo"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">when <paramref name="propertyInfo"/> is not a readable property.</exception>
            <remarks>
            Both <paramref name="type"/> and <paramref name="propertyInfo"/> must be provided as <paramref name="type"/> might be different
            from the declaring type for <paramref name="propertyInfo"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PropertyValidationFactory.GetPropertyValidatorFromAttributes(System.Type,System.Reflection.PropertyInfo,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.MemberAccessValidatorBuilderFactory)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="propertyInfo"></param>
            <param name="ruleset"></param>
            <param name="memberAccessValidatorBuilderFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PropertyValidationFactory.GetPropertyValidatorFromConfiguration(System.Type,System.Reflection.PropertyInfo,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.MemberAccessValidatorBuilderFactory)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="propertyInfo"></param>
            <param name="ruleset"></param>
            <param name="memberAccessValidatorBuilderFactory"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.PropertyValidationFactory.GetPropertyValidatorFromValidationAttributes(System.Type,System.Reflection.PropertyInfo,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.MemberAccessValidatorBuilderFactory)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="propertyInfo"></param>
            <param name="ruleset"></param>
            <param name="memberAccessValidatorBuilderFactory"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ReflectionMemberValueAccessBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ReflectionMemberValueAccessBuilder.DoGetFieldValueAccess(System.Reflection.FieldInfo)">
            <summary>
            
            </summary>
            <param name="fieldInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ReflectionMemberValueAccessBuilder.DoGetMethodValueAccess(System.Reflection.MethodInfo)">
            <summary>
            
            </summary>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ReflectionMemberValueAccessBuilder.DoGetPropertyValueAccess(System.Reflection.PropertyInfo)">
            <summary>
            
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.TagFilter">
            <summary>
            Specifies the kind of filtering to perform for <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults.FindAll(Microsoft.Practices.EnterpriseLibrary.Validation.TagFilter,System.String[])"/>
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.TagFilter.Include">
            <summary>
            Include results with the supplied tags.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.TagFilter.Ignore">
            <summary>
            Ignore results with the supplied tags.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validation">
            <summary>
            Facade for validation services.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validation.Validate``1(``0)">
            <summary>
            Validates <paramref name="target"/> using validation criteria specified for type <typeparamref name="T"/>
            through configuration and attributes on type <typeparamref name="T"/> and its ancestors for the default ruleset.
            </summary>
            <typeparam name="T">The type of object to validate.</typeparam>
            <param name="target">The instance of <typeparamref name="T"/> to validate.</param>
            <returns>A collection of with the results of the individual validations.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validation.Validate``1(``0,System.String[])">
            <summary>
            Validates <paramref name="target"/> using validation criteria specified for type <typeparamref name="T"/>
            through configuration and attributes on type <typeparamref name="T"/> and its ancestors for the supplied ruleset.
            </summary>
            <typeparam name="T">The type of object to validate.</typeparam>
            <param name="target">The instance of <typeparamref name="T"/> to validate.</param>
            <param name="rulesets">The rulesets to use when validating.</param>
            <returns>A collection of with the results of the individual validations.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="rulesets"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validation.Validate``1(``0,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource)">
            <summary>
            Validates <paramref name="target"/> using validation criteria specified for type <typeparamref name="T"/>
            through configuration and attributes on type <typeparamref name="T"/> and its ancestors for the default ruleset.
            </summary>
            <typeparam name="T">The type of object to validate.</typeparam>
            <param name="target">The instance of <typeparamref name="T"/> to validate.</param>
            <param name="source">The source of validation information.</param>
            <returns>A collection of with the results of the individual validations.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validation.Validate``1(``0,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource,System.String[])">
            <summary>
            Validates <paramref name="target"/> using validation criteria specified for type <typeparamref name="T"/>
            through configuration and attributes on type <typeparamref name="T"/> and its ancestors for the supplied ruleset.
            </summary>
            <typeparam name="T">The type of object to validate.</typeparam>
            <param name="target">The instance of <typeparamref name="T"/> to validate.</param>
            <param name="source">The source of validation information.</param>
            <param name="rulesets">The rulesets to use when validating.</param>
            <returns>A collection of with the results of the individual validations.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="rulesets"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validation.ValidateFromAttributes``1(``0)">
            <summary>
            Validates <paramref name="target"/> using validation criteria specified for type <typeparamref name="T"/>
            through attributes on type <typeparamref name="T"/> and its ancestors for the default ruleset.
            </summary>
            <typeparam name="T">The type of object to validate.</typeparam>
            <param name="target">The instance of <typeparamref name="T"/> to validate.</param>
            <returns>A collection of with the results of the individual validations.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validation.ValidateFromAttributes``1(``0,System.String[])">
            <summary>
            Validates <paramref name="target"/> using validation criteria specified for type <typeparamref name="T"/>
            through attributes on type <typeparamref name="T"/> and its ancestors for the supplied ruleset.
            </summary>
            <typeparam name="T">The type of object to validate.</typeparam>
            <param name="target">The instance of <typeparamref name="T"/> to validate.</param>
            <param name="rulesets">The rulesets to use when validating.</param>
            <returns>A collection of with the results of the individual validations.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="rulesets"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validation.ValidateFromConfiguration``1(``0)">
            <summary>
            Validates <paramref name="target"/> using validation criteria specified for type <typeparamref name="T"/>
            through configuration for the default ruleset.
            </summary>
            <typeparam name="T">The type of object to validate.</typeparam>
            <param name="target">The instance of <typeparamref name="T"/> to validate.</param>
            <returns>A collection of with the results of the individual validations.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validation.ValidateFromConfiguration``1(``0,System.String[])">
            <summary>
            Validates <paramref name="target"/> using validation criteria specified for type <typeparamref name="T"/>
            through configuration for the supplied ruleset.
            </summary>
            <typeparam name="T">The type of object to validate.</typeparam>
            <param name="target">The instance of <typeparamref name="T"/> to validate.</param>
            <param name="rulesets">The rulesets to use when validating.</param>
            <returns>A collection of with the results of the individual validations.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="rulesets"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatedElement">
            <summary>
            Represents the description of how validation must be performed on a language element as defined by 
            <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> attached to it.
            </summary>
            <seealso cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatedElement.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatedElement"/> class for a property.
            </summary>
            <param name="propertyInfo">The property to represent.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatedElement.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatedElement"/> class for a field.
            </summary>
            <param name="fieldInfo">The field to represent.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatedElement.#ctor(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatedElement"/> class for a 
            <see cref="T:System.Reflection.MemberInfo"/> of a target <see cref="T:System.Type"/>.
            </summary>
            <param name="memberInfo">The member info to represent.</param>
            <param name="targetType">The target type for member info.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatedType">
            <summary>
            Represents the description of how validation must be performed on a type as defined by 
            <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> attached to the fields and properties in the type.
            </summary>
            <seealso cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatedElement"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatedType.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatedType"/> for a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to represent.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatorBuilder">
            <summary>
            Builder of validators from attributes inheriting from <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidationAttributeValidator"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatorBuilder.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.MemberAccessValidatorBuilderFactory,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatorBuilder"/> class.
            </summary>
            <param name="memberAccessValidatorFactory"></param>
            <param name="validatorFactory">Factory to use when building nested validators.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatorBuilder.CreateValidator(System.Type)">
            <summary>
            Creates a validator for the supplied type.
            </summary>
            <param name="type">The type for which the validator should be created.</param>
            <returns>A validator.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatorFactory">
            <summary>
             A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> factory producing validators from rules specified in a configuration file.
            </summary>
             <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatorFactory.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatorFactory"/> class.
             </summary>
            <param name="instrumentationProvider">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider"/> provider to use for instrumentation purposes.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationAttributeValidatorFactory.InnerCreateValidator(System.Type,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            Creates the validator for the specified target and ruleset.
            </summary>
            <param name="targetType">The <see cref="T:System.Type"/>to validate.</param>
            <param name="ruleset">The ruleset to use when validating.</param>
            <param name="mainValidatorFactory">Factory to use when building nested validators.</param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory">
            <summary>
            Factory for creating <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> objects for types.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validation"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.ResetCaches">
            <summary>
            Resets the cached validators.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidator``1">
            <summary>
            Returns a validator representing the validation criteria specified for type <typeparamref name="T"/>
            through configuration and attributes on type <typeparamref name="T"/> and its ancestors for the default ruleset.
            </summary>
            <typeparam name="T">The type to get the validator for.</typeparam>
            <returns>The validator.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidator``1(System.String)">
            <summary>
            Returns a validator representing the validation criteria specified for type <typeparamref name="T"/>
            through configuration and attributes on type <typeparamref name="T"/> and its ancestors for the supplied ruleset.
            </summary>
            <typeparam name="T">The type to get the validator for.</typeparam>
            <param name="ruleset">The name of the required ruleset.</param>
            <returns>The validator.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="ruleset"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidator``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Returns a validator representing the validation criteria specified for type <typeparamref name="T"/>
            through configuration and attributes on type <typeparamref name="T"/> and its ancestors for the default ruleset
            retrieving configuration information from the supplied <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
            <typeparam name="T">The type to get the validator for.</typeparam>
            <param name="configurationSource">The configuration source from where configuration information is to be retrieved.</param>
            <returns>The validator.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="configurationSource"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidator``1(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Returns a validator representing the validation criteria specified for type <typeparamref name="T"/>
            through configuration and attributes on type <typeparamref name="T"/> and its ancestors for the supplied ruleset
            retrieving configuration information from the supplied <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
            <typeparam name="T">The type to get the validator for.</typeparam>
            <param name="ruleset">The name of the required ruleset.</param>
            <param name="configurationSource">The configuration source from where configuration information is to be retrieved.</param>
            <returns>The validator.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="ruleset"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="configurationSource"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidator(System.Type)">
            <summary>
            Returns a validator representing the validation criteria specified for type <paramref name="targetType"/>
            through configuration and attributes on type <paramref name="targetType"/> and its ancestors for the default ruleset.
            </summary>
            <param name="targetType">The type to get the validator for.</param>
            <returns>The validator.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidator(System.Type,System.String)">
            <summary>
            Returns a validator representing the validation criteria specified for type <paramref name="targetType"/>
            through configuration and attributes on type <paramref name="targetType"/> and its ancestors for the supplied ruleset.
            </summary>
            <param name="targetType">The type to get the validator for.</param>
            <param name="ruleset">The name of the required ruleset.</param>
            <returns>The validator.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="ruleset"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidator(System.Type,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Returns a validator representing the validation criteria specified for type <paramref name="targetType"/>
            through configuration and attributes on type <paramref name="targetType"/> and its ancestors for the supplied ruleset
            retrieving configuration information from the supplied <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
            <param name="targetType">The type to get the validator for.</param>
            <param name="ruleset">The name of the required ruleset.</param>
            <param name="configurationSource">The configuration source from where configuration information is to be retrieved.</param>
            <returns>The validator.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="ruleset"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="configurationSource"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidator``1(Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource)">
            <summary>
            Returns a validator representing the validation criteria specified for type <typeparamref name="T"/>
            through configuration and attributes on type <typeparamref name="T"/> and its ancestors for the default ruleset.
            </summary>
            <typeparam name="T">The type to get the validator for.</typeparam>
            <param name="source">The source of validation information.</param>
            <returns>The validator.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidator``1(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource)">
            <summary>
            Returns a validator representing the validation criteria specified for type <typeparamref name="T"/>
            through configuration and attributes on type <typeparamref name="T"/> and its ancestors for the supplied ruleset.
            </summary>
            <typeparam name="T">The type to get the validator for.</typeparam>
            <param name="ruleset">The name of the required ruleset.</param>
            <param name="source">The source of validation information.</param>
            <returns>The validator.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="ruleset"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidator``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource)">
            <summary>
            Returns a validator representing the validation criteria specified for type <typeparamref name="T"/>
            through configuration and attributes on type <typeparamref name="T"/> and its ancestors for the default ruleset
            retrieving configuration information from the supplied <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
            <typeparam name="T">The type to get the validator for.</typeparam>
            <param name="configurationSource">The configuration source from where configuration information is to be retrieved.</param>
            <param name="source">The source of validation information.</param>
            <returns>The validator.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="configurationSource"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidator``1(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource)">
            <summary>
            Returns a validator representing the validation criteria specified for type <typeparamref name="T"/>
            through configuration and attributes on type <typeparamref name="T"/> and its ancestors for the supplied ruleset
            retrieving configuration information from the supplied <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
            <typeparam name="T">The type to get the validator for.</typeparam>
            <param name="ruleset">The name of the required ruleset.</param>
            <param name="configurationSource">The configuration source from where configuration information is to be retrieved.</param>
            <param name="source">The source of validation information.</param>
            <returns>The validator.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="ruleset"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="configurationSource"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidator(System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource)">
            <summary>
            Returns a validator representing the validation criteria specified for type <paramref name="targetType"/>
            through configuration and attributes on type <paramref name="targetType"/> and its ancestors for the default ruleset.
            </summary>
            <param name="targetType">The type to get the validator for.</param>
            <param name="source">The source of validation information.</param>
            <returns>The validator.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidator(System.Type,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource)">
            <summary>
            Returns a validator representing the validation criteria specified for type <paramref name="targetType"/>
            through configuration and attributes on type <paramref name="targetType"/> and its ancestors for the supplied ruleset.
            </summary>
            <param name="targetType">The type to get the validator for.</param>
            <param name="ruleset">The name of the required ruleset.</param>
            <param name="source">The source of validation information.</param>
            <returns>The validator.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="ruleset"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidator(System.Type,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource)">
            <summary>
            Returns a validator representing the validation criteria specified for type <paramref name="targetType"/>
            through configuration and attributes on type <paramref name="targetType"/> and its ancestors for the supplied ruleset
            retrieving configuration information from the supplied <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
            <param name="targetType">The type to get the validator for.</param>
            <param name="ruleset">The name of the required ruleset.</param>
            <param name="configurationSource">The configuration source from where configuration information is to be retrieved.</param>
            <param name="source">The source of validation information.</param>
            <returns>The validator.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="ruleset"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="configurationSource"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidatorFromAttributes``1">
            <summary>
            Returns a validator representing the validation criteria specified for type <typeparamref name="T"/>
            through attributes on type <typeparamref name="T"/> and its ancestors for the default ruleset.
            </summary>
            <typeparam name="T">The type to get the validator for.</typeparam>
            <returns>The validator.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidatorFromAttributes``1(System.String)">
            <summary>
            Returns a validator representing the validation criteria specified for type <typeparamref name="T"/>
            through attributes on type <typeparamref name="T"/> and its ancestors for the supplied ruleset.
            </summary>
            <typeparam name="T">The type to get the validator for.</typeparam>
            <param name="ruleset">The name of the required ruleset.</param>
            <returns>The validator.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="ruleset"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidatorFromAttributes(System.Type,System.String)">
            <summary>
            Returns a validator representing the validation criteria specified for type <paramref name="targetType"/>
            through attributes on type <paramref name="targetType"/> and its ancestors for the supplied ruleset.
            </summary>
            <param name="targetType">The type to get the validator for.</param>
            <param name="ruleset">The name of the required ruleset.</param>
            <returns>The validator.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="ruleset"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidatorFromConfiguration``1">
            <summary>
            Returns a validator representing the validation criteria specified for type <typeparamref name="T"/>
            through configuration for the default ruleset.
            </summary>
            <typeparam name="T">The type to get the validator for.</typeparam>
            <returns>The validator.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidatorFromConfiguration``1(Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Returns a validator representing the validation criteria specified for type <typeparamref name="T"/>
            through configuration for the default ruleset
            retrieving configuration information from the supplied <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
            <typeparam name="T">The type to get the validator for.</typeparam>
            <param name="configurationSource">The configuration source from where configuration information is to be retrieved.</param>
            <returns>The validator.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="configurationSource"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidatorFromConfiguration``1(System.String)">
            <summary>
            Returns a validator representing the validation criteria specified for type <typeparamref name="T"/>
            through configuration for the supplied ruleset.
            </summary>
            <typeparam name="T">The type to get the validator for.</typeparam>
            <param name="ruleset">The name of the required ruleset.</param>
            <returns>The validator.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="ruleset"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidatorFromConfiguration``1(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Returns a validator representing the validation criteria specified for type <typeparamref name="T"/>
            through configuration for the supplied ruleset
            retrieving configuration information from the supplied <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
            <typeparam name="T">The type to get the validator for.</typeparam>
            <param name="ruleset">The name of the required ruleset.</param>
            <param name="configurationSource">The configuration source from where configuration information is to be retrieved.</param>
            <returns>The validator.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="ruleset"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="configurationSource"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidatorFromConfiguration(System.Type,System.String)">
            <summary>
            Returns a validator representing the validation criteria specified for type <paramref name="targetType"/>
            through configuration for the supplied ruleset, retrieving configuration information from
            the default configuration source.
            </summary>
            <param name="targetType">The type to get the validator for.</param>
            <param name="ruleset">The name of the validation ruleset.</param>
            <returns>The validator.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidatorFromConfiguration(System.Type,System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)">
            <summary>
            Returns a validator representing the validation criteria specified for type <paramref name="targetType"/>
            through configuration for the supplied ruleset
            retrieving configuration information from the supplied <see cref="T:Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource"/>.
            </summary>
            <param name="targetType">The type to get the validator for.</param>
            <param name="ruleset">The name of the required ruleset.</param>
            <param name="configurationSource">The configuration source from where configuration information is to be retrieved.</param>
            <returns>The validator.</returns>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="ruleset"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when the <paramref name="configurationSource"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.DefaultCompositeValidatorFactory">
            <summary>
            Gets the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory"/> to use by default.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationReflectionHelper">
            <summary>
            Helper for reflection access.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationReflectionHelper.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Retrieves an array of the custom attributes applied to a member of a type, looking for the existence
            of a metadata type where the attributes are actually specified.
            Parameters specify the member, the type of the custom attribute to search
            for, and whether to search ancestors of the member.
            </summary>
            <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo"/> class that describes a 
            constructor, event, field, method, or property member of a class.</param>
            <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
            <param name="inherit">If <see langword="true"/>, specifies to also search the ancestors of element for 
            custom attributes.</param>
            <returns>An <see cref="T:System.Attribute"/> array that contains the custom attributes of type applied to 
            element, or an empty array if no such custom attributes exist.</returns>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.DataAnnotations.MetadataTypeAttribute"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult">
            <summary>
            Represents the result of an atomic validation.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult.#ctor(System.String,System.Object,System.String,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validator)">
            <summary>
            Initializes this object with a message.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult.#ctor(System.String,System.Object,System.String,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validator,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult})">
            <summary>
            Initializes this object with a message.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult.ToString">
            <summary>
            Returns the message of the validation error
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult.Key">
            <summary>
            Gets a name describing the location of the validation result.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult.Message">
            <summary>
            Gets a message describing the failure.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult.Tag">
            <summary>
            Gets a value characterizing the result.
            </summary>
            <remarks>
            The meaning for a tag is determined by the client code consuming the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults"/>.
            </remarks>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults.FindAll(Microsoft.Practices.EnterpriseLibrary.Validation.TagFilter,System.String[])"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult.Target">
            <summary>
            Gets the object to which the validation rule was applied.
            </summary>
            <remarks>
            This object might not be the object for which validation was requested initially.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult.Validator">
            <summary>
            Gets the validator that performed the failing validation.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult.NestedValidationResults">
            <summary>
            Gets the nested validation results for a composite failed validation.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults">
            <summary>
            Represents the result of validating an object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults.AddResult(Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult)">
            <summary>
            <para>Adds a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult"/>.</para>
            </summary>
            <param name="validationResult">The validation result to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults.AddAllResults(System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult})">
            <summary>
            <para>Adds all the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult"/> instances from <paramref name="sourceValidationResults"/>.</para>
            </summary>
            <param name="sourceValidationResults">The source for validation results to add.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults.FindAll(Microsoft.Practices.EnterpriseLibrary.Validation.TagFilter,System.String[])">
            <summary>
            Returns a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults"/> that includes the results from the receiver that
            match the provided tag names.
            </summary>
            <param name="tagFilter">The indication of whether to include or ignore the matching results.</param>
            <param name="tags">The list of tag names to match.</param>
            <returns>A <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults"/> containing the filtered results.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults.IsValid">
            <summary>
            Gets the indication of whether the validation represented by the receiver was successful.
            </summary>
            <remarks>
            An unsuccessful validation will be represented by a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult"/> instance with
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult"/> elements, regardless of these elements' tags.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults.Count">
            <summary>
            Gets the count of results.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource">
            <summary>
            Specifies the required source for validation information when invoking <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> creation methods.
            </summary>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory.CreateValidator``1(System.String,Microsoft.Practices.EnterpriseLibrary.Common.Configuration.IConfigurationSource)"/>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource.Attributes">
            <summary>
            Validation information is to be retrieved from attributes.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource.Configuration">
            <summary>
            Validation information is to be retrieved from configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource.Both">
            <summary>
            Validation information is to be retrieved from both attributes and configuration.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource.DataAnnotations">
            <summary>
            Validation information is to be retrieved from Data Annotations Validation Attributes.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationSpecificationSource.All">
            <summary>
            Validation information is to be retrieved from all possible sources.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator">
            <summary>
            Represents logic used to validate an object.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> class.
            </summary>
            <param name="messageTemplate">The template to use when logging validation results, or <see langword="null"/> we the
            default message template is to be used.</param>
            <param name="tag">The tag to set when logging validation results, or <see langword="null"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.Validate(System.Object)">
            <summary>
            Applies the validation logic represented by the receiver on an object, 
            returning the validation results.
            </summary>
            <param name="target">The object to validate.</param>
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults"/> representing the outcome of the validation.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.Validate(System.Object,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Applies the validation logic represented by the receiver on an object, 
            adding the validation results to <paramref name="validationResults"/>.
            </summary>
            <param name="target">The object to validate.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            Subclasses must provide a concrete implementation the validation logic.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.LogValidationResult(Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults,System.String,System.Object,System.String)">
            <summary>
            Logs a validation result to <paramref name="validationResults"/>.
            </summary>
            <param name="validationResults">The validation results to which the new result should be stored.</param>
            <param name="message">The message that describes the result.</param>
            <param name="target">The object to which the result is related to.</param>
            <param name="key">The key that identifies how the result relates to the target.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.LogValidationResult(Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults,System.String,System.Object,System.String,System.Collections.Generic.IEnumerable{Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult})">
            <summary>
            Logs a validation result to <paramref name="validationResults"/>.
            </summary>
            <param name="validationResults">The validation results to which the new result should be stored.</param>
            <param name="message">The message that describes the result.</param>
            <param name="target">The object to which the result is related to.</param>
            <param name="key">The key that identifies how the result relates to the target.</param>
            <param name="nestedValidationResults"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.GetMessage(System.Object,System.String)">
            <summary>
            Gets the message representing a failed validation.
            </summary>
            <param name="objectToValidate">The object for which validation was performed.</param>
            <param name="key">The key representing the value being validated for <paramref name="objectToValidate"/>.</param>
            <returns>The message representing the validation failure.</returns>
            <remarks>The default validation message formatting provides the object to validate, the key and the tag.<para/>
            Subclasses may provide additional formatting parameters.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.DefaultMessageTemplate">
            <summary>
            Gets the message template to use when logging results no message is supplied.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.MessageTemplate">
            <summary>
            Gets or sets the message template to use when logging results.
            </summary>
            <remarks>
            The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.DefaultMessageTemplate"/> will be returned if no message was specified.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.Tag">
            <summary>
            Gets a value characterizing the logged result.
            </summary>
            <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResult.Tag"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1">
            <summary>
            Represents logic used to validate an instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of objects the can be validated.</typeparam>
            <remarks>
            Generic validators will still answer the non-generic validation requests, logging a failure when the 
            validation target is not compatible with the <typeparamref name="T"/>.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1"/> class.
            </summary>
            <param name="messageTemplate">The template to use when logging validation results, or <see langword="null"/> we the
            default message template is to be used.</param>
            <param name="tag">The tag to set when logging validation results, or <see langword="null"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1.Validate(`0)">
            <summary>
            Applies the validation logic represented by the receiver on an instance of <typeparamref name="T"/>, 
            returning the validation results.
            </summary>
            <param name="target">The instance of <typeparamref name="T"/> to validate.</param>
            <returns>The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults"/> representing the outcome of the validation.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1.Validate(`0,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Applies the validation logic represented by the receiver on an instance of <typeparamref name="T"/>, 
            adding the validation results to <paramref name="validationResults"/>.
            </summary>
            <param name="target">The instance of <typeparamref name="T"/> to validate.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            The implementation for this method will perform type checking and conversation before forwarding the 
            validation request to method <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1.DoValidate(`0,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)"/>.
            </remarks>
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1.DoValidate(`0,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver.
            </summary>
            <param name="objectToValidate">The instance of <typeparamref name="T"/> to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            Subclasses must provide a concrete implementation the validation logic.
            </remarks>
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator">
            <summary>
            Aggregates a set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> instances, performing validation by allowing each validator to perform its own.
            </summary>
            <remarks>
            Validation fails if any of the composed validators fails.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.Validator[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator"/> class.</para>
            </summary>
            <param name="validators">The validators to be composed by the created instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver, invoking validation on the composed validators.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            All the composed validators' results will be logged.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator.DefaultMessageTemplate">
            <summary>
            Gets the message template to use when logging results no message is supplied.
            </summary>
            <remarks>
            This validator does not log messages of its own.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator.Validators">
            <summary>
            Gets the validators composed by this instance.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute">
            <summary>
            Base class for validation related attributes.
            </summary>
            <remarks>
            Holds shared information about validation.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.GetMessageTemplate">
            <summary>
            Returns the message template for the represented validator.
            </summary>
            <remarks>
            The textual message is given precedence over the resource based mechanism.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the specified validation object on which the 
            <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> is declared.</param>
            <param name="context"></param>
            <returns><see langword="true"/> if the specified value is valid; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.NotSupportedException">when invoked on an attribute with a non-null ruleset.</exception>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.Ruleset">
            <summary>
            Gets or set the ruleset to which the represented validator belongs.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplate">
            <summary>
            Gets or sets the message template to use when logging validation results.
            </summary>
            <remarks>
            Either the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplate"/> or the 
            pair <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceName"/> 
            and <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceType"/> can be used to 
            provide a message template for the represented validator.
            <para/>
            If both mechanisms are specified an exception occurs.
            </remarks>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceName"/> 
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceType"/>
            <exception cref="T:System.InvalidOperationException">when setting the value and either 
            <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceName"/> or
            <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceType"/> have been set already.</exception>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceName">
            <summary>
            Gets or sets the name of the resource to retrieve the message template to use when logging validation results.
            </summary>
            <remarks>
            Used in combination with <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceType"/>.
            <para/>
            Either the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplate"/> or the 
            pair <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceName"/> 
            and <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceType"/> can be used to 
            provide a message template for the represented validator.
            <para/>
            If both mechanisms are specified an exception occurs.
            </remarks>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplate"/> 
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceType"/>
            <exception cref="T:System.InvalidOperationException">when setting the value and the 
            <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplate"/> has been set already.</exception>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceType">
            <summary>
            Gets or sets the name of the type to retrieve the message template to use when logging validation results.
            </summary>
            <remarks>
            Used in combination with <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceName"/>.
            <para/>
            Either the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplate"/> or the 
            pair <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplate"/> 
            and <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceType"/> can be used to 
            provide a message template for the represented validator.
            <para/>
            If both mechanisms are specified an exception occurs.
            </remarks>
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplate"/> 
            <seealso cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplateResourceName"/>
            <exception cref="T:System.InvalidOperationException">when setting the value and the 
            <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.MessageTemplate"/> has been set already.</exception>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.BaseValidationAttribute.Tag">
            <summary>
            Gets or sets the tag that will characterize the results logged by the represented validator.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator">
            <summary>
            Represents the different comparison behaviors available for a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidator"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator.Equal">
            <summary>
            Comparison for equal.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator.NotEqual">
            <summary>
            Comparison for not equal.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator.GreaterThan">
            <summary>
            Comparison for greater.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator.GreaterThanEqual">
            <summary>
            Comparison for greater or equal.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator.LessThan">
            <summary>
            Comparison for lesser.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator.LessThanEqual">
            <summary>
            Comparison for lesser or equal.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.CompositionType">
            <summary>
            Specifies the kind of composition that is to be used when multiple validation attributes
            are supplied for a member info.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.CompositionType.And">
            <summary>
            Use the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.AndCompositeValidator"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.CompositionType.Or">
            <summary>
            Use the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharacters">
            <summary>
            Represents the behavior of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/>.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharacters.Any">
            <summary>
            Indicates that validation is considered successful when at least one character in the
            character set is included in the validated value.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharacters.All">
            <summary>
            Indicates that validation is considered successful when at all the characters in the
            character set are included in the validated value.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator">
            <summary>
            Performs validation on strings by verifying if it contains a character set using the <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.ContainsCharacters"/> mode.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator`1">
            <summary>
            Base class for strongly-typed validators on simple values.
            </summary>
            <typeparam name="T">The type of value to validate.</typeparam>
            <remarks>Validating values of types different that <typeparamref name="T"/> results
            in a validation failure.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator`1.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator`1"/> class.
            </summary>
            <param name="messageTemplate">The template to use when logging validation results, or <see langword="null"/> we the
            default message template is to be used.</param>
            <param name="tag">The tag to set when logging validation results, or <see langword="null"/>.</param>
            <param name="negated">Indicates if the validation logic represented by the validator should be negated.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator`1.Negated">
            <summary>
            Gets the indication of negated validation logic.
            </summary>
            <value><see langword="true"/> if the default validation logic should be used; otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator`1.DefaultMessageTemplate">
            <summary>
            Gets the default message template for de validator.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator`1.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator`1.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/>.</para>
            </summary>
            <param name="characterSet">The string containing the set of allowed characters.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharacters)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/>.</para>
            </summary>
            <param name="characterSet">The string containing the set of allowed characters.</param>
            <param name="containsCharacters">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.ContainsCharacters"/> specifying the kind of character matching behavior.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharacters,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/>.</para>
            </summary>
            <param name="characterSet">The string containing the set of allowed characters.</param>
            <param name="containsCharacters">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.ContainsCharacters"/> specifying the kind of character matching behavior.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharacters,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/>.</para>
            </summary>
            <param name="characterSet">The string containing the set of allowed characters.</param>
            <param name="containsCharacters">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.ContainsCharacters"/> specifying the kind of character matching behavior.</param>
            <param name="negated">Indicates if the validation logic represented by the validator should be negated.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharacters,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/>.</para>
            </summary>
            <param name="characterSet">The string containing the set of allowed characters.</param>
            <param name="containsCharacters">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.ContainsCharacters"/> specifying the kind of character matching behavior.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="negated">Indicates if the validation logic represented by the validator should be negated.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.DoValidate(System.String,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.GetMessage(System.Object,System.String)">
            <summary>
            Gets the message representing a failed validation.
            </summary>
            <param name="objectToValidate">The object for which validation was performed.</param>
            <param name="key">The key representing the value being validated for <paramref name="objectToValidate"/>.</param>
            <returns>The message representing the validation failure.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.CharacterSet">
            <summary>
            The character set to validate against.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator.ContainsCharacters">
            <summary>
            How does this validator check?
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidatorAttribute">
            <summary>
            Represents a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidatorAttribute">
            <summary>
            Describes a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator"/>.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorAttribute">
            <summary>
            Describes the validation logic that must be applied to a language element when
            creating a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> for a type.
            </summary>
            <remarks>
            Multiple validator attributes can be specified for a language element. 
            <para/>
            All the rules will be applied as an "And" composition unless the
            <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorCompositionAttribute"/> overrides this behavior.
            <para/>
            A ruleset can be specified for the attribute, as well as message overrides 
            (either literal or resource based).
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validation"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorCompositionAttribute"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.IgnoreNullsAttribute"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorAttribute.CreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <param name="ownerType">The type of the object from which the value to validate is extracted.</param>
            <param name="memberValueAccessBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder"/> to use for validators that
            require access to properties.</param>
            <param name="validatorFactory">Factory to use when building nested validators.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.</returns>
            <remarks>
            Sets the tag and message template to the created validator.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorAttribute.DoCreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <param name="ownerType">The type of the object from which the value to validate is extracted.</param>
            <param name="memberValueAccessBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder"/> to use for validators that
            require access to properties.</param>
            <param name="validatorFactory">Factory to use when building nested validators.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.</returns>
            <remarks>
            The default implementation invokes <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorAttribute.DoCreateValidator(System.Type)"/>. Subclasses requiring access to all
            the parameters or this method may override it instead of <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorAttribute.DoCreateValidator(System.Type)"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> described by the attribute object providing validator specific
            information.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This operation must be overridden by subclasses.</remarks>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidatorAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Determines whether the specified value is valid.
            </summary>
            <param name="value">The value to validated.</param>
            <param name="context">The validation context.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidatorAttribute.FormatErrorMessage(System.String)">
            <summary>
            Applies formatting to an error message based on the data field where the error occurred. 
            </summary>
            <param name="name">The name of the data field where the error occurred.</param>
            <returns>An instance of the formatted error message.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidatorAttribute.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidatorAttribute"/> class.</para>
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidatorAttribute.Negated">
            <summary>
            Gets or sets the flag indicating if the validator to create should be negated.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidatorAttribute.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidatorAttribute"/> </para>
            </summary>
            <param name="characterSet">The character set to be evaluated.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidatorAttribute.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharacters)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidatorAttribute"/> </para>
            </summary>
            <param name="characterSet">The character set to be evaluated.</param>
            <param name="containsCharacters">The mode to evaluate the character set.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/> described by the attribute object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This operation must be overridden by subclasses.</remarks>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidator"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidatorAttribute.CharacterSet">
            <summary>
            The character set to be evaluated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ContainsCharactersValidatorAttribute.ContainsCharacters">
            <summary>
            The mode to evaluate the character set.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.GenericValidatorWrapper`1">
            <summary>
            Used to provide a generic API over the unknown validators.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.GenericValidatorWrapper`1.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.Validator,Microsoft.Practices.EnterpriseLibrary.Validation.Instrumentation.IValidationInstrumentationProvider)">
            <summary>
            
            </summary>
            <param name="wrappedValidator"></param>
            <param name="instrumentationProvider"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.GenericValidatorWrapper`1.DoValidate(`0,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            
            </summary>
            <param name="objectToValidate"></param>
            <param name="currentTarget"></param>
            <param name="key"></param>
            <param name="validationResults"></param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.GenericValidatorWrapper`1.DefaultMessageTemplate">
            <summary>
            Gets the message template to use when logging results no message is supplied.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.GenericValidatorWrapper`1.WrappedValidator">
            <summary>
             Returns the validator wrapped by <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.GenericValidatorWrapper`1"/>
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.HasSelfValidationAttribute">
            <summary>
            Indicates the target type defines self validation methods.
            </summary>
            <remarks>
            Types without this attribute will not be scanned for self validation methods.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationAttribute"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationValidator"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidatorAttribute">
            <summary>
            Describes a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator"/> described by the attribute object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator"/>.</returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator">
            <summary>
            Performs validation on collection objects by applying the validation rules specified for a supplied type
            to its members.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator"/>.</para>
            </summary>
            <remarks>
            The default ruleset will be used for validation.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator"/> 
            using the supplied ruleset.</para>
            </summary>
            <param name="validatorFactory">Factory to use when building nested validators.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator"/> 
            using the supplied ruleset.</para>
            </summary>
            <param name="validatorFactory">Factory to use when building nested validators.</param>
            <param name="targetRuleset">The ruleset to use.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetRuleset"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="validatorFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator.#ctor(System.Type)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator"/> for a target type.</para>
            </summary>
            <param name="targetType">The target type</param>
            <remarks>
            The default ruleset for <paramref name="targetType"/> will be used.
            </remarks>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetType"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator.#ctor(System.Type,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator"/> for a target type
            using the supplied ruleset.</para>
            </summary>
            <param name="targetType">The target type</param>
            <param name="targetRuleset">The ruleset to use.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetRuleset"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator.#ctor(System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator"/> for a target type
            using the supplied ruleset.</para>
            </summary>
            <param name="targetType">The target type</param>
            <param name="validatorFactory">Factory to use when building nested validators.</param>
            <param name="targetRuleset">The ruleset to use.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetRuleset"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="validatorFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates by applying the validation rules for the target type specified for the receiver to the elements
            in <paramref name="objectToValidate"/>.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            If <paramref name="objectToValidate"/> is <see langword="null"/> validation is ignored.
            <para/>
            A reference to a non collection object causes a validation failure and the validation rules
            for the configured target type will not be applied.
            <para/>
            Elements in the collection of a type not compatible with the configured target type causes a validation failure but
            do not affect validation on other elements.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator.DefaultMessageTemplate">
            <summary>
            Gets the message template to use when logging results no message is supplied.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator.TargetType">
            <summary>
            Type of target being validated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator.TargetRuleset">
            <summary>
            Ruleset to use when creating target validators.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidatorAttribute">
            <summary>
            Represents an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidatorAttribute.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidatorAttribute.#ctor(System.Type)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute"/> class with a target type.</para>
            </summary>
            <param name="targetType">The target type.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetType"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidatorAttribute.#ctor(System.Type,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute"/> class with a target type
            and a specific ruleset.</para>
            </summary>
            <param name="targetType">The target type.</param>
            <param name="targetRuleset">.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetRuleset"/> is <see langword="null"/>.</exception>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator.#ctor(System.Type,System.String)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> described by the attribute object providing validator specific
            information.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This method must not be called on this class. Call 
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute.DoCreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)"/>.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidatorAttribute.DoCreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <param name="ownerType">The type of the object from which the value to validate is extracted.</param>
            <param name="memberValueAccessBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder"/> to use for validators that
            require access to properties.</param>
            <param name="validatorFactory">Factory to use when building nested validators.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidatorAttribute.TargetRuleset">
            <summary>
            Gets the target ruleset for the validated objects.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectCollectionValidatorAttribute.TargetType">
            <summary>
            The target type
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator">
            <summary>
            Performs validation on objects by applying the validation rules specified for a supplied type.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationFactory"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/> for a target type
            using the supplied ruleset.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/> for a target type
            using the supplied ruleset.</para>
            </summary>
            <param name="validatorFactory">Factory to use when building nested validators.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="validatorFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/> for a target type
            using the supplied ruleset.</para>
            </summary>
            <param name="targetRuleset">The ruleset to use.</param>
            <param name="validatorFactory">Factory to use when building nested validators.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="validatorFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetRuleset"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator.#ctor(System.Type)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/> for a target type.</para>
            </summary>
            <param name="targetType">The target type</param>
            <remarks>
            The default ruleset for <paramref name="targetType"/> will be used.
            </remarks>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetType"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator.#ctor(System.Type,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/> for a target type
            using the supplied ruleset.</para>
            </summary>
            <param name="targetType">The target type</param>
            <param name="targetRuleset">The ruleset to use.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetRuleset"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator.#ctor(System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/> for a target type
            using the supplied ruleset.</para>
            </summary>
            <param name="targetType">The target type</param>
            <param name="targetRuleset">The ruleset to use.</param>
            <param name="validatorFactory">Factory to use when building nested validators.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetType"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetRuleset"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="validatorFactory"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates by applying the validation rules for the target type specified for the receiver.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            If <paramref name="objectToValidate"/> is <see langword="null"/> validation is ignored.
            <para/>
            A reference to an instance of a type not compatible with the configured target type
            causes a validation failure.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator.DefaultMessageTemplate">
            <summary>
            Gets the message template to use when logging results no message is supplied.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator.TargetType">
            <summary>
            Target type being validated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator.TargetRuleset">
            <summary>
            Rule set to use when creating target validators.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute">
            <summary>
            Represents an <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute"/> class.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute"/> class with
            a specific ruleset.</para>
            </summary>
            <param name="targetRuleset">The target ruleset.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="targetRuleset"/> is <see langword="null"/>.</exception>
            <seealso cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator.#ctor(System.Type,System.String)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> described by the attribute object providing validator specific
            information.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This method must not be called on this class. Call 
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute.DoCreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)"/>.</remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute.DoCreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <param name="ownerType">The type of the object from which the value to validate is extracted.</param>
            <param name="memberValueAccessBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder"/> to use for validators that
            require access to properties.</param>
            <param name="validatorFactory">Factory to use when building nested validators.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute.ValidateActualType">
            <summary>
            Gets or sets the value indicating whether to validate based on the static type or the actual type.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ObjectValidatorAttribute.TargetRuleset">
            <summary>
            The target ruleset.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidatorAttribute">
            <summary>
            Represents a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidatorAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Determines whether the specified value is valid.
            </summary>
            <param name="value">The value.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidatorAttribute.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidatorAttribute"/> class.
            </summary>
            <param name="propertyToCompare">The name of the property to use when comparing a value.</param>
            <param name="comparisonOperator">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidatorAttribute.ComparisonOperator"/> representing the kind of comparison to perform.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidatorAttribute.DoCreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> described by the attribute.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <param name="ownerType">The type of the object from which the value to validate is extracted.</param>
            <param name="memberValueAccessBuilder">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder"/> to use for validators that
            require access to properties.</param>
            <param name="validatorFactory">Factory to use when building nested validators.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> described by the attribute object providing validator specific
            information.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This method must not be called on this class. Call 
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidatorAttribute.DoCreateValidator(System.Type,System.Type,Microsoft.Practices.EnterpriseLibrary.Validation.MemberValueAccessBuilder,Microsoft.Practices.EnterpriseLibrary.Validation.ValidatorFactory)"/>.</remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidatorAttribute.PropertyToCompare">
            <summary>
            The name of the property to use when comparing a value.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidatorAttribute.ComparisonOperator">
            <summary>
            The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidatorAttribute.ComparisonOperator"/> representing the kind of comparison to perform.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute">
            <summary>
            Represents a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute"/> class with fully specified
            int bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.#ctor(System.Double,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Double,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute"/> class with fully specified
            double bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.#ctor(System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute"/> class with fully specified
            DateTime bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.#ctor(System.Int64,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int64,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute"/> class with fully specified
            long bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute"/> class with fully specified
            string bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.#ctor(System.Single,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Single,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute"/> class with fully specified
            float bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.#ctor(System.Type,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute"/> class with fully specified
            bound constraints using string representations of the boundaries.</para>
            </summary>
            <param name="boundType">The type of the boundaries.</param>
            <param name="lowerBound">The lower bound represented with a string, or <see langword="null"/>.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound, or <see langword="null"/>.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator"/> described by the attribute object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This operation must be overridden by subclasses.</remarks>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.LowerBound">
            <summary>
            The lower bound
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.EffectiveLowerBound">
            <summary>
            The lower bound
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.LowerBoundType">
            <summary>
            The indication of how to perform the lower bound check.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.UpperBound">
            <summary>
            The upper bound, or <see langword="null"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.EffectiveUpperBound">
            <summary>
            The upper bound
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.UpperBoundType">
            <summary>
            The indication of how to perform the upper bound check.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidatorAttribute.BoundType">
            <summary>
            The type of the validated range.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator">
            <summary>
            Performs validation on strings by matching them to a <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Type)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern.</para>
            </summary>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Type,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern.</para>
            </summary>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern and 
            matching options.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Type,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern.</para>
            </summary>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern and 
            matching options.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Type,System.Text.RegularExpressions.RegexOptions,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern and 
            matching options.</para>
            </summary>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern
            and a failure message template.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="messageTemplate">The message template.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Type,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern
            and a failure message template.</para>
            </summary>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
            <param name="messageTemplate">The message template.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern
            and a failure message template.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Type,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern
            and a failure message template.</para>
            </summary>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern, 
            matching options and a failure message template.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
            <param name="messageTemplate">The message template.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Type,System.Text.RegularExpressions.RegexOptions,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern, 
            matching options and a failure message template.</para>
            </summary>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
            <param name="messageTemplate">The message template.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern, 
            matching options and a failure message template.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.Type,System.Text.RegularExpressions.RegexOptions,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern, 
            matching options and a failure message template.</para>
            </summary>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.#ctor(System.String,System.String,System.Type,System.Text.RegularExpressions.RegexOptions,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> class with a regex pattern, 
            matching options and a failure message template.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
            <param name="messageTemplate">The message template.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.DoValidate(System.String,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates by comparing <paramref name="objectToValidate"/> by matching it to the pattern
            specified for the validator.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            <see langword="null"/> is considered a failed validation.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.GetMessage(System.Object,System.String)">
            <summary>
            Gets the message representing a failed validation.
            </summary>
            <param name="objectToValidate">The object for which validation was performed.</param>
            <param name="key">The key representing the value being validated for <paramref name="objectToValidate"/>.</param>
            <returns>The message representing the validation failure.</returns>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.GetPattern">
            <summary>
            Gets the pattern used for building the regular expression.
            </summary>
            <returns>The regular expression pattern.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.Pattern">
            <summary>
            Regular expression pattern used.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.Options">
            <summary>
            Any regex options specified.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.PatternResourceName">
            <summary>
            Resource name used to load regex pattern.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator.PatternResourceType">
            <summary>
            Resource type used to look up regex pattern.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute">
            <summary>
            Represents a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute"/> class with a regex pattern.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute.#ctor(System.String,System.Type)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute"/> class with a regex pattern.</para>
            </summary>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute"/> class with a regex pattern and 
            matching options.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute.#ctor(System.String,System.Type,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute"/> class with a regex pattern.</para>
            </summary>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute.#ctor(System.String,System.String,System.Type,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute"/> class with a regex pattern, 
            matching options and a failure message template.</para>
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="patternResourceName">The resource name containing the pattern for the regular expression.</param>
            <param name="patternResourceType">The type containing the resource for the regular expression.</param>
            <param name="options">The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/> described by the attribute object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This operation must be overridden by subclasses.</remarks>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidator"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute.Pattern">
            <summary>
            >The pattern to match.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute.Options">
            <summary>
            The <see cref="T:System.Text.RegularExpressions.RegexOptions"/> to use when matching.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute.PatternResourceName">
            <summary>
            The resource name containing the pattern for the regular expression.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RegexValidatorAttribute.PatternResourceType">
            <summary>
            The type containing the resource for the regular expression.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationAttribute">
            <summary>
            Marks a method as implementing self validation logic.
            </summary>
            <remarks>
            The following conditions must be met for a method to be considered for self validation:
            <list type="number">
            <item><term>The type for which the validation is being created must have the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.HasSelfValidationAttribute"/>.</term></item>
            <item><term>The method must have the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationAttribute"/> with configured for the requested ruleset.</term></item>
            <item><term>The method must be void and take a single parameter of type <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults"/>.</term>term&gt;</item>
            </list>
            <para/>
            Non-public methods can be used for self validation, although inherited non-public methods will not be used.
            <para/>
            There is no configuration based way to specify self validation.
            </remarks>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationValidator"/>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.HasSelfValidationAttribute"/>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationAttribute.Ruleset">
            <summary>
            Gets or set the ruleset for which the self validation method must be included.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationValidator">
            <summary>
            Performs validation by invoking a method on the validated object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationValidator.#ctor(System.Reflection.MethodInfo)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationValidator"/> class with the 
            method that is to be invoked when performing validation.</para>
            </summary>
            <param name="methodInfo">The self validation method to invoke.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="methodInfo"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">when <paramref name="methodInfo"/> does not have the required signature.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationValidator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates by invoking the self validation method configured for the validator.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            A validation failure will be logged by the validator when the following conditions are met without
            invoking the self validation method:
            <list type="bullet">
            <item><term><paramref name="objectToValidate"/> is <see langword="null"/>.</term></item>
            <item><term><paramref name="objectToValidate"/> is an instance of a type not compatible with the declaring type for the 
            self validation method.</term></item>
            </list>
            <para/>
            A validation failure will also be logged if the validation method throws an exception.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.SelfValidationValidator.DefaultMessageTemplate">
            <summary>
            Gets the message template to use when logging results no message is supplied.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator">
            <summary>
            Validates a string by checking it represents a value for a given type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator.#ctor(System.Type)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator"/>.</para>
            </summary>
            <param name="targetType">The supplied type used to determine if the string can be converted to it.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator.#ctor(System.Type,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator"/>.</para>
            </summary>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <param name="targetType">The supplied type used to determine if the string can be converted to it.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator.#ctor(System.Type,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator"/>.</para>
            </summary>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="targetType">The supplied type used to determine if the string can be converted to it.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator.#ctor(System.Type,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator"/>.</para>
            </summary>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="targetType">The supplied type used to determine if the string can be converted to it.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator.DoValidate(System.String,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator.GetMessage(System.Object,System.String)">
            <summary>
            Gets the message representing a failed validation.
            </summary>
            <param name="objectToValidate">The object for which validation was performed.</param>
            <param name="key">The key representing the value being validated for <paramref name="objectToValidate"/>.</param>
            <returns>The message representing the validation failure.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator.TargetType">
            <summary>
            Target type for conversion.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidatorAttribute">
            <summary>
            Represents a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidatorAttribute.#ctor(System.Type)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidatorAttribute"/>.</para>
            </summary>
            <param name="targetType">The supplied type used to determine if the string can be converted to it.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator"/> described by the attribute object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This operation must be overridden by subclasses.</remarks>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidator"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.TypeConversionValidatorAttribute.TargetType">
            <summary>
            The target type. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidationAttributeValidator">
            <summary>
            Validator wrapping a collection of <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidationAttributeValidator.#ctor(System.ComponentModel.DataAnnotations.ValidationAttribute[])">
            <summary>
            
            </summary>
            <param name="validationAttributes"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidationAttributeValidator.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationAttribute})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidationAttributeValidator"/> with a 
            <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>.
            </summary>
            <param name="validationAttributes">The validation attributes to wrap.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidationAttributeValidator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates by forwarding the validation request to the wrapped <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/>.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidationAttributeValidator.DefaultMessageTemplate">
            <summary>
            Gets the message template to use when logging results no message is supplied.
            </summary>
            <remarks>
            Not used by this validator.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator">
            <summary>
            Performs validation on <see cref="T:System.DateTime"/> instances by comparing them to the specified boundaries. 
            </summary>
            <remarks>
            <see langword="null"/> is logged as a failure.
            </remarks>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1">
            <summary>
            Performs validation on <typeparamref name="T"/>
            instances by comparing them to the specified boundaries. 
            </summary>
            <remarks>
            <see langword="null"/> is logged as a failure.
            </remarks>
            <typeparam name="T">The type of the objects to compare. Must implement <see cref="T:System.IComparable`1"/>.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.#ctor(`0)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1"/> class with an upper bound constraint.</para>
            </summary>
            <param name="upperBound">The upper bound.</param>
            <remarks>
            No lower bound constraints will be checked by this instance, and the upper bound check will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.#ctor(`0,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1"/> class with an upper bound constraint.</para>
            </summary>
            <param name="upperBound">The upper bound.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <remarks>
            No lower bound constraints will be checked by this instance, and the upper bound check will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.#ctor(`0,`0)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1"/> class with lower and 
            upper bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <remarks>
            Both bound checks will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.#ctor(`0,`0,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1"/> class with lower and 
            upper bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <remarks>
            Both bound checks will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.#ctor(`0,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,`0,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1"/> class with fully specified
            bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.#ctor(`0,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,`0,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1"/> class with fully specified
            bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.#ctor(`0,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,`0,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1"/> class with fully specified
            bound constraints and a message template.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.#ctor(`0,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,`0,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1"/> class with fully specified
            bound constraints and a message template.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.DoValidate(`0,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates by comparing <paramref name="objectToValidate"/> with the constraints
            specified for the validator.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            <see langword="null"/> is considered a failed validation.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.GetMessage(System.Object,System.String)">
            <summary>
            Gets the message representing a failed validation.
            </summary>
            <param name="objectToValidate">The object for which validation was performed.</param>
            <param name="key">The key representing the value being validated for <paramref name="objectToValidate"/>.</param>
            <returns>The message representing the validation failure.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.RangeChecker">
            <summary>
            Internal helper object used to do the actual range check.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.LowerBound">
            <summary>
            Lower bound of range.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.UpperBound">
            <summary>
            Upper bound of range.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.LowerBoundType">
            <summary>
            Is lower bound included, excluded, or ignored.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1.UpperBoundType">
            <summary>
            Is upper bound included, excluded, or ignored.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator.#ctor(System.DateTime)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/> class with an upper bound constraint.</para>
            </summary>
            <param name="upperBound">The upper bound.</param>
            <remarks>
            No lower bound constraints will be checked by this instance, and the upper bound check will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator.#ctor(System.DateTime,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/> class with an upper bound constraint.</para>
            </summary>
            <param name="upperBound">The upper bound.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <remarks>
            No lower bound constraints will be checked by this instance, and the upper bound check will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator.#ctor(System.DateTime,System.DateTime)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/> class with lower and 
            upper bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <remarks>
            Both bound checks will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator.#ctor(System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/> class with lower and 
            upper bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <remarks>
            Both bound checks will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator.#ctor(System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/> class with fully specified
            bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator.#ctor(System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/> class with fully specified
            bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator.#ctor(System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/> class with fully specified
            bound constraints and a message template.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator.#ctor(System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/> class with fully specified
            bound constraints and a message template.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidatorAttribute">
            <summary>
            Attribute to specify date range validation on a property, method or field.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidatorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance with an upper bound.
            </summary>
            <param name="upperBound">An ISO8601 formatted string representing the upper bound, like "2006-01-20T00:00:00".</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidatorAttribute.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance with an upper bound.
            </summary>
            <param name="upperBound">The upper bound.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidatorAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance with lower and upper bounds.
            </summary>
            <param name="lowerBound">An ISO8601 formatted string representing the lower bound, like "2006-01-20T00:00:00".</param>
            <param name="upperBound">An ISO8601 formatted string representing the upper bound, like "2006-01-20T00:00:00".</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidatorAttribute.#ctor(System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance with lower and upper bounds.
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidatorAttribute.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            Initializes a new instance with lower and upper bounds, and bound types.
            </summary>
            <param name="lowerBound">An ISO8601 formatted string representing the lower bound, like "2006-01-20T00:00:00".</param>
            <param name="lowerBoundType">The bound type for the lower bound.</param>
            <param name="upperBound">An ISO8601 formatted string representing the upper bound, like "2006-01-20T00:00:00".</param>
            <param name="upperBoundType">The bound type for the upper bound.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidatorAttribute.#ctor(System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.DateTime,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            Initializes a new instance with lower and upper bounds, and bound types.
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The bound type for the lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The bound type for the upper bound.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidatorAttribute.LowerBound">
            <summary>
            The lower bound.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidatorAttribute.LowerBoundType">
            <summary>
            The bound type for the lower bound.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidatorAttribute.UpperBound">
            <summary>
            The upper bound.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeRangeValidatorAttribute.UpperBoundType">
            <summary>
            The bound type for the upper bound.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit">
            <summary>
            Date time unit.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit.None">
            <summary>
            No units.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit.Second">
            <summary>
            Seconds.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit.Minute">
            <summary>
            Minutes.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit.Hour">
            <summary>
            Hours.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit.Day">
            <summary>
            Days.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit.Month">
            <summary>
            Months.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit.Year">
            <summary>
            Years.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1">
            <summary>
            Validates an object by checking if it belongs to a set.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1"/>.</para>
            </summary>
            <param name="domain">List of values to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1.#ctor(System.Boolean,`0[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1"/>.</para>
            </summary>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <param name="domain">List of values to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1.#ctor(System.String,`0[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1"/>.</para>
            </summary>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="domain">List of values to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1"/>.</para>
            </summary>
            <param name="domain">List of values to be used in the validation.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1"/>.</para>
            </summary>
            <param name="domain">List of values to be used in the validation.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1.DoValidate(`0,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidator`1.Domain">
            <summary>
            The set of items we're checking for membership in.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute">
            <summary>
            Represents a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.#ctor(System.Object[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.</para>
            </summary>
            <param name="domain">List of values to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.#ctor(System.Object)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.</para>
            </summary>
            <param name="domain1">Value to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.#ctor(System.Object,System.Object)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.</para>
            </summary>
            <param name="domain1">Value to be used in the validation.</param>
            <param name="domain2">Value to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.#ctor(System.Object,System.Object,System.Object)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.</para>
            </summary>
            <param name="domain1">Value to be used in the validation.</param>
            <param name="domain2">Value to be used in the validation.</param>
            <param name="domain3">Value to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.#ctor(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.</para>
            </summary>
            <param name="domain1">Value to be used in the validation.</param>
            <param name="domain2">Value to be used in the validation.</param>
            <param name="domain3">Value to be used in the validation.</param>
            <param name="domain4">Value to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.</para>
            </summary>
            <param name="domain1">Value to be used in the validation.</param>
            <param name="domain2">Value to be used in the validation.</param>
            <param name="domain3">Value to be used in the validation.</param>
            <param name="domain4">Value to be used in the validation.</param>
            <param name="domain5">Value to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.</para>
            </summary>
            <param name="domain1">Value to be used in the validation.</param>
            <param name="domain2">Value to be used in the validation.</param>
            <param name="domain3">Value to be used in the validation.</param>
            <param name="domain4">Value to be used in the validation.</param>
            <param name="domain5">Value to be used in the validation.</param>
            <param name="domain6">Value to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.</para>
            </summary>
            <param name="domain1">Value to be used in the validation.</param>
            <param name="domain2">Value to be used in the validation.</param>
            <param name="domain3">Value to be used in the validation.</param>
            <param name="domain4">Value to be used in the validation.</param>
            <param name="domain5">Value to be used in the validation.</param>
            <param name="domain6">Value to be used in the validation.</param>
            <param name="domain7">Value to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.</para>
            </summary>
            <param name="domain1">Value to be used in the validation.</param>
            <param name="domain2">Value to be used in the validation.</param>
            <param name="domain3">Value to be used in the validation.</param>
            <param name="domain4">Value to be used in the validation.</param>
            <param name="domain5">Value to be used in the validation.</param>
            <param name="domain6">Value to be used in the validation.</param>
            <param name="domain7">Value to be used in the validation.</param>
            <param name="domain8">Value to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.</para>
            </summary>
            <param name="domain1">Value to be used in the validation.</param>
            <param name="domain2">Value to be used in the validation.</param>
            <param name="domain3">Value to be used in the validation.</param>
            <param name="domain4">Value to be used in the validation.</param>
            <param name="domain5">Value to be used in the validation.</param>
            <param name="domain6">Value to be used in the validation.</param>
            <param name="domain7">Value to be used in the validation.</param>
            <param name="domain8">Value to be used in the validation.</param>
            <param name="domain9">Value to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.</para>
            </summary>
            <param name="domain1">Value to be used in the validation.</param>
            <param name="domain2">Value to be used in the validation.</param>
            <param name="domain3">Value to be used in the validation.</param>
            <param name="domain4">Value to be used in the validation.</param>
            <param name="domain5">Value to be used in the validation.</param>
            <param name="domain6">Value to be used in the validation.</param>
            <param name="domain7">Value to be used in the validation.</param>
            <param name="domain8">Value to be used in the validation.</param>
            <param name="domain9">Value to be used in the validation.</param>
            <param name="domain10">Value to be used in the validation.</param>
            <param name="domain11">Value to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.</para>
            </summary>
            <param name="domain1">Value to be used in the validation.</param>
            <param name="domain2">Value to be used in the validation.</param>
            <param name="domain3">Value to be used in the validation.</param>
            <param name="domain4">Value to be used in the validation.</param>
            <param name="domain5">Value to be used in the validation.</param>
            <param name="domain6">Value to be used in the validation.</param>
            <param name="domain7">Value to be used in the validation.</param>
            <param name="domain8">Value to be used in the validation.</param>
            <param name="domain9">Value to be used in the validation.</param>
            <param name="domain10">Value to be used in the validation.</param>
            <param name="domain11">Value to be used in the validation.</param>
            <param name="domain12">Value to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.</para>
            </summary>
            <param name="domain1">Value to be used in the validation.</param>
            <param name="domain2">Value to be used in the validation.</param>
            <param name="domain3">Value to be used in the validation.</param>
            <param name="domain4">Value to be used in the validation.</param>
            <param name="domain5">Value to be used in the validation.</param>
            <param name="domain6">Value to be used in the validation.</param>
            <param name="domain7">Value to be used in the validation.</param>
            <param name="domain8">Value to be used in the validation.</param>
            <param name="domain9">Value to be used in the validation.</param>
            <param name="domain10">Value to be used in the validation.</param>
            <param name="domain11">Value to be used in the validation.</param>
            <param name="domain12">Value to be used in the validation.</param>
            <param name="domain13">Value to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.</para>
            </summary>
            <param name="domain1">Value to be used in the validation.</param>
            <param name="domain2">Value to be used in the validation.</param>
            <param name="domain3">Value to be used in the validation.</param>
            <param name="domain4">Value to be used in the validation.</param>
            <param name="domain5">Value to be used in the validation.</param>
            <param name="domain6">Value to be used in the validation.</param>
            <param name="domain7">Value to be used in the validation.</param>
            <param name="domain8">Value to be used in the validation.</param>
            <param name="domain9">Value to be used in the validation.</param>
            <param name="domain10">Value to be used in the validation.</param>
            <param name="domain11">Value to be used in the validation.</param>
            <param name="domain12">Value to be used in the validation.</param>
            <param name="domain13">Value to be used in the validation.</param>
            <param name="domain14">Value to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.</para>
            </summary>
            <param name="domain1">Value to be used in the validation.</param>
            <param name="domain2">Value to be used in the validation.</param>
            <param name="domain3">Value to be used in the validation.</param>
            <param name="domain4">Value to be used in the validation.</param>
            <param name="domain5">Value to be used in the validation.</param>
            <param name="domain6">Value to be used in the validation.</param>
            <param name="domain7">Value to be used in the validation.</param>
            <param name="domain8">Value to be used in the validation.</param>
            <param name="domain9">Value to be used in the validation.</param>
            <param name="domain10">Value to be used in the validation.</param>
            <param name="domain11">Value to be used in the validation.</param>
            <param name="domain12">Value to be used in the validation.</param>
            <param name="domain13">Value to be used in the validation.</param>
            <param name="domain14">Value to be used in the validation.</param>
            <param name="domain15">Value to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.#ctor(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.</para>
            </summary>
            <param name="domain1">Value to be used in the validation.</param>
            <param name="domain2">Value to be used in the validation.</param>
            <param name="domain3">Value to be used in the validation.</param>
            <param name="domain4">Value to be used in the validation.</param>
            <param name="domain5">Value to be used in the validation.</param>
            <param name="domain6">Value to be used in the validation.</param>
            <param name="domain7">Value to be used in the validation.</param>
            <param name="domain8">Value to be used in the validation.</param>
            <param name="domain9">Value to be used in the validation.</param>
            <param name="domain10">Value to be used in the validation.</param>
            <param name="domain11">Value to be used in the validation.</param>
            <param name="domain12">Value to be used in the validation.</param>
            <param name="domain13">Value to be used in the validation.</param>
            <param name="domain14">Value to be used in the validation.</param>
            <param name="domain15">Value to be used in the validation.</param>
            <param name="domain16">Value to be used in the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.GetDomain(System.Int32)">
            <summary>
            Return the domain object corresponding to the specified index.
            </summary>
            <param name="index">The index of the domain object (1 based).</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/> described by the attribute object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This operation must be overridden by subclasses.</remarks>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.Domain1">
            <summary>
            1st value to be used in the validation
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.Domain2">
            <summary>
            2nd value to be used in the validation
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.Domain3">
            <summary>
            3rd value to be used in the validation
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.Domain4">
            <summary>
            4th value to be used in the validation
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.Domain5">
            <summary>
            5th value to be used in the validation
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.Domain6">
            <summary>
            6th value to be used in the validation
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.Domain7">
            <summary>
            7th value to be used in the validation
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.Domain8">
            <summary>
            8th value to be used in the validation
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.Domain9">
            <summary>
            9th value to be used in the validation
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.Domain10">
            <summary>
            10th value to be used in the validation
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.Domain11">
            <summary>
            11th value to be used in the validation
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.Domain12">
            <summary>
            12th value to be used in the validation
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.Domain13">
            <summary>
            13th value to be used in the validation
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.Domain14">
            <summary>
            14th value to be used in the validation
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.Domain15">
            <summary>
            15th value to be used in the validation
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.Domain16">
            <summary>
            16th value to be used in the validation
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DomainValidatorAttribute.Domain">
            <summary>
            List of values to be used in the validation.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator">
            <summary>
            Validates a string by checking it represents a value for a given enum type.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator.#ctor(System.Type)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator"/>.</para>
            </summary>
            <param name="enumType">The enum type to check if the string can be converted.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator.#ctor(System.Type,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator"/>.</para>
            </summary>
            <param name="enumType">The enum type to check if the string can be converted.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator.#ctor(System.Type,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator"/>.</para>
            </summary>
            <param name="enumType">The enum type to check if the string can be converted.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator.#ctor(System.Type,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator"/>.</para>
            </summary>
            <param name="enumType">The enum type to check if the string can be converted.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator.DoValidate(System.String,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator.GetMessage(System.Object,System.String)">
            <summary>
            Gets the message representing a failed validation.
            </summary>
            <param name="objectToValidate">The object for which validation was performed.</param>
            <param name="key">The key representing the value being validated for <paramref name="objectToValidate"/>.</param>
            <returns>The message representing the validation failure.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator.EnumType">
            <summary>
            Enum type to convert to.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidatorAttribute">
            <summary>
            Represents a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidatorAttribute.#ctor(System.Type)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidatorAttribute"/> </para>
            </summary>
            <param name="enumType">The type of enum that should be validated</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator"/> described by the attribute object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This operation must be overridden by subclasses.</remarks>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidator"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.EnumConversionValidatorAttribute.EnumType">
            <summary>
            The type of enum that should be validated. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.FieldValueAccess">
            <summary>
            Represents the logic to access values from a field.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess">
            <summary>
            Represents the logic of how to access values from a source object.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess.GetValue(System.Object,System.Object@,System.String@)">
            <summary>
            Retrieves a value from <paramref name="source"/>.
            </summary>
            <param name="source">The source for the value.</param>
            <param name="value">The value retrieved from the <paramref name="source"/>.</param>
            <param name="valueAccessFailureMessage">A message describing the failure to access the value, if any.</param>
            <returns><see langword="true"/> when the retrieval was successful; <see langword="false"/> otherwise.</returns>
            <remarks>Subclasses provide concrete value accessing behaviors.</remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess.Key">
            <summary>
            Gets a hint of the location of the value relative to the object where it was retrieved from.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.FieldValueAccess.#ctor(System.Reflection.FieldInfo)">
            <summary>
            
            </summary>
            <param name="fieldInfo"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.FieldValueAccess.GetValue(System.Object,System.Object@,System.String@)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <param name="valueAccessFailureMessage"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.FieldValueAccess.Key">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.FieldValueAccess.FieldInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.FieldValueValidator`1">
            <summary>
            Validates the value of a field using a configured validator.
            </summary>
            <typeparam name="T">The type for which validation on a member is to be performed.</typeparam>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MemberAccessValidator`1">
            <summary>
            Base generic validator for member access validation.
            </summary>
            <typeparam name="T">The type for which validation on a member is to be performed.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MemberAccessValidator`1.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess,Microsoft.Practices.EnterpriseLibrary.Validation.Validator)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MemberAccessValidator`1"/> class.</para>
            </summary>
            <param name="valueAccess">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> to use when accessing the
            value of the validated member.</param>
            <param name="valueValidator">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MemberAccessValidator`1.Validator"/> to validate the value of the
            validated member.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MemberAccessValidator`1.DoValidate(`0,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates extracting a value from <paramref name="objectToValidate"/> and applying a validator
            to it.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MemberAccessValidator`1.DefaultMessageTemplate">
            <summary>
            Gets the message template to use when logging results no message is supplied.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MemberAccessValidator`1.Validator">
            <summary>
            The actual validator that gets run against this field.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MemberAccessValidator`1.Key">
            <summary>
            Key used to access the value.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.FieldValueValidator`1.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validator)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.FieldValueValidator`1"/> class.</para>
            </summary>
            <param name="fieldName">The name of the field to validate.</param>
            <param name="fieldValueValidator">The validator for the value of the field.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.IgnoreNullsAttribute">
            <summary>
            Indicates that a <see langword="null"/> value is to be allowed by the validator represented by the validation
            attributes for the language element this attribute is bound.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorAttribute"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MethodReturnValueValidator`1">
            <summary>
            Validates the return value of a method without parameters using a configured validator.
            </summary>
            <typeparam name="T">The type for which validation on a method is to be performed.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MethodReturnValueValidator`1.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validator)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MethodReturnValueValidator`1"/> class.</para>
            </summary>
            <param name="methodName">The name of the method to validate.</param>
            <param name="methodValueValidator">The validator for the value of the method.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MethodValueAccess">
            <summary>
            Represents the logic to access values from a method.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MethodValueAccess.#ctor(System.Reflection.MethodInfo)">
            <summary>
            
            </summary>
            <param name="methodInfo"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MethodValueAccess.GetValue(System.Object,System.Object@,System.String@)">
            <summary>
            Retrieves a value from <paramref name="source"/>.
            </summary>
            <param name="source">The source for the value.</param>
            <param name="value">The value retrieved from the <paramref name="source"/>.</param>
            <param name="valueAccessFailureMessage">A message describing the failure to access the value, if any.</param>
            <returns><see langword="true"/> when the retrieval was successful; <see langword="false"/> otherwise.</returns>
            <remarks>Subclasses provide concrete value accessing behaviors.</remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MethodValueAccess.Key">
            <summary>
            Key used to retrieve data. In this case, it's just the method name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.MethodValueAccess.MethodInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator">
            <summary>
            Logs a failure when validating a <see langword="null"/> reference.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator">
            <summary>
            Base class for validators on simple values.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator"/> class.
            </summary>
            <param name="messageTemplate">The template to use when logging validation results, or <see langword="null"/> we the
            default message template is to be used.</param>
            <param name="tag">The tag to set when logging validation results, or <see langword="null"/>.</param>
            <param name="negated">Indicates if the validation logic represented by the validator should be negated.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator.Negated">
            <summary>
            Gets the indication of negated validation logic.
            </summary>
            <value><see langword="true"/> if the default validation logic should be used; otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator.DefaultMessageTemplate">
            <summary>
            Gets the default message template for de validator.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueValidator.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator.#ctor">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator"/>.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator.#ctor(System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator"/>.</para>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator.#ctor(System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator"/>.</para>
            </summary>
            <param name="messageTemplate">The message template to log failures.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator.#ctor(System.Boolean,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator"/> with a message template.</para>
            </summary>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <param name="messageTemplate">The message template to log failures.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates by checking if <paramref name="objectToValidate"/> is <see langword="null"/>.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NotNullValidator.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NullIgnoringValidatorWrapper">
            <summary>
            Validator that succeeds on null values and delegates validation of non-null values to another validator.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NullIgnoringValidatorWrapper.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.Validator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NullIgnoringValidatorWrapper"/> with a validator to wrap.
            </summary>
            <param name="wrappedValidator">The validator to wrap.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NullIgnoringValidatorWrapper.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NullIgnoringValidatorWrapper.DefaultMessageTemplate">
            <summary>
            Gets the message template to use when logging results no message is supplied.
            </summary>
            <remarks>
            Not used for this validator.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.NullIgnoringValidatorWrapper.WrappedValidator">
            <summary>
            Test-only property. Gets the wrapped validator.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator">
            <summary>
            Aggregates a set of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> instances, performing validation by allowing each validator to perform its own.
            </summary>
            <remarks>
            Validation results are logged only if all composed validators log results.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.Validator[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator"/> class.</para>
            </summary>
            <param name="validators">The validators to be composed by the created instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validator[])">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator"/> class.</para>
            </summary>
            <param name="messageTemplate"></param>
            <param name="validators">The validators to be composed by the created instance.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver, invoking validation on the composed validators.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            The results the generated by the composed validators are logged to <paramref name="validationResults"/>
            only if all the validators generate results.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator.DefaultMessageTemplate">
            <summary>
            Gets the message template to use when logging results no message is supplied.
            </summary>
            <remarks>
            This validator does not log messages of its own.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.OrCompositeValidator.Validators">
            <summary>
            Child validators that are being OR'red together.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidator">
            <summary>
            Performs validation by comparing the a value with the value of a property on the target
            object by using a specified comparison operation.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator">
            <summary>
            Performs validation by comparing the provided value with another value extracted from the validation target.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator"/> class.
            </summary>
            <param name="valueAccess">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ValueAccess"/> to use when extracting the comparison operand.</param>
            <param name="comparisonOperator">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ComparisonOperator"/> that specifies the kind of 
            comparison to perform.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator"/> class.
            </summary>
            <param name="valueAccess">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ValueAccess"/> to use when extracting the comparison operand.</param>
            <param name="comparisonOperator">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ComparisonOperator"/> that specifies the kind of 
            comparison to perform.</param>
            <param name="messageTemplate">The message template to use when logging validation failures.</param>
            <param name="tag">The tag that describes the purpose of the validator.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator"/> class.
            </summary>
            <param name="valueAccess">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ValueAccess"/> to use when extracting the comparison operand.</param>
            <param name="comparisonOperator">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ComparisonOperator"/> that specifies the kind of 
            comparison to perform.</param>
            <param name="messageTemplate">The message template to use when logging validation failures.</param>
            <param name="negated">Indicates if the validation logic represented by the validator should be negated.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator"/> class.
            </summary>
            <param name="valueAccess">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ValueAccess"/> to use when extracting the comparison operand.</param>
            <param name="comparisonOperator">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ComparisonOperator"/> that specifies the kind of 
            comparison to perform.</param>
            <param name="messageTemplate">The message template to use when logging validation failures.</param>
            <param name="tag">The tag that describes the purpose of the validator.</param>
            <param name="negated">Indicates if the validation logic represented by the validator should be negated.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates by comparing <paramref name="objectToValidate"/> with the result of extracting a value from
            <paramref name="currentTarget"/> using the configured <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ValueAccess"/> using
            the configured <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ComparisonOperator"/>.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ValueAccess">
            <summary>
            Object used to access target value.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessComparisonValidator.ComparisonOperator">
            <summary>
            How are the values compared?
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidator"/> class.
            </summary>
            <param name="valueAccess">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> to use to extract the value to compare.</param>
            <param name="comparisonOperator">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator"/> representing the kind of comparison to perform.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyComparisonValidator"/> class.
            </summary>
            <param name="valueAccess">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> to use to extract the value to compare.</param>
            <param name="comparisonOperator">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ComparisonOperator"/> representing the kind of comparison to perform.</param>
            <param name="negated">Indicates if the validation logic represented by the validator should be negated.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyValueAccess">
            <summary>
            Represents the logic to access values from a property.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyValueAccess.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            
            </summary>
            <param name="propertyInfo"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyValueAccess.GetValue(System.Object,System.Object@,System.String@)">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="value"></param>
            <param name="valueAccessFailureMessage"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyValueAccess.Key">
            <summary>
            Key used to retrieve item - the property name.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyValueAccess.PropertyInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyValueValidator`1">
            <summary>
            Validates the value of a property using a configured validator.
            </summary>
            <typeparam name="T">The type for which validation on a property is to be performed.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyValueValidator`1.#ctor(System.String,Microsoft.Practices.EnterpriseLibrary.Validation.Validator)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.PropertyValueValidator`1"/> class.</para>
            </summary>
            <param name="propertyName">The name of the property to validate.</param>
            <param name="propertyValueValidator">The validator for the value of the property.</param>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType">
            <summary>
            Indicates how to interpret a range boundary.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Ignore">
            <summary>
            Ignore the range boundary.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive">
            <summary>
            Allow values equal to the boundary.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Exclusive">
            <summary>
            Reject values equal to the boundary.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeChecker`1">
            <summary>
            Internal implementation for range checking validators.
            </summary>
            <typeparam name="T">The type of value being checked for ranges.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeChecker`1.#ctor(`0,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,`0,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            
            </summary>
            <param name="lowerBound"></param>
            <param name="lowerBoundType"></param>
            <param name="upperBound"></param>
            <param name="upperBoundType"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeChecker`1.IsInRange(`0)">
            <summary>
            
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeChecker`1.LowerBound">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeChecker`1.UpperBound">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeChecker`1.LowerBoundType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeChecker`1.UpperBoundType">
            <summary>
            
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator">
            <summary>
            Performs validation on <see cref="T:System.IComparable"/>
            instances by comparing them to the specified boundaries. 
            </summary>
            <remarks>
            <see langword="null"/> is logged as a failure.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator.#ctor(System.IComparable)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator`1"/> class with an upper bound constraint.</para>
            </summary>
            <param name="upperBound">The upper bound.</param>
            <remarks>
            No lower bound constraints will be checked by this instance, and the upper bound check will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator.#ctor(System.IComparable,System.IComparable)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator"/> class with lower and 
            upper bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <remarks>
            Both bound checks will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator.#ctor(System.IComparable,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.IComparable,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator"/> class with fully specified
            bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator.#ctor(System.IComparable,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.IComparable,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator"/> class with fully specified
            bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator.#ctor(System.IComparable,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.IComparable,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator"/> class with fully specified
            bound constraints and a message template.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator.#ctor(System.IComparable,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.IComparable,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeValidator"/> class with fully specified
            bound constraints and a message template.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeGenerator">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeGenerator.GenerateBoundDateTime(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,System.DateTime)">
            <summary>
            
            </summary>
            <param name="bound"></param>
            <param name="unit"></param>
            <param name="referenceDateTime"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator">
            <summary>
            Validates a <see cref="T:System.DateTime"/> value by checking it belongs to a range relative to the current date.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerUnit">The lower bound unit of time.</param>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerUnit">The lower bound unit of time.</param>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerUnit">The lower bound unit of time.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerUnit">The lower bound unit of time.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerUnit">The lower bound unit of time.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</para>
            </summary>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerUnit">The lower bound unit of time.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            The implementation for this method will perform type checking and conversation before forwarding the 
            validation request to method <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator`1.DoValidate(`0,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)"/>.
            </remarks>
            <see cref="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.DoValidate(System.DateTime,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Implements the validation logic for the receiver.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.GetMessage(System.Object,System.String)">
            <summary>
            Gets the message representing a failed validation.
            </summary>
            <param name="objectToValidate">The object for which validation was performed.</param>
            <param name="key">The key representing the value being validated for <paramref name="objectToValidate"/>.</param>
            <returns>The message representing the validation failure.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.LowerBound">
            <summary>
            Lower bound for range comparison.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.LowerUnit">
            <summary>
            Time units for lower bound.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.LowerBoundType">
            <summary>
            Is lower bound included, excluded, or ignored?
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.UpperBound">
            <summary>
            Upper bound for range comparison.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.UpperUnit">
            <summary>
            Time units for upper bound.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator.UpperBoundType">
            <summary>
            Is upper bound included, excluded, or ignored?
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute">
            <summary>
            Represents a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute"/>.</para>
            </summary>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute"/>.</para>
            </summary>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute"/>.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerUnit">The lower bound unit of time.</param>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.DateTimeUnit,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute"/>.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerUnit">The lower bound unit of time.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound</param>
            <param name="upperUnit">The upper bound unit of time.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/> described by the attribute object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <remarks>This operation must be overridden by subclasses.</remarks>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidator"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute.LowerBound">
            <summary>
            The lower bound
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute.LowerUnit">
            <summary>
            The lower bound unit of time.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute.LowerBoundType">
            <summary>
            The indication of how to perform the lower bound check.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute.UpperBound">
            <summary>
            The upper bound
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute.UpperUnit">
            <summary>
            The upper bound unit of time.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RelativeDateTimeValidatorAttribute.UpperBoundType">
            <summary>
            The indication of how to perform the upper bound check.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator">
            <summary>
            Performs validation on strings by comparing their lengths to the specified boundaries. 
            </summary>
            <remarks>
            <see langword="null"/> is logged as a failure.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.#ctor(System.Int32)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/> class with an upper bound constraint.</para>
            </summary>
            <param name="upperBound">The upper bound.</param>
            <remarks>
            No lower bound constraints will be checked by this instance, and the upper bound check will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.#ctor(System.Int32,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/> class with an upper bound constraint.</para>
            </summary>
            <param name="upperBound">The upper bound.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <remarks>
            No lower bound constraints will be checked by this instance, and the upper bound check will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/> class with lower and 
            upper bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <remarks>
            Both bound checks will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/> class with lower and 
            upper bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <remarks>
            Both bound checks will be <see cref="F:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType.Inclusive"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/> class with fully specified
            bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/> class with fully specified
            bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/> class with fully specified
            bound constraints and a message template.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.String,System.Boolean)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/> class with fully specified
            bound constraints and a message template.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <param name="messageTemplate">The message template to use when logging results.</param>
            <param name="negated">True if the validator must negate the result of the validation.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.DoValidate(System.String,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates by comparing the length for <paramref name="objectToValidate"/> with the constraints
            specified for the validator.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            <see langword="null"/> is considered a failed validation.
            </remarks>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.GetMessage(System.Object,System.String)">
            <summary>
            Gets the message representing a failed validation.
            </summary>
            <param name="objectToValidate">The object for which validation was performed.</param>
            <param name="key">The key representing the value being validated for <paramref name="objectToValidate"/>.</param>
            <returns>The message representing the validation failure.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.DefaultNonNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is non negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.DefaultNegatedMessageTemplate">
            <summary>
            Gets the Default Message Template when the validator is negated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.LowerBound">
            <summary>
            Lower bound for string length.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.UpperBound">
            <summary>
            Upper bound for string length.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.LowerBoundType">
            <summary>
            Is lower bound included, excluded, or ignored?
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator.UpperBoundType">
            <summary>
            Is upper bound included, excluded, or ignored?
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidatorAttribute">
            <summary>
            Describes a <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidatorAttribute.#ctor(System.Int32)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidatorAttribute"/> class with an upper bound constraint.</para>
            </summary>
            <param name="upperBound">The upper bound.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidatorAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidatorAttribute"/> class with lower and 
            upper bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="upperBound">The upper bound.</param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidatorAttribute.#ctor(System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType,System.Int32,Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidatorAttribute"/> class with fully specified
            bound constraints.</para>
            </summary>
            <param name="lowerBound">The lower bound.</param>
            <param name="lowerBoundType">The indication of how to perform the lower bound check.</param>
            <param name="upperBound">The upper bound.</param>
            <param name="upperBoundType">The indication of how to perform the upper bound check.</param>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.RangeBoundaryType"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidatorAttribute.DoCreateValidator(System.Type)">
            <summary>
            Creates the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidator"/> described by the configuration object.
            </summary>
            <param name="targetType">The type of object that will be validated by the validator.</param>
            <returns>The created <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.</returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidatorAttribute.LowerBound">
            <summary>
            The lower bound.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidatorAttribute.LowerBoundType">
            <summary>
            The indication of how to perform the lower bound check.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidatorAttribute.UpperBound">
            <summary>
            The upper bound.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.StringLengthValidatorAttribute.UpperBoundType">
            <summary>
            The indication of how to perform the upper bound check.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorCompositionAttribute">
            <summary>
            Indicates that the kind of composition to use when multiple <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorAttribute"/> instances
            are bound to a language element.
            </summary>
            <seealso cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorAttribute"/>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorCompositionAttribute.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.CompositionType)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorCompositionAttribute"/> class.
            </summary>
            <param name="compositionType">The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorCompositionAttribute.CompositionType"/> to be used.</param>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorCompositionAttribute.CompositionType">
            <summary>
            The <see cref="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValidatorCompositionAttribute.CompositionType"/> to be used.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessValidator">
            <summary>
            Performs validation on objects by validating a value extracted from them through an 
            instance of <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> with a specified <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessValidator.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess,Microsoft.Practices.EnterpriseLibrary.Validation.Validator)">
            <summary>
            <para>Initializes a new instance of the <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessValidator"/> class with an upper bound constraint.</para>
            </summary>
            <param name="valueAccess">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess"/> to use when extracting values from the 
            validated objects.</param>
            <param name="valueValidator">The <see cref="T:Microsoft.Practices.EnterpriseLibrary.Validation.Validator"/> to use when validating the values extracted
            from the validated objects.</param>
            <exception cref="T:System.ArgumentNullException">when <paramref name="valueAccess"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">when <paramref name="valueValidator"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessValidator.DoValidate(System.Object,System.Object,System.String,Microsoft.Practices.EnterpriseLibrary.Validation.ValidationResults)">
            <summary>
            Validates extracting a value from <paramref name="objectToValidate"/> and applying a validator
            to it.
            </summary>
            <param name="objectToValidate">The object to validate.</param>
            <param name="currentTarget">The object on the behalf of which the validation is performed.</param>
            <param name="key">The key that identifies the source of <paramref name="objectToValidate"/>.</param>
            <param name="validationResults">The validation results to which the outcome of the validation should be stored.</param>
            <remarks>
            <see langword="null"/> is considered a failed validation.
            </remarks>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessValidator.DefaultMessageTemplate">
            <summary>
            Gets the message template to use when logging results no message is supplied.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.Validators.ValueAccessValidator.Key">
            <summary>
            Key used to access the member being validated.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccessValidatorBuilder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccessValidatorBuilder.#ctor(Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccess,Microsoft.Practices.EnterpriseLibrary.Validation.IValidatedElement)">
            <summary>
            
            </summary>
            <param name="valueAccess"></param>
            <param name="validatedElement"></param>
        </member>
        <member name="M:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccessValidatorBuilder.DoGetValidator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.EnterpriseLibrary.Validation.ValueAccessValidatorBuilder.ValueAccess">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
