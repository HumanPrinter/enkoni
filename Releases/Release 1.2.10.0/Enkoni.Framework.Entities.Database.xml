<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Enkoni.Framework.Entities.Database</name>
    </assembly>
    <members>
        <member name="T:Enkoni.Framework.Entities.Extensions">
            <summary>This class contains some all-purpose extension-methods.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.Extensions.CreateCopyOrClone``1(``0)">
            <summary>Returns a copy or clone of the instance.</summary>
            <typeparam name="TEntity">The actual type of the instance that will be copied.</typeparam>
            <param name="instance">The instance that will be copied or cloned.</param>
            <returns>A copy of the instance.</returns>
        </member>
        <member name="T:Enkoni.Framework.Entities.DatabaseSourceInfo">
            <summary>This class can be used by the <see cref="T:Enkoni.Framework.Entities.DatabaseRepository`1"/> to retrieve valuable information about the database that is to
            be used. This class is added for improved usability of the DataSourceInfo in combination with the DatabaseRepository.</summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.DatabaseSourceInfo.DbContextKey">
            <summary>Defines the key that is used to store and retrieve the <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.DbContext"/>.</summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.DatabaseSourceInfo.SaveGraphKey">
            <summary>Defines the key that is used to store and retrieve the <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.SaveGraph"/>.</summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.DatabaseSourceInfo.DefaultSaveGraph">
            <summary>The default value for the <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.SaveGraph"/> that will be used when no custom value has been specified.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseSourceInfo.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.DatabaseSourceInfo"/> class using a default value of <see langword="null"/> for the
            <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.DbContext"/>.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseSourceInfo.#ctor(System.Data.Entity.DbContext)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.DatabaseSourceInfo"/> class using the specified <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.DbContext"/> instance.
            </summary>
            <param name="dbContext">The database context that must be use to communicate with the database.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseSourceInfo.#ctor(System.Data.Entity.DbContext,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.DatabaseSourceInfo"/> class using the specified <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.DbContext"/> instance.
            </summary>
            <param name="dbContext">The database context that must be use to communicate with the database.</param>
            <param name="cloneDataSourceItems">Indicates whether or not any entity that originate from the data source should be cloned or not.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseSourceInfo.#ctor(System.Data.Entity.DbContext,System.Boolean,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.DatabaseSourceInfo"/> class using the specified <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.DbContext"/> instance.
            </summary>
            <param name="dbContext">The database context that must be use to communicate with the database.</param>
            <param name="cloneDataSourceItems">Indicates whether or not any entity that originate from the data source should be cloned or not.</param>
            <param name="saveGraph">Indicates whether or not the entire graph should be saved when saving an entity.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseSourceInfo.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.DatabaseSourceInfo"/> class using the specified default values. If the default values
            do not specify the <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.DbContext"/> using the correct key and/or type, the value <see langword="null"/> will be used.</summary>
            <param name="defaultValues">The default values that are to be used.</param>
        </member>
        <member name="P:Enkoni.Framework.Entities.DatabaseSourceInfo.DbContext">
            <summary>Gets or sets the <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.DbContext"/> that is to be used by the DatabaseRepository.</summary>
        </member>
        <member name="P:Enkoni.Framework.Entities.DatabaseSourceInfo.SaveGraph">
            <summary>Gets or sets a value indicating whether the entire graph should be saved when saving an entity.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseSourceInfo.IsDbContextSpecified(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Determines if the <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.DbContext"/> is specified in the source information.</summary>
            <param name="dataSourceInfo">The data source information that is queried.</param>
            <returns><see langword="true"/> if the <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.DbContext"/> is defined; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseSourceInfo.SelectDbContext(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Selects the <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.DbContext"/> from the specified data source information.</summary>
            <param name="dataSourceInfo">The data source information that is queried.</param>
            <returns>The <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.DbContext"/> that is stored in the data source information or <see langword="null"/> if the <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.DbContext"/> could not be found.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseSourceInfo.IsSaveGraphSpecified(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Determines if the <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.SaveGraph"/> is specified in the source information.</summary>
            <param name="dataSourceInfo">The data source information that is queried.</param>
            <returns><see langword="true"/> if the <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.SaveGraph"/> is defined; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseSourceInfo.SelectSaveGraph(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Selects the <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.SaveGraph"/> from the specified data source information.</summary>
            <param name="dataSourceInfo">The data source information that is queried.</param>
            <returns>The <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.SaveGraph"/> that is stored in the data source information or <see langword="null"/> if the <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.SaveGraph"/> could not be found.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseSourceInfo.IsDbContextSpecified">
            <summary>Determines if the <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.DbContext"/> is specified in the source information.</summary>
            <returns><see langword="true"/> if the <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.DbContext"/> is defined; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseSourceInfo.IsSaveGraphSpecified">
            <summary>Determines if the <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.SaveGraph"/> is specified in the source information.</summary>
            <returns><see langword="true"/> if the <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.SaveGraph"/> is defined; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Enkoni.Framework.Entities.DatabaseRepository`1">
            <summary>This abstract class extends the abstract <see cref="T:Enkoni.Framework.Entities.Repository`1"/> class and implements some of the functionality using the Entity
            Framework.</summary>
            <typeparam name="TEntity">The type of the entity that is handled by this repository.</typeparam>
        </member>
        <member name="F:Enkoni.Framework.Entities.DatabaseRepository`1.additionCache">
            <summary>The collection of entities that are to be added to the data source. </summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.DatabaseRepository`1.updateCache">
            <summary>The collection of entities that are to be updated in the data source.</summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.DatabaseRepository`1.deletionCache">
            <summary>The collection of entities that are to be removed from the data source.</summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.DatabaseRepository`1.graphMembers">
            <summary>The types that are part of the graph of the entity type that is handled by this repository.</summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.DatabaseRepository`1.storageLock">
            <summary>A lock that is used to synchronize access to the internal storage.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.#ctor(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.DatabaseRepository`1"/> class using the specified <see cref="T:Enkoni.Framework.Entities.DataSourceInfo"/>.
            </summary>
            <param name="dataSourceInfo">The data source information that must be used to access the database.</param>
        </member>
        <member name="P:Enkoni.Framework.Entities.DatabaseRepository`1.DbContext">
            <summary>Gets the <see cref="P:Enkoni.Framework.Entities.DatabaseRepository`1.DbContext"/> that is used to access the database.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.ReloadObjectContext(System.Data.Entity.DbContext)">
            <summary>Replaces the current <see cref="P:Enkoni.Framework.Entities.DatabaseRepository`1.DbContext"/> with the specified one. The current <see cref="P:Enkoni.Framework.Entities.DatabaseRepository`1.DbContext"/> is first disposed.</summary>
            <param name="dbContext">The new <see cref="P:Enkoni.Framework.Entities.DatabaseRepository`1.DbContext"/> that must be used.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.ResetCore(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Resets the repository by undoing any unsaved changes.</summary>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.SaveChangesCore(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Submits all the changes to the database.</summary>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.CreateEntityCore(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Creates a new entity of type <typeparamref name="TEntity"/>. This is done by calling the default constructor of
            <typeparamref name="TEntity"/>.</summary>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage.</param>
            <returns>The created entity.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.AddEntityCore(`0,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Inserts a new entity to the repository.</summary>
            <param name="entity">The entity that must be added.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entity"/> is <see langword="null"/>.</exception>
            <returns>The entity with the most recent values.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.AddEntitiesCore(System.Collections.Generic.IEnumerable{`0},Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Adds a collection of new entities to the repository. They are added to the addition cache until it is saved using the
            <see cref="M:Enkoni.Framework.Entities.Repository`1.SaveChanges"/> method. A temporary (negative) RecordID is assigned to the entities. This will be reset when the
            entity is saved.</summary>
            <param name="entities">The entities that must be added.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage. This parameter is not used.
            </param>
            <returns>The entities as they were added to the repository.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.UpdateEntityCore(`0,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Updates the repository with the changes made to <paramref name="entity"/>. Since the entity framework already monitors the state of
            entities, no additional functionality is required. This method is therefore empty.</summary>
            <param name="entity">The entity that was updated.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage.</param>
            <returns>The entity with the most recent values.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.UpdateEntitiesCore(System.Collections.Generic.IEnumerable{`0},Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Updates a collection of entities in the repository. Depending on the status of each entity, it is updated in the addition-cache or
            it is added to the update-cache.</summary>
            <param name="entities">The entities that contain the updated values.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage. This parameter is not used.
            </param>
            <returns>The entities as they are stored in the repository.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.DeleteEntityCore(`0,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Deletes an entity from the repository.</summary>
            <param name="entity">The entity that must be deleted.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entity"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.DeleteEntitiesCore(System.Collections.Generic.IEnumerable{`0},Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Removes a collection of entities from the repository. Depending on the status of each entity, it is removed from the addition-cache
            or it is added to the deletion-cache until it is saved using the <see cref="M:Enkoni.Framework.Entities.Repository`1.SaveChanges"/> method.</summary>
            <param name="entities">The entities that must be removed.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage. This parameter is not used.
            </param>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.FindAllCore(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Enkoni.Framework.SortSpecifications{`0},System.Int32,System.String[],Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Finds all the available entities that match the specified expression.</summary>
            <param name="expression">The expression to which the entities must match.</param>
            <param name="sortRules">The specification of the sort rules that must be applied. Use <see langword="null"/> to ignore the ordering.</param>
            <param name="maximumResults">The maximum number of results that must be retrieved. Use '-1' to retrieve all results.</param>
            <param name="includePaths">The dot-separated lists of related objects to return in the query results.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage.</param>
            <returns>The entities that match the specified expression.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.FindSingleCore(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String[],Enkoni.Framework.Entities.DataSourceInfo,`0)">
            <summary>Finds a single entity that matches the expression. If no result was found, the specified default-value is returned.</summary>
            <param name="expression">The expression to which the entity must match.</param>
            <param name="includePaths">The dot-separated lists of related objects to return in the query results.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage.</param>
            <param name="defaultValue">The value that will be returned when no match was found.</param>
            <returns>The found entity or <paramref name="defaultValue"/> if there was no result.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.FindFirstCore(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Enkoni.Framework.SortSpecifications{`0},System.String[],Enkoni.Framework.Entities.DataSourceInfo,`0)">
            <summary>Finds the first entity that matches the expression. If no result was found, the specified default-value is returned.</summary>
            <param name="expression">The expression to which the entity must match.</param>
            <param name="sortRules">The specification of the sort rules that must be applied. Use <see langword="null"/> to ignore the ordering.</param>
            <param name="includePaths">The dot-separated lists of related objects to return in the query results.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage.</param>
            <param name="defaultValue">The value that will be returned when no match was found.</param>
            <returns>The found entity or <paramref name="defaultValue"/> if there was no result.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.CreateLikeExpressionCore(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
            <summary>Creates a LIKE-expression using the specified field and search pattern.</summary>
            <param name="field">The field of type <c>T</c> that must match the pattern.</param>
            <param name="pattern">The pattern to which the field must apply. The pattern may contain a '*' and '?' wildcard.</param>
            <returns>The created expression.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.SelectDbContext(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Selects the <see cref="P:Enkoni.Framework.Entities.DatabaseRepository`1.DbContext"/> that must be used. If the specified DataSourceInfo contains a valid <see cref="P:Enkoni.Framework.Entities.DatabaseRepository`1.DbContext"/>, it is used; otherwise the value
            of the property '<see cref="P:Enkoni.Framework.Entities.DatabaseRepository`1.DbContext"/>' is used.</summary>
            <param name="dataSourceInfo">Any information regarding the database that is used as data source.</param>
            <returns>The <see cref="P:Enkoni.Framework.Entities.DatabaseRepository`1.DbContext"/> that must be used.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.ResetDbContextNoLock(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Resets the repository by undoing any unsaved changes. This implementation does not acquire a write lock on the local storage and can
            therefore be called from within a context that already has a write lock on the internal storage.</summary>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.DetermineGraphTypes">
            <summary>Determines which types make up the graph of this entity.</summary>
            <returns>The list of types that make up the graph.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.DetermineGraphTypes(System.Type,System.Collections.Generic.List{System.Type})">
            <summary>Recursively determines the types that make up the graph of this entity.</summary>
            <param name="objectType">The type whose graph types must be determined.</param>
            <param name="graphTypes">The types that have already been discovered.</param>
            <returns>The list of types that make up the graph.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.UpdateAddedEntities(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.List{`0},Enkoni.Framework.Entities.EntityEqualityComparer{`0})">
            <summary>Handles the update of entities that are added to this repository but are not yet saved.</summary>
            <param name="entities">The entities that are updated.</param>
            <param name="tempAdditionCache">A copy of the addition cache.</param>
            <param name="entityComparer">The comparer that is used to compare the entities based on their record ID.</param>
            <returns>The entities from the addition cache that already have the updates applied.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.AddExistingEntities(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.List{`0},System.Collections.Generic.List{`0},System.Collections.Generic.List{`0},Enkoni.Framework.Entities.EntityEqualityComparer{`0},System.Data.Entity.DbContext,System.Collections.Generic.Dictionary{`0,`0})">
            <summary>Adds new entities that, based on their record ID, appear to already exist in the repository.</summary>
            <param name="entities">The entities that must be added.</param>
            <param name="unhandledEntities">The entities that have not yet been analyzed.</param>
            <param name="tempUpdateCache">A copy of the update cache.</param>
            <param name="tempDeletionCache">A copy of the deletion cache.</param>
            <param name="entityComparer">The comparer that is used to compare the entities based on their record ID.</param>
            <param name="context">The database context that gives access to the persistency.</param>
            <param name="handledEntities">Holds the combination of entities that have been added.</param>
            <returns>The entities from the repository that already have the updates applied.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.AddNewEntities(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0},System.Collections.Generic.Dictionary{`0,`0})">
            <summary>Adds new entities to the repository.</summary>
            <param name="unhandledEntities">The entities that have not yet been analyzed.</param>
            <param name="tempAdditionCache">A copy of the addition cache.</param>
            <param name="handledEntities">Holds the combination of entities that have been added.</param>
            <returns>The entities that have been added.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.PrepareDeletions(System.Data.Entity.DbContext)">
            <summary>Prepares the context with the registered additions of the entities.</summary>
            <param name="context">The context that keeps track of the entities.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.PrepareAdditions(System.Data.Entity.DbContext)">
            <summary>Prepares the context with the registered deletions of the entities.</summary>
            <param name="context">The context that keeps track of the entities.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.PrepareUpdates(System.Data.Entity.DbContext)">
            <summary>Prepares the context with the registered updates of the entities.</summary>
            <param name="context">The context that keeps track of the entities.</param>
            <returns>The objects and their original state that were set to Unchanged to prevent them from being saved.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.UpdateEntityNoLock(`0,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Updates the repository with the changes made to <paramref name="entity"/>. This implementation does not acquire a write lock on the
            local storage and can therefore be called from within a context that already has a write lock on the internal storage.</summary>
            <param name="entity">The entity that was updated.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage.</param>
            <returns>The entity with the most recent values.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.UpdateEntitiesNoLock(System.Collections.Generic.IEnumerable{`0},Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Updates a collection of entities in the repository. This implementation does not acquire a write lock on the local storage and can
            therefore be called from within a context that already has a write lock on the internal storage.</summary>
            <param name="entities">The entities that contain the updated values.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage. This parameter is not used.
            </param>
            <returns>The entities as they are stored in the repository.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.UpdateExistingEntities(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.List{`0},System.Data.Entity.DbContext,Enkoni.Framework.Entities.EntityEqualityComparer{`0})">
            <summary>Handles the update of entities that are already present in this repository.</summary>
            <param name="entities">The entities that are updated.</param>
            <param name="tempDeletionCache">A copy of the deletion cache.</param>
            <param name="context">The database context that gives access to the persistency.</param>
            <param name="entityComparer">The comparer that is used to compare the entities based on their record ID.</param>
            <returns>The entities from the repository that already have the updates applied.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.AddEntityNoLock(`0,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Inserts a new entity to the repository. This implementation does not acquire a write lock on the local storage and can therefore be
            called from within a context that already has a write lock on the internal storage.</summary>
            <param name="entity">The entity that must be added.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entity"/> is <see langword="null"/>.</exception>
            <returns>The entity with the most recent values.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.AddEntitiesNoLock(System.Collections.Generic.IEnumerable{`0},Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Adds a collection of new entities to the repository. They are added to the addition cache until it is saved using the
            <see cref="M:Enkoni.Framework.Entities.Repository`1.SaveChanges"/> method. A temporary (negative) RecordID is assigned to the entities. This will be reset when the
            entity is saved. This implementation does not acquire a write lock on the local storage and can therefore be called from within a context that
            already has a write lock on the internal storage.</summary>
            <param name="entities">The entities that must be added.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage. This parameter is not used.
            </param>
            <returns>The entities as they were added to the repository.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.DeleteEntityNoLock(`0,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Deletes an entity from the repository. This implementation does not acquire a write lock on the local storage and can therefore be
            called from within a context that already has a write lock on the internal storage.</summary>
            <param name="entity">The entity that must be deleted.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entity"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.DeleteEntitiesNoLock(System.Collections.Generic.IEnumerable{`0},Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Removes a collection of entities from the repository. Depending on the status of each entity, it is removed from the addition-cache
            or it is added to the deletion-cache until it is saved using the <see cref="M:Enkoni.Framework.Entities.Repository`1.SaveChanges"/> method. This implementation does
            not acquire a write lock on the local storage and can therefore be called from within a context that already has a write lock on the internal
            storage.</summary>
            <param name="entities">The entities that must be removed.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage. This parameter is not used.
            </param>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.ResetLocalCacheNoLock">
            <summary>Resets the local addition and deletion cache. This implementation does not acquire a write lock on the local storage and can therefore
            be called from within a context that already has a write lock on the internal storage.</summary>
        </member>
        <member name="T:Enkoni.Framework.Entities.DatabaseRepository`1.EntityCastRemoverVisitor">
            <summary>Implements a custom <see cref="T:System.Linq.Expressions.ExpressionVisitor"/> that removes the generated Convert-operation from the expression.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.EntityCastRemoverVisitor.Convert(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>Converts the specified expression into an expression that can be used by the Entity Framework.</summary>
            <param name="expression">The expression that must be converted.</param>
            <returns>The converted expression.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.EntityCastRemoverVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>Visits the children of the <see cref="T:System.Linq.Expressions.UnaryExpression"/>.</summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="T:Enkoni.Framework.Entities.IDatabaseRepository">
            <summary>This interface is used as a marker by the RepositoryFactory.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.IDatabaseRepository.ReloadObjectContext(System.Data.Entity.DbContext)">
            <summary>Replaces the current <see cref="T:System.Data.Entity.DbContext"/> with the specified one. The current <see cref="T:System.Data.Entity.DbContext"/> is first disposed.</summary>
            <param name="dbContext">The new <see cref="T:System.Data.Entity.DbContext"/> that must be used.</param>
        </member>
        <member name="T:Enkoni.Framework.Entities.ShallowDatabaseRepository`1">
            <summary>This class extends the <see cref="T:Enkoni.Framework.Entities.DatabaseRepository`1"/> class and implements some of the functionality using the Entity
            Framework. The repository can be used for types that only need to be created, but not saved or retrieved as this is done by the parent-type's
            repository.</summary>
            <typeparam name="TEntity">The type of the entity that is handled by this repository.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.Entities.ShallowDatabaseRepository`1.#ctor(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.ShallowDatabaseRepository`1"/> class using the specified
            <see cref="T:Enkoni.Framework.Entities.DataSourceInfo"/>.</summary>
            <param name="dataSourceInfo">The data source information that must be used to access the database.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.ShallowDatabaseRepository`1.AddEntityCore(`0,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Since addition of entities will be handled by the parent entity's repository, nothing is done here.</summary>
            <param name="entity">The entity that is to be added.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage.</param>
            <returns>The entity with the most recent values.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.ShallowDatabaseRepository`1.UpdateEntityCore(`0,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Since updating of entities will be handled by the parent entity's repository, nothing is done here.</summary>
            <param name="entity">The entity that is to be updated.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage.</param>
            <returns>The entity with the most recent values.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.ShallowDatabaseRepository`1.DeleteEntityCore(`0,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Since deletion of entities will be handled by the parent entity's repository, nothing is done here.</summary>
            <param name="entity">The entity that is to be deleted.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.ShallowDatabaseRepository`1.SaveChangesCore(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Since any changes to these entities will be handled by the parent entity's repository, nothing is done here.</summary>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.ShallowDatabaseRepository`1.FindAllCore(System.Func{`0,System.Boolean},Enkoni.Framework.SortSpecifications{`0},System.Int32,System.String[],Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Since retrieval of these entities is handled by the parent entity's repository, this method throws a
            <see cref="T:System.NotSupportedException"/>.</summary>
            <param name="expression">The parameter is not used.</param>
            <param name="sortRules">The specification of the sort rules that must be applied. Use <see langword="null"/> to ignore the ordering.</param>
            <param name="maximumResults">The maximum number of results that must be retrieved. Use '-1' to retrieve all results.</param>
            <param name="includePaths">The dot-separated lists of related objects to return in the query results.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage.</param>
            <returns>Not applicable.</returns>
            <exception cref="T:System.NotSupportedException">Always, since this operation is not supported by this type of repository.</exception>
        </member>
        <member name="M:Enkoni.Framework.Entities.ShallowDatabaseRepository`1.FindFirstCore(System.Func{`0,System.Boolean},Enkoni.Framework.SortSpecifications{`0},System.String[],Enkoni.Framework.Entities.DataSourceInfo,`0)">
            <summary>Since retrieval of the entity is handled by the parent entity's repository, this method throws a
            <see cref="T:System.NotSupportedException"/>.</summary>
            <param name="expression">The parameter is not used.</param>
            <param name="sortRules">The specification of the sort rules that must be applied. Use <see langword="null"/> to ignore the ordering.</param>
            <param name="includePaths">The dot-separated lists of related objects to return in the query results.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage.</param>
            <param name="defaultValue">The parameter is not used.</param>
            <returns>Not applicable.</returns>
            <exception cref="T:System.NotSupportedException">Always, since this operation is not supported by this type of repository.</exception>
        </member>
        <member name="M:Enkoni.Framework.Entities.ShallowDatabaseRepository`1.FindSingleCore(System.Func{`0,System.Boolean},System.String[],Enkoni.Framework.Entities.DataSourceInfo,`0)">
            <summary>Since retrieval of the entity is handled by the parent entity's repository, this method throws a
            <see cref="T:System.NotSupportedException"/>.</summary>
            <param name="expression">The parameter is not used.</param>
            <param name="includePaths">The dot-separated lists of related objects to return in the query results.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage.</param>
            <param name="defaultValue">The parameter is not used.</param>
            <returns>Not applicable.</returns>
            <exception cref="T:System.NotSupportedException">Always, since this operation is not supported by this type of repository.</exception>
        </member>
    </members>
</doc>
