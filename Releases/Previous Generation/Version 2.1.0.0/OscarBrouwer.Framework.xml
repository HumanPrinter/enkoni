<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OscarBrouwer.Framework</name>
    </assembly>
    <members>
        <member name="T:OscarBrouwer.Framework.Serialization.CsvColumnAttribute">
            <summary>This attribute defines how a property must be serialized and deserialized to and from a column in a CVS file.
            </summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Serialization.CsvColumnAttribute.#ctor">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.Serialization.CsvColumnAttribute"/> class using a default field index.
            </summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Serialization.CsvColumnAttribute.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.Serialization.CsvColumnAttribute"/> class.</summary>
            <param name="fieldIndex">The index of the field in the CSV file.</param>
        </member>
        <member name="P:OscarBrouwer.Framework.Serialization.CsvColumnAttribute.FieldIndex">
            <summary>Gets the index of the field in the CSV file.</summary>
        </member>
        <member name="T:OscarBrouwer.Framework.AsyncResultVoid">
            <summary>Represents the status of an asynchronous operation that returns void.</summary>
        </member>
        <member name="F:OscarBrouwer.Framework.AsyncResultVoid.PendingState">
            <summary>Indicates that the operation is pending.</summary>
        </member>
        <member name="F:OscarBrouwer.Framework.AsyncResultVoid.CompletedSynchronouslyState">
            <summary>Indicates that the operation has completed synchronously.</summary>
        </member>
        <member name="F:OscarBrouwer.Framework.AsyncResultVoid.CompletedAsynchronouslyState">
            <summary>Indicates that the operation has completed asynchronously.</summary>
        </member>
        <member name="F:OscarBrouwer.Framework.AsyncResultVoid.asyncCallback">
            <summary>The callback that is called when the operation completes.</summary>
        </member>
        <member name="F:OscarBrouwer.Framework.AsyncResultVoid.asyncState">
            <summary>A user-defined object that qualifies or contains information about an asynchronous operation.</summary>
        </member>
        <member name="F:OscarBrouwer.Framework.AsyncResultVoid.currentState">
            <summary>The current state of the operation.</summary>
        </member>
        <member name="F:OscarBrouwer.Framework.AsyncResultVoid.asyncWaitHandle">
            <summary>Notifies any waiting thread that an event has occured. This field may or may not be used depening on the
            usage of this class.</summary>
        </member>
        <member name="F:OscarBrouwer.Framework.AsyncResultVoid.pendingException">
            <summary>The pending exception (if any) that was thrown by the executed method.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.AsyncResultVoid.#ctor(System.AsyncCallback,System.Object)">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.AsyncResultVoid"/> class.</summary>
            <param name="asyncCallback">The callback that is executed when the operation completes. Leave 
            <see langword="null"/> if not used.</param>
            <param name="state">A user-defined object that qualifies or contains information about an asynchronous operation.
            Leave <see langword="null"/> if not used.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.AsyncResultVoid.SetAsCompleted(System.Exception,System.Boolean)">
            <summary>Sets the status of the asynchronous call to completed.</summary>
            <param name="exception">The <see cref="T:System.Exception"/> that was thrown by the executed method. If no pendingException was 
            thrown, pass a <see langword="null"/> reference.</param>
            <param name="completedSynchronously"><c>True</c> if the asynchronous operation completed synchronously; otherwise,
            <c>false</c>.</param>
            <remarks>If the synchronous completion of the call is detected in the <see cref="T:System.AsyncCallback"/> delegate, it is
            probable that the thread that initiated the asynchronous operation is the current thread.<br/>
            <br/>
            <b>Notes to Implementers:</b><br/>
            Most implementers of the <see cref="T:System.IAsyncResult"/> interface will not use this property and should return 
            <see langword="false"/>.</remarks>
        </member>
        <member name="M:OscarBrouwer.Framework.AsyncResultVoid.EndInvoke">
            <summary>Ends the invocation by waiting for the waithandle to finish.</summary>
        </member>
        <member name="P:OscarBrouwer.Framework.AsyncResultVoid.IsCompleted">
            <summary>Gets a value indicating whether the asynchronous operation has completed.</summary>
        </member>
        <member name="P:OscarBrouwer.Framework.AsyncResultVoid.AsyncState">
            <summary>Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:OscarBrouwer.Framework.AsyncResultVoid.CompletedSynchronously">
            <summary>Gets a value indicating whether the asynchronous operation completed synchronously.</summary>
        </member>
        <member name="P:OscarBrouwer.Framework.AsyncResultVoid.AsyncWaitHandle">
            <summary>Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.</summary>
        </member>
        <member name="T:OscarBrouwer.Framework.Workflow">
            <summary>Represents a process or workflow that executes a defined task or set of tasks. This class provides the 
            basic logic to start, stop, pause and continue a workflow both synchronously and asynchronously.</summary>
        </member>
        <member name="T:OscarBrouwer.Framework.IWorkflow">
            <summary>Represents a process or workflow that executes a defined task or set of tasks.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.IWorkflow.Start">
            <summary>Tries to start the workflow. It blocks untill the workflow is started.</summary>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be started. Only when 
            the workflow is in the state <see cref="F:OscarBrouwer.Framework.WorkflowState.Init"/> or <see cref="F:OscarBrouwer.Framework.WorkflowState.Stopped"/>, it can be
            started.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.IWorkflow.Stop">
            <summary>Tries to stop the workflow. It blocks untill the workflow is stopped.</summary>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be stopped. Only when 
            the workflow is in the state <see cref="F:OscarBrouwer.Framework.WorkflowState.Started"/>, <see cref="F:OscarBrouwer.Framework.WorkflowState.Pausing"/> or 
            <see cref="F:OscarBrouwer.Framework.WorkflowState.Continued"/>, it can be stopped.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.IWorkflow.Pause">
            <summary>Tries to pause the workflow. It blocks untill the workflow is paused.</summary>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and resuming.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be paused. Only when
            the workflow is in the state <see cref="F:OscarBrouwer.Framework.WorkflowState.Started"/> or <see cref="F:OscarBrouwer.Framework.WorkflowState.Continued"/>, it can 
            be paused.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="M:OscarBrouwer.Framework.IWorkflow.Continue">
            <summary>Tries to continue the workflow. It blocks untill the workflow is continued.</summary>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and continuing.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be continued. Only when 
            the workflow is in the state <see cref="F:OscarBrouwer.Framework.WorkflowState.Paused"/>, it can be continued.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="M:OscarBrouwer.Framework.IWorkflow.BeginStart(System.AsyncCallback,System.Object)">
            <summary>Begins to start the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous start operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous start request from 
            other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous start.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.IWorkflow.EndStart(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous start to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be started. Only when 
            the workflow is in the state <see cref="F:OscarBrouwer.Framework.WorkflowState.Init"/> or <see cref="F:OscarBrouwer.Framework.WorkflowState.Stopped"/>, it can be
            started.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.IWorkflow.BeginStop(System.AsyncCallback,System.Object)">
            <summary>Begins to stop the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous stop operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous stop request from 
            other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous stop.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.IWorkflow.EndStop(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous stop to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be stopped. Only when 
            the workflow is in the state <see cref="F:OscarBrouwer.Framework.WorkflowState.Started"/>, <see cref="F:OscarBrouwer.Framework.WorkflowState.Pausing"/> or 
            <see cref="F:OscarBrouwer.Framework.WorkflowState.Continued"/>, it can be stopped.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.IWorkflow.BeginPause(System.AsyncCallback,System.Object)">
            <summary>Begins to pause the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous pause operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous pause request from 
            other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous pause.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.IWorkflow.EndPause(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous pause to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and resuming.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be paused. Only when 
            the workflow is in the state <see cref="F:OscarBrouwer.Framework.WorkflowState.Started"/> or <see cref="F:OscarBrouwer.Framework.WorkflowState.Continued"/>, it can 
            be paused.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="M:OscarBrouwer.Framework.IWorkflow.BeginContinue(System.AsyncCallback,System.Object)">
            <summary>Begins to continue the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous continue operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous continue request 
            from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous continue.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.IWorkflow.EndContinue(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous continue to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and continuing.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be continued. Only 
            when the workflow is in the state <see cref="F:OscarBrouwer.Framework.WorkflowState.Paused"/>, it can be continued.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="P:OscarBrouwer.Framework.IWorkflow.CanPauseAndContinue">
            <summary>Gets a value indicating whether the workflow is able to pause and continue its internal processes. By
            default, a <b>Workflow</b> cannot be paused or continued.</summary>
        </member>
        <member name="P:OscarBrouwer.Framework.IWorkflow.State">
            <summary>Gets the current <see cref="T:OscarBrouwer.Framework.WorkflowState"/> of the workflow.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Workflow.#ctor">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.Workflow"/> class. It sets the state to the initial value
            of <see cref="F:OscarBrouwer.Framework.WorkflowState.Init"/>.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Workflow.Start">
            <summary>Tries to start the workflow. It blocks untill the workflow is started.</summary>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be started. Only when 
            the workflow is in the state <see cref="F:OscarBrouwer.Framework.WorkflowState.Init"/> or <see cref="F:OscarBrouwer.Framework.WorkflowState.Stopped"/>, it can be
            started.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.Workflow.Stop">
            <summary>Tries to stop the workflow. It blocks untill the workflow is stopped.</summary>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be stopped. Only when 
            the workflow is in the state <see cref="F:OscarBrouwer.Framework.WorkflowState.Started"/>, <see cref="F:OscarBrouwer.Framework.WorkflowState.Pausing"/> or 
            <see cref="F:OscarBrouwer.Framework.WorkflowState.Continued"/>, it can be stopped.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.Workflow.Pause">
            <summary>Tries to pause the workflow. It blocks untill the workflow is paused.</summary>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and resuming.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be paused. Only when
            the workflow is in the state <see cref="F:OscarBrouwer.Framework.WorkflowState.Started"/> or <see cref="F:OscarBrouwer.Framework.WorkflowState.Continued"/>, it can 
            be paused.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="M:OscarBrouwer.Framework.Workflow.Continue">
            <summary>Tries to continue the workflow. It blocks untill the workflow is continued.</summary>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and continuing.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be continued. Only when 
            the workflow is in the state <see cref="F:OscarBrouwer.Framework.WorkflowState.Paused"/>, it can be continued.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="M:OscarBrouwer.Framework.Workflow.BeginStart(System.AsyncCallback,System.Object)">
            <summary>Begins to start the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous start operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous start request from 
            other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous start.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Workflow.EndStart(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous start to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be started. Only when 
            the workflow is in the state <see cref="F:OscarBrouwer.Framework.WorkflowState.Init"/> or <see cref="F:OscarBrouwer.Framework.WorkflowState.Stopped"/>, it can be
            started.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.Workflow.BeginStop(System.AsyncCallback,System.Object)">
            <summary>Begins to stop the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous stop operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous stop request from 
            other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous stop.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Workflow.EndStop(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous stop to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be stopped. Only when 
            the workflow is in the state <see cref="F:OscarBrouwer.Framework.WorkflowState.Started"/>, <see cref="F:OscarBrouwer.Framework.WorkflowState.Pausing"/> or 
            <see cref="F:OscarBrouwer.Framework.WorkflowState.Continued"/>, it can be stopped.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.Workflow.BeginPause(System.AsyncCallback,System.Object)">
            <summary>Begins to pause the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous pause operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous pause request from 
            other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous pause.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Workflow.EndPause(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous pause to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and resuming.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be paused. Only when 
            the workflow is in the state <see cref="F:OscarBrouwer.Framework.WorkflowState.Started"/> or <see cref="F:OscarBrouwer.Framework.WorkflowState.Continued"/>, it can 
            be paused.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="M:OscarBrouwer.Framework.Workflow.BeginContinue(System.AsyncCallback,System.Object)">
            <summary>Begins to continue the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous continue operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous continue request 
            from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous continue.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Workflow.EndContinue(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous continue to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and continuing.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be continued. Only 
            when the workflow is in the state <see cref="F:OscarBrouwer.Framework.WorkflowState.Paused"/>, it can be continued.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="M:OscarBrouwer.Framework.Workflow.OnStart">
            <summary>Contains the actual start-up logic. The default implementation is empty, subclasses will have to 
            provide the implementation by overriding this method. Implementers of this method do not have to check the 
            state of the workflow or change the state of the workflow as this is already done by the public 
            <see cref="M:OscarBrouwer.Framework.Workflow.Start"/> method.</summary>
            <remarks>If the implementer detects a situation in which it cannot be started, it should throw an 
            <see cref="T:System.InvalidOperationException"/>. This will cause the <b>Workflow</b> to move to the 
            <see cref="F:OscarBrouwer.Framework.WorkflowState.Faulted"/> state.</remarks>
        </member>
        <member name="M:OscarBrouwer.Framework.Workflow.OnStop">
            <summary>Contains the actual stop logic. The default implementation is empty, subclasses will have to provide
            the implementation by overriding this method. Implementers of this method do not have to check the state of the
            workflow or change the state of the workflow as this is already done by the public <see cref="M:OscarBrouwer.Framework.Workflow.Stop"/> 
            method.</summary>
            <remarks>If the implementer detects a situation in which it cannot be stopped, it should throw an 
            <see cref="T:System.InvalidOperationException"/>. This will cause the <b>Workflow</b> to move to the 
            <see cref="F:OscarBrouwer.Framework.WorkflowState.Faulted"/> state.</remarks>
        </member>
        <member name="M:OscarBrouwer.Framework.Workflow.OnPause">
            <summary>Contains the actual pause logic. The default implementation is empty, subclasses will have to provide
            the implementation by overriding this method. Implementers of this method do not have to check the state of the
            workflow or change the state of the workflow as this is already done by the public <see cref="M:OscarBrouwer.Framework.Workflow.Pause"/>
            method.</summary>
            <remarks>If the implementer detects a situation in which it cannot be paused, it should throw an 
            <see cref="T:System.InvalidOperationException"/>. This will cause the <b>Workflow</b> to move to the 
            <see cref="F:OscarBrouwer.Framework.WorkflowState.Faulted"/> state.</remarks>
        </member>
        <member name="M:OscarBrouwer.Framework.Workflow.OnContinue">
            <summary>Contains the actual continue logic. The default implementation is empty, subclasses will have to 
            provide the implementation by overriding this method. Implementers of this method do not have to check the 
            state of the workflow or change the state of the workflow as this is already done by the public 
            <see cref="M:OscarBrouwer.Framework.Workflow.Continue"/> method.</summary>
            <remarks>If the implementer detects a situation in which it cannot be continued, it should throw an 
            <see cref="T:System.InvalidOperationException"/>. This will cause the <b>Workflow</b> to move to the 
            <see cref="F:OscarBrouwer.Framework.WorkflowState.Faulted"/> state.</remarks>
        </member>
        <member name="M:OscarBrouwer.Framework.Workflow.StartWorkflowHelper(System.Object)">
            <summary>Executes the <see cref="M:OscarBrouwer.Framework.Workflow.Start"/> method in a seperate thread. This is used to support asynchronous 
            operations.</summary>
            <param name="asyncResult">The object that holds the status of the asynchronous operation.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.Workflow.StopWorkflowHelper(System.Object)">
            <summary>Executes the <see cref="M:OscarBrouwer.Framework.Workflow.Stop"/> method in a seperate thread. This is used to support asynchronous 
            operations.</summary>
            <param name="asyncResult">The object that holds the status of the asynchronous operation.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.Workflow.PauseWorkflowHelper(System.Object)">
            <summary>Executes the <see cref="M:OscarBrouwer.Framework.Workflow.Pause"/> method in a seperate thread. This is used to support asynchronous 
            operations.</summary>
            <param name="asyncResult">The object that holds the status of the asynchronous operation.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.Workflow.ContinueWorkflowHelper(System.Object)">
            <summary>Executes the <see cref="M:OscarBrouwer.Framework.Workflow.Continue"/> method in a seperate thread. This is used to support asynchronous 
            operations.</summary>
            <param name="asyncResult">The object that holds the status of the asynchronous operation.</param>
        </member>
        <member name="P:OscarBrouwer.Framework.Workflow.CanPauseAndContinue">
            <summary>Gets a value indicating whether the workflow is able to pause and continue its internal processes. By
            default, a <b>Workflow</b> cannot be paused or continued.</summary>
        </member>
        <member name="P:OscarBrouwer.Framework.Workflow.State">
            <summary>Gets or sets the current <see cref="T:OscarBrouwer.Framework.WorkflowState"/> of the workflow.</summary>
        </member>
        <member name="T:OscarBrouwer.Framework.Disposable">
            <summary>Implements the basic functionality of the <see cref="T:System.IDisposable"/> interface. By extending from this 
            class, decendants can make use of a generic and consistent implementation of the dispose pattern. Decendants only
            have to override the <see cref="M:Dispose(bool)"/> method.<br/>
            This implementation is based on the reference implementation created by <a href="http://idesign.net">Juval Lowy
            </a> and the reference created by <a href="http://www.codeproject.com/KB/dotnet/idisposable.aspx">Stephen Cleary
            </a><br/>
            <strong>Important:</strong> Only derive from this class if your class contains only managed resources (types that
            implement <see cref="T:System.IDisposable"/>). If your class contains an unmanaged resource, take a look at the following 
            articles on howto properly implement <see cref="T:System.IDisposable"/> (
            <a href="http://www.codeproject.com/KB/dotnet/idisposable.aspx">article 1</a> and 
            <a href="http://nitoprograms.blogspot.com/2009/08/how-to-implement-idisposable-and.html">article 2</a>).
            </summary>
        </member>
        <member name="F:OscarBrouwer.Framework.Disposable.isDisposed">
            <summary>Indicates if this instance is already disposed or not.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Disposable.Dispose">
            <summary>Releases the resources held by this instance.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Disposable.DisposeCore">
            <summary><para>Releases the resources of this instance.</para>
            <para>Decendants should override this method to release there resources. The best way to override this method is:
            <code>
            protected override void DisposeCore() {
              try {
                // Release any managed resources
              }
              finally {
                base.DisposeCore();
              }
            }
            </code>
            </para>
            <para>This way a complete dispose of the object can be guaranteed.</para></summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Disposable.CheckForDisposal">
            <summary>Checks if this instance is already disposed or not.</summary>
        </member>
        <member name="P:OscarBrouwer.Framework.Disposable.IsDisposed">
            <summary>Gets a value indicating whether this object is disposed or not.</summary>
        </member>
        <member name="T:OscarBrouwer.Framework.Extensions">
            <summary>This class contains some all-purpose extension-methods.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Extensions.Clone``1(``0)">
            <summary>Returns a strong-typed clone of the instance.</summary>
            <typeparam name="T">The actual type of the instance that will be cloned.</typeparam>
            <param name="instance">The instance on which the clone-method will be invoked.</param>
            <returns>A typed clone of the instance.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Extensions.Fire(System.EventHandler,System.Object,System.EventArgs)">
            <summary>Fires an event in a serial way. An eventhandler needs to finish before the next eventhandler will be 
            called. This method will return when all the eventhandlers have finished. <br/>
            This method will automatically check if there are any eventhandlers subscribed to <paramref name="handler"/> 
            and it will automatically propagate the call the the appropriate thread.</summary>
            <param name="handler">The multicast delegate that must be executed.</param>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Any metadata that must be passed to the eventhandlers.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.Extensions.Fire``1(System.EventHandler{``0},System.Object,``0)">
            <summary>Fires an event in a serial way. An eventhandler needs to finish before the next eventhandler will be 
            called. This method will return when all the eventhandlers have finished. <br/>
            This method will automatically check if there are any eventhandlers subscribed to <paramref name="handler"/>
            and it will automatically propagate the call the the appropriate thread.</summary>
            <typeparam name="T">The type of eventargs that is passed with the event.</typeparam>
            <param name="handler">The multicast delegate that must be executed.</param>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Any metadata that must be passed to the eventhandlers.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.Extensions.FireInParallel(System.EventHandler,System.Object,System.EventArgs)">
            <summary>Fires an event in a parallel way. This method will return when all the eventhandlers have finished. 
            <br/>
            This method will automatically check if there are any eventhandlers subscribed to <paramref name="handler"/> 
            and it will automatically propagate the call the the appropriate thread.</summary>
            <param name="handler">The multicast delegate that must be executed.</param>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Any metadata that must be passed to the eventhandlers.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.Extensions.FireInParallel``1(System.EventHandler{``0},System.Object,``0)">
            <summary>Fires an event in a parallel way. This method will return when all the eventhandlers have finished. 
            <br/>
            This method will automatically check if there are any eventhandlers subscribed to <paramref name="handler"/> 
            and it will automatically propagate the call the the appropriate thread.</summary>
            <typeparam name="T">The type of eventargs that is passed with the event.</typeparam>
            <param name="handler">The multicast delegate that must be executed.</param>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Any metadata that must be passed to the eventhandlers.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.Extensions.FireAsync(System.EventHandler,System.Object,System.EventArgs)">
            <summary>Fires an event in an asynchronous way. When this method returns, the eventhandlers may still be 
            running.<br/>
            This method will automatically check if there are any eventhandlers subscribed to <paramref name="handler"/> 
            and it will automatically propagate the call the the appropriate thread.</summary>
            <param name="handler">The multicast delegate that must be executed.</param>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Any metadata that must be passed to the eventhandlers.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.Extensions.FireAsync``1(System.EventHandler{``0},System.Object,``0)">
            <summary>Fires an event in an asynchronous way. When this method returns, the eventhandlers may still be 
            running.<br/>
            This method will automatically check if there are any eventhandlers subscribed to <paramref name="handler"/> 
            and it will automatically propagate the call the the appropriate thread.</summary>
            <typeparam name="T">The type of eventargs that is passed with the event.</typeparam>
            <param name="handler">The multicast delegate that must be executed.</param>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Any metadata that must be passed to the eventhandlers.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.Extensions.InvokeDelegate(System.Delegate,System.Object[])">
            <summary>Invokes a delegate. If required, the call is transfered to the appropriate thread.</summary>
            <param name="del">The delegate that must be invoked.</param>
            <param name="args">The arguments that must be passed to the delegate.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.Extensions.UnsafeFire(System.Delegate,System.Object[])">
            <summary>Invokes the subscribers of the specified delegate in a sequential way.</summary>
            <param name="del">The delegate whose subscribers must be invoked.</param>
            <param name="args">The arguments that must be passed to the delegate-subscribers.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.Extensions.UnsafeFireInParallel(System.Delegate,System.Object[])">
            <summary>Invokes the subscribers of the specified delegate in a parallel way.</summary>
            <param name="del">The delegate whose subscribers must be invoked.</param>
            <param name="args">The arguments that must be passed to the delegate-subscribers.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.Extensions.UnsafeFireAsync(System.Delegate,System.Object[])">
            <summary>Invokes the subscribers of the specified delegate in an asynchronous way.</summary>
            <param name="del">The delegate whose subscribers must be invoked.</param>
            <param name="args">The arguments that must be passed to the delegate-subscribers.</param>
        </member>
        <member name="T:OscarBrouwer.Framework.Extensions.AsyncFire">
            <summary>This delegate is used to execute delegates asynchronous.</summary>
            <param name="del">The actual delegate that must be executed.</param>
            <param name="args">Any arguments that must be passed to delegate <c>del</c>.</param>
        </member>
        <member name="T:OscarBrouwer.Framework.ISpecification`1">
            <summary>This interface describes the public API of the classes that make up the specification subsystem that is
            implemented using the Specification Pattern.</summary>
            <typeparam name="T">The type of object to which the specification applies.</typeparam>
        </member>
        <member name="M:OscarBrouwer.Framework.ISpecification`1.And(OscarBrouwer.Framework.ISpecification{`0})">
            <summary>Creates an 'And' specification that can be used to combine two specifications and compare them using
            the '&amp;&amp;' operation.</summary>
            <param name="specification">The specification that must be combined.</param>
            <returns>The combined specification.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.ISpecification`1.Or(OscarBrouwer.Framework.ISpecification{`0})">
            <summary>Creates an 'Or' specification that can be used to combine two specifications and compare them using
            the '||' operation.</summary>
            <param name="specification">The specification that must be combined.</param>
            <returns>The combined specification.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.ISpecification`1.Not">
            <summary>Creates a 'Not' specification that can be used to inverse the result of the specification.</summary>
            <returns>The combined specification.</returns>
        </member>
        <member name="P:OscarBrouwer.Framework.ISpecification`1.IsSatisfiedBy">
            <summary>Gets the function that equals the search-pattern that is implemented by this type.</summary>
        </member>
        <member name="T:OscarBrouwer.Framework.InvalidTypeParameterException">
            <summary>This exception can be thrown when a method or class definition is used with an illegal type parameter.
            </summary>
        </member>
        <member name="M:OscarBrouwer.Framework.InvalidTypeParameterException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.InvalidTypeParameterException"/> class.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.InvalidTypeParameterException.#ctor(System.String)">
            <summary> Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.InvalidTypeParameterException"/> class with a specified
            error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.InvalidTypeParameterException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.InvalidTypeParameterException"/> class with a specified
            error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a 
            <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.InvalidTypeParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.InvalidTypeParameterException"/> class with serialized  
            data.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the 
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source
            or destination.</param>
        </member>
        <member name="T:OscarBrouwer.Framework.LambdaEqualityComparer`2">
            <summary>This class compares types based on a field of the type. By using this class, it is no longer required to
            create a specific equality comparer to compare types using just one field.</summary>
            <typeparam name="T">The type of object that must be compared.</typeparam>
            <typeparam name="TField">The type of the field of <b>T</b> that must be used in the comparison.</typeparam>
        </member>
        <member name="F:OscarBrouwer.Framework.LambdaEqualityComparer`2.fieldFunction">
            <summary>The function that gives access to the field.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.LambdaEqualityComparer`2.#ctor(System.Func{`0,`1})">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.LambdaEqualityComparer`2"/> class.</summary>
            <param name="field">The function that gives access to the field that must be used in the comparison.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.LambdaEqualityComparer`2.Equals(`0,`0)">
            <summary>Determines whether the specified objects are equal.</summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns><see langword="true"/> if the specified objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.LambdaEqualityComparer`2.GetHashCode(`0)">
            <summary>Returns a hash code for the specified object.</summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of obj is a reference type and obj is null.</exception>
        </member>
        <member name="T:OscarBrouwer.Framework.WorkflowState">
            <summary>Contains the states in which a workflow can be. A workflow can only be in one state at a time.</summary>
        </member>
        <member name="F:OscarBrouwer.Framework.WorkflowState.Init">
            <summary>Indicates that the workflow is created but not yet started.</summary>
        </member>
        <member name="F:OscarBrouwer.Framework.WorkflowState.Starting">
            <summary>Indicates that the workflow is currently starting.</summary>
        </member>
        <member name="F:OscarBrouwer.Framework.WorkflowState.Started">
            <summary>Indicates that the workflow is running.</summary>
        </member>
        <member name="F:OscarBrouwer.Framework.WorkflowState.Pausing">
            <summary>Indicates that the workflow is pausing its processes.</summary>
        </member>
        <member name="F:OscarBrouwer.Framework.WorkflowState.Paused">
            <summary>Indicates that the workflow is currently paused.</summary>
        </member>
        <member name="F:OscarBrouwer.Framework.WorkflowState.Continuing">
            <summary>Indicates that the workflow is resuming its processes.</summary>
        </member>
        <member name="F:OscarBrouwer.Framework.WorkflowState.Continued">
            <summary>Indicates that the workflow is resuming. This basically is equal to the <see cref="F:OscarBrouwer.Framework.WorkflowState.Started"/> state.
            </summary>
        </member>
        <member name="F:OscarBrouwer.Framework.WorkflowState.Stopping">
            <summary>Indicates that the workflow is stopping its processes.</summary>
        </member>
        <member name="F:OscarBrouwer.Framework.WorkflowState.Stopped">
            <summary>Indicates that the workflow has stopped.</summary>
        </member>
        <member name="F:OscarBrouwer.Framework.WorkflowState.Faulted">
            <summary>Indicates that the workflow is stopped as a result of an error.</summary>
        </member>
        <member name="T:OscarBrouwer.Framework.ConfigurationException">
            <summary>This exception can be thrown when a problem with the configuration has been discovered.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.ConfigurationException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.ConfigurationException"/> class.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.ConfigurationException.#ctor(System.String)">
            <summary> Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.ConfigurationException"/> class with a specified
            error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.ConfigurationException.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.ConfigurationException"/> class with a specified
            error message.</summary>
            <param name="configurationParameter">The name of the configurationparameter that causes the problem.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.ConfigurationException"/> class with a specified
            error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a 
            <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.ConfigurationException.#ctor(System.String,System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.ConfigurationException"/> class with a specified
            error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="configurationParameter">The name of the configurationparameter that causes the problem.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a 
            <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.ConfigurationException"/> class with serialized  
            data.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the 
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source
            or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.ConfigurationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception 
            being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or 
            destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:OscarBrouwer.Framework.ConfigurationException.ConfigurationParameter">
            <summary>Gets the name of the configurationparameter that caused the problem.</summary>
        </member>
        <member name="T:OscarBrouwer.Framework.SortOrder">
            <summary>Defines the supported sort orders.</summary>
        </member>
        <member name="F:OscarBrouwer.Framework.SortOrder.Ascending">
            <summary>Indicates that the objects should be sorted 'smallest first'.</summary>
        </member>
        <member name="F:OscarBrouwer.Framework.SortOrder.Descending">
            <summary>Indicates that the objects should be sorted 'biggest first'.</summary>
        </member>
        <member name="T:OscarBrouwer.Framework.Comparer`1">
            <summary>Provides a generic implementation of <see cref="T:System.Collections.Generic.IComparer`1"/> that is able to compare two objects 
            based on a specified fieldname, which can even be concatenated using the '.' character. The final field by which 
            the objects must be compared must implement the <c>CompareTo</c> method which is defined by the
            <see cref="T:System.IComparable"/> and <see cref="T:System.IComparable`1"/> interfaces.</summary>
            <typeparam name="T">The type of object that must be compared.</typeparam>
        </member>
        <member name="F:OscarBrouwer.Framework.Comparer`1.fieldName">
            <summary>The field by which the objects must be ordered.</summary>
        </member>
        <member name="F:OscarBrouwer.Framework.Comparer`1.order">
            <summary>The directtion of the order.</summary>
        </member>
        <member name="F:OscarBrouwer.Framework.Comparer`1.compareDelegate">
            <summary>The Func-delegate that does the actual work.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Comparer`1.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.Comparer`1"/> class that compares objects in an ascending 
            order.</summary>
            <param name="fieldName">The field that must be used to compare two objects. Use the '.' character to specify
            a field that is deeper in the chain of hierachy.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.Comparer`1.#ctor(System.String,OscarBrouwer.Framework.SortOrder)">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.Comparer`1"/> class.</summary>
            <param name="fieldName">The field that must be used to compare two objects. Use the '.' character to specify
            a field that is deeper in the chain of hierachy.</param>
            <param name="order">The ordering direction that must be used.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.Comparer`1.Compare(`0,`0)">
            <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater 
            than the other.</summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>If <b>x</b> is smaller than <b>y</b>, a value less than zero is returned. If <b>x</b> equals <b>y</b>, 
            zero is returned. If <b>x</b> is greater than <b>y</b>, a value greater than zero is returned.<br/>
            If the sort-order was set to <see cref="F:OscarBrouwer.Framework.SortOrder.Descending"/>, the results are inverted.</returns>
        </member>
        <member name="T:OscarBrouwer.Framework.Specification`1">
            <summary>This class contains the basic functionality for any specification-class.</summary>
            <typeparam name="T">The type of object to which the specification applies.</typeparam>
        </member>
        <member name="M:OscarBrouwer.Framework.Specification`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.Specification`1"/> class that will always return
            <see langword="true"/>.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Specification`1.#ctor(System.Func{`0,System.Boolean})">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.Specification`1"/> class.</summary>
            <param name="function">The function that equals the search pattern that is implemented by the type.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.Specification`1.And(OscarBrouwer.Framework.ISpecification{`0})">
            <summary>Creates an 'And' specification that can be used to combine two specifications and compare them using
            the '&amp;&amp;' operation.</summary>
            <param name="specification">The specification that must be combined.</param>
            <returns>The combined specification.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Specification`1.Or(OscarBrouwer.Framework.ISpecification{`0})">
            <summary>Creates an 'Or' specification that can be used to combine two specifications and compare them using
            the '||' operation.</summary>
            <param name="specification">The specification that must be combined.</param>
            <returns>The combined specification.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Specification`1.Not">
            <summary>Creates a 'Not' specification that can be used to inverse the result of the specification.</summary>
            <returns>The combined specification.</returns>
        </member>
        <member name="P:OscarBrouwer.Framework.Specification`1.IsSatisfiedBy">
            <summary>Gets the function that equals the search-pattern that is implemented by this type.</summary>
        </member>
        <member name="T:OscarBrouwer.Framework.Serialization.CsvSerializer`1">
            <summary>Serializes or deserializes a list of objects to and from a CSV file.</summary>
            <typeparam name="T">Type of the object that has to be serialized.</typeparam>
        </member>
        <member name="M:OscarBrouwer.Framework.Serialization.CsvSerializer`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.Serialization.CsvSerializer`1"/> class.</summary>
            <exception cref="T:OscarBrouwer.Framework.InvalidTypeParameterException">The specified type-parameter cannot be serialized using this 
            serializer.</exception>
            <exception cref="T:System.InvalidOperationException">The specified type-parameter contains illegal metadata that prevents it 
            from being (de)serialized.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.Serialization.CsvSerializer`1.Serialize(System.Collections.Generic.IEnumerable{`0},System.String)">
            <summary>Serializes a list of objects to a CSV file.</summary>
            <param name="objects">The collection of objects that must be serialized.</param>
            <param name="filePath">The name of the outputfile.</param>
            <exception cref="T:System.ArgumentNullException">The parameter is null.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.Serialization.CsvSerializer`1.Serialize(System.Collections.Generic.IEnumerable{`0},System.IO.Stream)">
            <summary>Serializes a list of objects to a CSV format and writes the data to a stream.</summary>
            <param name="objects">The collection of objects that must be serialized.</param>
            <param name="stream">The name of the outputfile.</param>
            <exception cref="T:System.ArgumentNullException">The parameter is null.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.Serialization.CsvSerializer`1.Deserialize(System.String)">
            <summary>Deserializes a CSV to a list of objects.</summary>
            <param name="filePath">Filepath to csv file.</param>
            <returns>List with objects.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Serialization.CsvSerializer`1.Deserialize(System.IO.Stream)">
            <summary>Deserializes a CSV to a list of objects.</summary>
            <param name="stream">The stream that contains the csv data.</param>
            <returns>List with objects.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Serialization.CsvSerializer`1.Serialize(System.Collections.Generic.IEnumerable{`0})">
            <summary>Serializes the collection of objects to a string in which all lines are seperated using the line-terminator 
            for the current environment.</summary>
            <param name="objects">The objects that must be serialized.</param>
            <returns>The string representation of the collection of objects.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Serialization.CsvSerializer`1.Deserialize(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Deserializes a collection of strings to a collection of objects.</summary>
            <param name="lines">The lines that must be deserialized.</param>
            <returns>The collection of deserialized objects.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Serialization.CsvSerializer`1.SetPropertyValue(System.Reflection.PropertyInfo,`0,System.String)">
            <summary>Set a property value of an object.</summary>
            <param name="propertyInfo">The property that must be assigned.</param>
            <param name="obj">Reference to the object whose property must be assigned.</param>
            <param name="value">The value that must be assigned.</param>
            <exception cref="T:System.NotSupportedException">The type of the property that must be assigned is not supported.
            </exception>
        </member>
        <member name="P:OscarBrouwer.Framework.Serialization.CsvSerializer`1.ColumnNameMappings">
            <summary>Gets the mappings of the columnnames. The dictionary uses the columnindex as key and columnname as value.
            </summary>
        </member>
        <member name="P:OscarBrouwer.Framework.Serialization.CsvSerializer`1.PropertyDelegates">
            <summary>Gets the delegates that give access to the properties of the instances that need to be serialized and 
            deserialized.</summary>
        </member>
        <member name="P:OscarBrouwer.Framework.Serialization.CsvSerializer`1.EmitHeader">
            <summary>Gets or sets a value indicating whether a header-line must be included when serializing the objects.</summary>
        </member>
        <member name="P:OscarBrouwer.Framework.Serialization.CsvSerializer`1.IgnoreHeaderOnRead">
            <summary>Gets or sets a value indicating whether the header should be ignored when reading the file.</summary>
        </member>
        <member name="P:OscarBrouwer.Framework.Serialization.CsvSerializer`1.Separator">
            <summary>Gets or sets the separator-character.</summary>
        </member>
        <member name="T:OscarBrouwer.Framework.Serialization.CsvRecordAttribute">
            <summary>This attribute defines how an object must be serialized and deserialized to and from a CVS file.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Serialization.CsvRecordAttribute.#ctor">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.Serialization.CsvRecordAttribute"/> class using a default seperator.
            </summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Serialization.CsvRecordAttribute.#ctor(System.Char)">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.Serialization.CsvRecordAttribute"/> class.</summary>
            <param name="separator">The separator that is used to seperate the fields.</param>
        </member>
        <member name="P:OscarBrouwer.Framework.Serialization.CsvRecordAttribute.Separator">
            <summary>Gets the seperator character. Defaults to ','.</summary>
        </member>
        <member name="P:OscarBrouwer.Framework.Serialization.CsvRecordAttribute.IgnoreHeaderOnRead">
            <summary>Gets or sets a value indicating whether the first line in the file must be ignored when deserializing the
            object.</summary>
        </member>
        <member name="P:OscarBrouwer.Framework.Serialization.CsvRecordAttribute.WriteHeader">
            <summary>Gets or sets a value indicating whether the header must be included in the file when serializing the object.
            </summary>
        </member>
        <member name="T:OscarBrouwer.Framework.SpecificationFactory`1">
            <summary>This factory provides the functionality to create single specifications.</summary>
            <typeparam name="T">The type to which the specification applies.</typeparam>
        </member>
        <member name="M:OscarBrouwer.Framework.SpecificationFactory`1.Empty">
            <summary>Creates an empty specification that will always return <see langword="true"/>.</summary>
            <returns>The created specification.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.SpecificationFactory`1.Equals``1(System.Func{`0,``0},``0)">
            <summary>Creates an 'Equals' specification that can be used to test if the field of an object equals the 
            specified value.</summary>
            <typeparam name="TField">The type of the field that must be tested.</typeparam>
            <param name="field">The field that must be tested.</param>
            <param name="value">The value to test for.</param>
            <returns>The created specification.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.SpecificationFactory`1.Like(System.Func{`0,System.String},System.String)">
            <summary>Creates a 'Like' specification that can be used to test if the field of an object matches the 
            specified pattern.</summary>
            <param name="field">The field that must be tested.</param>
            <param name="pattern">The pattern to test for.</param>
            <returns>The created specification.</returns>
        </member>
        <member name="T:OscarBrouwer.Framework.NotSupportedTypeParameterException">
            <summary>This exception can be thrown when a method or class definition is called with an unsupported type 
            parameter.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.NotSupportedTypeParameterException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.NotSupportedTypeParameterException"/> class.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.NotSupportedTypeParameterException.#ctor(System.String)">
            <summary> Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.NotSupportedTypeParameterException"/> class with a 
            specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.NotSupportedTypeParameterException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.NotSupportedTypeParameterException"/> class with a 
            specified error message and a reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a 
            <see langword="null"/> reference if no inner exception is specified.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.NotSupportedTypeParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.NotSupportedTypeParameterException"/> class with 
            serialized data.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the 
            exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source
            or destination.</param>
        </member>
        <member name="T:OscarBrouwer.Framework.Linq.Extensions">
            <summary>This class contains some all-purpose extension-methods.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Linq.Extensions.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>Adds an overload for the Linq-method 'SingleOrDefault' which lets the user define the default value 
            that must be returned when the standard 'SingleOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns>The single element of the input sequence that satisfies the condition, or 
            <paramref name="defaultValue"/> if no such element is found.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Linq.Extensions.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>Adds an overload for the Linq-method 'ElementAtOrDefault' which lets the user define the default value 
            that must be returned when the standard 'ElementAtOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element from.</param>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns><paramref name="defaultValue"/> if the index is outside the bounds of the source sequence; otherwise, 
            the element at the specified position in the source sequence.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Linq.Extensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Adds an overload for the Linq-method 'FirstOrDefault' which lets the user define the default value 
            that must be returned when the standard 'FirstOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element from.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns>The first element of the input sequence, or <paramref name="defaultValue"/> if no such element is 
            found.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Linq.Extensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>Adds an overload for the Linq-method 'FirstOrDefault' which lets the user define the default value 
            that must be returned when the standard 'FirstOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns>The first element of the input sequence that satisfies the condition, or 
            <paramref name="defaultValue"/> if no such element is found.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Linq.Extensions.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Adds an overload for the Linq-method 'LastOrDefault' which lets the user define the default value 
            that must be returned when the standard 'LastOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element from.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns>The last element of the input sequence, or <paramref name="defaultValue"/> if no such element is 
            found.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Linq.Extensions.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>Adds an overload for the Linq-method 'LastOrDefault' which lets the user define the default value 
            that must be returned when the standard 'LastOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns>The last element of the input sequence that satisfies the condition, or 
            <paramref name="defaultValue"/> if no such element is found.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Linq.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>Performs an operation on each member in <paramref name="source"/>.</summary>
            <typeparam name="T">The type of element that is stored in the enumerable.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to perform the operations on.</param>
            <param name="action">The operation that must be performed for each item in the enumerable.</param>
            <exception cref="T:System.ArgumentNullException">One or more of the parameters are null.</exception>
        </member>
        <member name="T:OscarBrouwer.Framework.EventArgs`1">
            <summary>Represents a generic type of <see cref="T:System.EventArgs"/> that holds a single value.</summary>
            <typeparam name="T">The type of the value that is passed with the event.</typeparam>
        </member>
        <member name="F:OscarBrouwer.Framework.EventArgs`1.eventValue">
            <summary>The instance that must be passed to the eventhandler.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.EventArgs`1.#ctor(`0)">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.EventArgs`1"/> class.</summary>
            <param name="eventValue">The value that must be passed to the eventhandler.</param>
        </member>
        <member name="P:OscarBrouwer.Framework.EventArgs`1.EventValue">
            <summary>Gets the value that is passed to the eventhandler.</summary>
        </member>
    </members>
</doc>
