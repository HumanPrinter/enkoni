<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OscarBrouwer.Framework.Entities</name>
    </assembly>
    <members>
        <member name="T:OscarBrouwer.Framework.Entities.IEntity">
            <summary>Defines the basic signature of an entity-type.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.IEntity.CopyFrom(OscarBrouwer.Framework.Entities.IEntity)">
            <summary>Copies the values from <paramref name="source"/> into this instance.</summary>
            <param name="source">The entity that contains the desired values.</param>
        </member>
        <member name="P:OscarBrouwer.Framework.Entities.IEntity.RecordId">
            <summary>Gets the record-ID of the entity.</summary>
        </member>
        <member name="T:OscarBrouwer.Framework.Entities.EntityValidator`1">
            <summary>This abstract class defines the public API of a class that can validate entities.</summary>
            <typeparam name="T">The type of entity that must be validated.</typeparam>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.EntityValidator`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.Entities.EntityValidator`1"/> class.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.EntityValidator`1.PerformShallowValidation(`0)">
            <summary>Performs a shallow validation of the specified entity. This will only validate the consistency of the 
            entity itself without looking at the references to other entities or the underlying persistency.</summary>
            <param name="entity">The entity that must be validated.</param>
            <returns>The results of the validation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> is null.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.EntityValidator`1.PerformDeepValidation(`0)">
            <summary>Performs a deep validation of the specified entity. Besides performing a shallow validation, it may 
            also look at the underlying persistency for instance to make sure that no uniqueness-rules are violated.
            </summary>
            <param name="entity">The entity that must be validated.</param>
            <returns>The results of the validation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="entity"/> is null.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.EntityValidator`1.PerformShallowValidationCore(`0)">
            <summary>Performs a shallow validation of the entity.</summary>
            <param name="entity">The entity that must be validated.</param>
            <returns>The result of the validation.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.EntityValidator`1.PerformDeepValidationCore(`0)">
            <summary>Performs a deep validation of the entity.</summary>
            <param name="entity">The entity that must be validated.</param>
            <returns>The result of the validation.</returns>
        </member>
        <member name="T:OscarBrouwer.Framework.Entities.SubDomainModel`1">
            <summary>This abstract class defines the public API of a class that represents the subdomain of the domain model.
            </summary>
            <typeparam name="T">The type to which this subdomain applies.</typeparam>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.SubDomainModel`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.Entities.SubDomainModel`1"/> class.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.SubDomainModel`1.CreateEmptyEntity">
            <summary>Creates an empty instance of type T.</summary>
            <returns>The created instance.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.SubDomainModel`1.FindEntities(OscarBrouwer.Framework.ISpecification{`0})">
            <summary>Finds all the entities that match the specified specification.</summary>
            <param name="searchSpecification">The specification that desribes the query that must be performed.</param>
            <returns>The found entities or an empty list if there were no results.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.SubDomainModel`1.FindEntity(OscarBrouwer.Framework.ISpecification{`0})">
            <summary>Finds one entities that matches the specified specification.</summary>
            <param name="searchSpecification">The specification that desribes the query that must be performed.</param>
            <returns>The found entity or <see langword="null"/> if there was no result.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.SubDomainModel`1.FindEntityById(System.Int32)">
            <summary>Finds one entities with the specified entity-ID.</summary>
            <param name="entityId">The ID of the entity that must be found.</param>
            <returns>The found entity or <see langword="null"/> if there was no result.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.SubDomainModel`1.AddEntity(`0)">
            <summary>Adds the specified entity to the domain. Before it is added, the entity is validated to ensure that 
            only validated entities are added in the domain.</summary>
            <param name="entity">The entity that must be added.</param>
            <exception cref="T:OscarBrouwer.Framework.Validation.ValidationException">The entity is invalid.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.SubDomainModel`1.UpdateEntity(System.Int32,`0)">
            <summary>Updates the specified entity in the domain. Before it is updated, the entity is validated to ensure that 
            only validated entities are added in the domain.</summary>
            <param name="originalEntityId">The ID of the entity that must be updated.</param>
            <param name="updatedEntity">The entity that contains the new values.</param>
            <exception cref="T:OscarBrouwer.Framework.Validation.ValidationException">The entity is invalid.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.SubDomainModel`1.DeleteEntity(System.Int32)">
            <summary>Removes the entity from the domain.</summary>
            <param name="originalEntityId">The ID of the entity that must be removed.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.SubDomainModel`1.CreateEmptyEntityCore">
            <summary>Creates an empty instance of type T.</summary>
            <returns>The created instance.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.SubDomainModel`1.FindEntitiesCore(System.Func{`0,System.Boolean})">
            <summary>Finds all the entities that match the specified specification.</summary>
            <param name="query">The specification that desribes the query that must be performed.</param>
            <returns>The found entities or an empty list if there were no results.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.SubDomainModel`1.FindEntityCore(System.Func{`0,System.Boolean})">
            <summary>Finds one entities that matches the specified specification.</summary>
            <param name="query">The specification that desribes the query that must be performed.</param>
            <returns>The found entity or <see langword="null"/> if there was no result.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.SubDomainModel`1.ValidateEntity(`0)">
            <summary>Validates the entity.</summary>
            <param name="entity">The entity that must be validated.</param>
            <returns>The results of the validation.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.SubDomainModel`1.AddEntityCore(`0)">
            <summary>Adds the entity to the domain.</summary>
            <param name="entity">The entity that must be added.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.SubDomainModel`1.UpdateEntityCore(`0)">
            <summary>Updates the entity in the domain.</summary>
            <param name="entity">The entity that must is updated.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.SubDomainModel`1.DeleteEntityCore(`0)">
            <summary>Removes the entity from the domain.</summary>
            <param name="entity">The entity that must be removed.</param>
        </member>
        <member name="T:OscarBrouwer.Framework.Entities.DomainModel">
            <summary>This class defines the public API of a class that represents a domainmodel.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.DomainModel.#ctor">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.Entities.DomainModel"/> class.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.DomainModel.PersistencyExists">
            <summary>Determines if the underlying persistency already exists.</summary>
            <returns><see langword="true"/> if the persistency exists; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.DomainModel.CreatePersistency">
            <summary>Creates the underlying persistency if it does not yet already exist.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.DomainModel.ClearPersistency">
            <summary>Clears the underlying persistency.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.DomainModel.GetSubDomain``1">
            <summary>Returns the subdomain of a specific type that can be used to perform CRUD-operations on that type.
            </summary>
            <typeparam name="T">The type for which the subdomain must be returned.</typeparam>
            <returns>The SubDomain.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.DomainModel.RetrieveDomainSpecificationFactory``1">
            <summary>Retrieves the <see cref="T:OscarBrouwer.Framework.SpecificationFactory`1"/> that can be used to build specifications to search
            for entities.</summary>
            <typeparam name="T">The type of entity that must be handled by the specification.</typeparam>
            <returns>The specification-factory.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.DomainModel.PersistencyExistsCore">
            <summary>Determines if the underlying persistency already exists.</summary>
            <returns><see langword="true"/> if the persistency exists; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.DomainModel.CreatePersistencyCore">
            <summary>Creates the underlying persistency.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.DomainModel.ClearPersistencyCore">
            <summary>Clears the underlying persistency.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.DomainModel.GetSubDomainCore``1">
            <summary>Returns the subdomain of a specific type that can be used to perform CRUD-operations on that type.
            </summary>
            <typeparam name="T">The type for which the subdomain must be returned.</typeparam>
            <returns>The appropriate SubDomainModel.</returns>
        </member>
        <member name="T:OscarBrouwer.Framework.Entities.Repository`1">
            <summary>This abstract class defines the API of a repository that is capable of accessing specific types in a 
            persistency.</summary>
            <typeparam name="T">The type of entity that is managed by the repository.</typeparam>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.Repository`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:OscarBrouwer.Framework.Entities.Repository`1"/> class.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.Repository`1.SaveChanges">
            <summary>Saves all the changes to the underlying persistency.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.Repository`1.CreateEntity">
            <summary>Creates a new entity. To add the entity to the repository, use the <see cref="M:AddEntity(T)"/> 
            method with the returned value.</summary>
            <returns>The newly created entity.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.Repository`1.AddEntity(`0)">
            <summary>Adds a new entity to the repository. Call <see cref="M:SaveChanges()"/> to make the addition
            permanent.</summary>
            <param name="entity">The entity that must be added to the repository.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entity"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.Repository`1.UpdateEntity(`0)">
            <summary>Updates the repository with the changes made to the entity. Call <see cref="M:SaveChanges()"/> to make
            the changes permanent.</summary>
            <param name="entity">The entity whose members are updated.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entity"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.Repository`1.DeleteEntity(`0)">
            <summary>Deletes the entity from the repository. Call <see cref="M:SaveChanges()"/> to make the changes 
            permanent.</summary>
            <param name="entity">The entity that must be deleted.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entity"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.Repository`1.FindAll">
            <summary>Finds all the entities of type <typeparamref name="T"/>.</summary>
            <returns>All the available entities.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.Repository`1.FindAll(System.Func{`0,System.Boolean})">
            <summary>Finds all the available entities that match the specified expression.</summary>
            <param name="expression">The expression to which the entities must match.</param>
            <returns>The entities that match the specified expression.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="expression"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.Repository`1.FindSingle(System.Func{`0,System.Boolean})">
            <summary>Finds a single entity that matches the expression.</summary>
            <param name="expression">The expression to which the entity must match.</param>
            <returns>The found entity.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="expression"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.Repository`1.FindFirst(System.Func{`0,System.Boolean})">
            <summary>Finds the first entity that matches the expression.</summary>
            <param name="expression">The expression to which the entity must match.</param>
            <returns>The found entity.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="expression"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.Repository`1.CreateLikeExpression">
            <summary>Creates an expression that executes a 'Like' comparison. This type of comparison checks if a 
            text-field matches a given pattern. The returned expression uses the field that must be matched as the first 
            input parameter and the pattern as the second input parameter.</summary>
            <example>
            <![CDATA[
            IEnumerable<MyType> source;
            Func<bool, string, string> expr = CreateLikeExpression();
            IEnumerable<MyType> result = source.Where(s=>expression(s.SomeStringField, "a?"));
            ]]>
            </example>
            <returns>The created expression.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.Repository`1.SaveChangesCore">
            <summary>Saves all the changes to the underlying persistency.</summary>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.Repository`1.CreateEntityCore">
            <summary>Creates a new entity.</summary>
            <returns>The newly created entity.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.Repository`1.AddEntityCore(`0)">
            <summary>Adds a new entity to the repository.</summary>
            <param name="entity">The entity that must be added to the repository.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.Repository`1.UpdateEntityCore(`0)">
            <summary>Updates the repository with the changes made to the entity.</summary>
            <param name="entity">The entity whose members are updated.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.Repository`1.DeleteEntityCore(`0)">
            <summary>Deletes the entity from the repository.</summary>
            <param name="entity">The entity that must be deleted.</param>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.Repository`1.FindAllCore">
            <summary>Finds all the entities of type <typeparamref name="T"/>.</summary>
            <returns>All the available entities.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.Repository`1.FindAllCore(System.Func{`0,System.Boolean})">
            <summary>Finds all the available entities that match the specified expression.</summary>
            <param name="expression">The expression to which the entities must match.</param>
            <returns>The entities that match the specified expression.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.Repository`1.FindSingleCore(System.Func{`0,System.Boolean})">
            <summary>Finds a single entity that matches the expression.</summary>
            <param name="expression">The expression to which the entity must match.</param>
            <returns>The found entity.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.Repository`1.FindFirstCore(System.Func{`0,System.Boolean})">
            <summary>Finds the first single entity that matches the expression.</summary>
            <param name="expression">The expression to which the entity must match.</param>
            <returns>The found entity.</returns>
        </member>
        <member name="M:OscarBrouwer.Framework.Entities.Repository`1.CreateLikeExpressionCore">
            <summary>Creates an expression that executes a 'Like' comparison.</summary>
            <returns>The created expression.</returns>
        </member>
        <member name="P:OscarBrouwer.Framework.Entities.Repository`1.Validator">
            <summary>Gets or sets the instance that must be used to validate the entities before adding or updating them in
            the repository.</summary>
        </member>
        <member name="P:OscarBrouwer.Framework.Entities.Repository`1.SinglePositionWildcard">
            <summary>Gets the wildcard that is used to match a single character.</summary>
        </member>
        <member name="P:OscarBrouwer.Framework.Entities.Repository`1.MultiplePositionWildcard">
            <summary>Gets the wildcard that is used to match zero or more character.</summary>
        </member>
    </members>
</doc>
