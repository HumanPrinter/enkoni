<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Enkoni.Framework.Entities.Database</name>
    </assembly>
    <members>
        <member name="T:Enkoni.Framework.Entities.ShallowDatabaseRepository`1">
            <summary>This class extends the <see cref="T:Enkoni.Framework.Entities.DatabaseRepository`1"/> class and implements some of the functionality using the Entity 
            Framework. The repository can be used for types that only need to be created, but not saved or retrieved as this is done by the parent-type's
            repository.</summary>
            <typeparam name="TEntity">The type of the entity that is handled by this repository.</typeparam>
        </member>
        <member name="T:Enkoni.Framework.Entities.DatabaseRepository`1">
            <summary>This abstract class extends the abstract <see cref="T:Enkoni.Framework.Entities.Repository`1"/> class and implements some of the functionality using the Entity 
            Framework.</summary>
            <typeparam name="TEntity">The type of the entity that is handled by this repository.</typeparam>
        </member>
        <member name="T:Enkoni.Framework.Entities.IDatabaseRepository">
            <summary>This interface is used as a marker by the RepositoryFactory.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.IDatabaseRepository.ReloadObjectContext(System.Data.Entity.DbContext)">
            <summary>Replaces the current DbContext with the specified one. The current DbContext is first disposed.</summary>
            <param name="dbContext">The new DbContext that must be used.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.#ctor(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.DatabaseRepository`1"/> class using the specified <see cref="T:Enkoni.Framework.Entities.DataSourceInfo"/>.
            </summary>
            <param name="dataSourceInfo">The datasource information that must be used to access the database.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.ReloadObjectContext(System.Data.Entity.DbContext)">
            <summary>Replaces the current DbContext with the specified one. The current DbContext is first disposed.</summary>
            <param name="dbContext">The new DbContext that must be used.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.SaveChangesCore(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Submits all the changes to the database.</summary>
            <param name="dataSourceInfo">Information about the datasource that may not have been set at an earlier stage.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.CreateEntityCore(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Creates a new entity of type <typeparamref name="TEntity"/>. This is done by calling the default constructor of 
            <typeparamref name="TEntity"/>.</summary>
            <param name="dataSourceInfo">Information about the datasource that may not have been set at an earlier stage.</param>
            <returns>The created entity.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.AddEntityCore(`0,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Inserts a new entity to the repository.</summary>
            <param name="entity">The entity that must be added.</param>
            <param name="dataSourceInfo">Information about the datasource that may not have been set at an earlier stage.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entity"/> is <see langword="null"/>.</exception>
            <returns>The entity with the most recent values.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.UpdateEntityCore(`0,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Updates the repository with the changes made to <paramref name="entity"/>. Since the entity framework already monitors the state of 
            entities, no additional functionality is required. This method is therefore empty.</summary>
            <param name="entity">The entity that was updated.</param>
            <param name="dataSourceInfo">Information about the datasource that may not have been set at an earlier stage.</param>
            <returns>The entity with the most recent values.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.DeleteEntityCore(`0,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Deletes an entity from the repository.</summary>
            <param name="entity">The entity that must be deleted.</param>
            <param name="dataSourceInfo">Information about the datasource that may not have been set at an earlier stage.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="entity"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.FindAllCore(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Enkoni.Framework.SortSpecifications{`0},System.Int32,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Finds all the available entities that match the specified expression.</summary>
            <param name="expression">The expression to which the entities must match.</param>
            <param name="sortRules">The specification of the sortrules that must be applied. Use <see langword="null"/> to ignore the ordering.</param>
            <param name="maximumResults">The maximum number of results that must be retrieved. Use '-1' to retrieve all results.</param>
            <param name="dataSourceInfo">Information about the datasource that may not have been set at an earlier stage.</param>
            <returns>The entities that match the specified expression.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.FindSingleCore(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Enkoni.Framework.Entities.DataSourceInfo,`0)">
            <summary>Finds a single entity that matches the expression. If no result was found, the specified default-value is returned.</summary>
            <param name="expression">The expression to which the entity must match.</param>
            <param name="dataSourceInfo">Information about the datasource that may not have been set at an earlier stage.</param>
            <param name="defaultValue">The value that will be returned when no match was found.</param>
            <returns>The found entity or <paramref name="defaultValue"/> if there was no result.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.FindFirstCore(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},Enkoni.Framework.SortSpecifications{`0},Enkoni.Framework.Entities.DataSourceInfo,`0)">
            <summary>Finds the first entity that matches the expression. If no result was found, the specified default-value is returned.</summary>
            <param name="expression">The expression to which the entity must match.</param>
            <param name="sortRules">The specification of the sortrules that must be applied. Use <see langword="null"/> to ignore the ordering.</param>
            <param name="dataSourceInfo">Information about the datasource that may not have been set at an earlier stage.</param>
            <param name="defaultValue">The value that will be returned when no match was found.</param>
            <returns>The found entity or <paramref name="defaultValue"/> if there was no result.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.CreateLikeExpressionCore(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
            <summary>Creates a LIKE-expression using the specified field and searchpattern.</summary>
            <param name="field">The field of type <c>T</c> that must match the pattern.</param>
            <param name="pattern">The pattern to which the field must apply. The pattern may contain a '*' and '?' wildcard.</param>
            <returns>The created expression.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseRepository`1.SelectDbContext(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Selects the DbContext that must be used. If the specified DataSourceInfo contains a valid DbContext, it is used; otherwise the value 
            of the property 'DbContext' is used.</summary>
            <param name="dataSourceInfo">Any information regarding the database that is used as datasource.</param>
            <returns>The DbContext that must be used.</returns>
        </member>
        <member name="P:Enkoni.Framework.Entities.DatabaseRepository`1.DbContext">
            <summary>Gets the DbContext that is used to access the database.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.ShallowDatabaseRepository`1.#ctor(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.ShallowDatabaseRepository`1"/> class using the specified
            <see cref="T:Enkoni.Framework.Entities.DataSourceInfo"/>.</summary>
            <param name="dataSourceInfo">The datasource information that must be used to access the database.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.ShallowDatabaseRepository`1.AddEntityCore(`0,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Since addition of entities will be handled by the parent entity's repository, nothing is done here.</summary>
            <param name="entity">The entity that is to be added.</param>
            <param name="dataSourceInfo">Information about the datasource that may not have been set at an earlier stage.</param>
            <returns>The entity with the most recent values.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.ShallowDatabaseRepository`1.UpdateEntityCore(`0,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Since updating of entities will be handled by the parent entity's repository, nothing is done here.</summary>
            <param name="entity">The entity that is to be updated.</param>
            <param name="dataSourceInfo">Information about the datasource that may not have been set at an earlier stage.</param>
            <returns>The entity with the most recent values.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.ShallowDatabaseRepository`1.DeleteEntityCore(`0,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Since deletion of entities will be handled by the parent entity's repository, nothing is done here.</summary>
            <param name="entity">The entity that is to be deleted.</param>
            <param name="dataSourceInfo">Information about the datasource that may not have been set at an earlier stage.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.ShallowDatabaseRepository`1.SaveChangesCore(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Since any changes to these entities will be handled by the parent entity's repository, nothing is done here.</summary>
            <param name="dataSourceInfo">Information about the datasource that may not have been set at an earlier stage.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.ShallowDatabaseRepository`1.FindAllCore(System.Func{`0,System.Boolean},Enkoni.Framework.SortSpecifications{`0},System.Int32,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Since retrieval of these entities is handled by the parent entity's repository, this method throws a
            <see cref="T:System.NotSupportedException"/>.</summary>
            <param name="expression">The parameter is not used.</param>
            <param name="sortRules">The specification of the sortrules that must be applied. Use <see langword="null"/> to ignore the ordering.</param>
            <param name="maximumResults">The maximum number of results that must be retrieved. Use '-1' to retrieve all results.</param>
            <param name="dataSourceInfo">Information about the datasource that may not have been set at an earlier stage.</param>
            <returns>Not applicable.</returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:Enkoni.Framework.Entities.ShallowDatabaseRepository`1.FindFirstCore(System.Func{`0,System.Boolean},Enkoni.Framework.SortSpecifications{`0},Enkoni.Framework.Entities.DataSourceInfo,`0)">
            <summary>Since retrieval of the entity is handled by the parent entity's repository, this method throws a
            <see cref="T:System.NotSupportedException"/>.</summary>
            <param name="expression">The parameter is not used.</param>
            <param name="sortRules">The specification of the sortrules that must be applied. Use <see langword="null"/> to ignore the ordering.</param>
            <param name="dataSourceInfo">Information about the datasource that may not have been set at an earlier stage.</param>
            <param name="defaultValue">The parameter is not used.</param>
            <returns>Not applicable.</returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="M:Enkoni.Framework.Entities.ShallowDatabaseRepository`1.FindSingleCore(System.Func{`0,System.Boolean},Enkoni.Framework.Entities.DataSourceInfo,`0)">
            <summary>Since retrieval of the entity is handled by the parent entity's repository, this method throws a
            <see cref="T:System.NotSupportedException"/>.</summary>
            <param name="expression">The parameter is not used.</param>
            <param name="dataSourceInfo">Information about the datasource that may not have been set at an earlier stage.</param>
            <param name="defaultValue">The parameter is not used.</param>
            <returns>Not applicable.</returns>
            <exception cref="T:System.NotSupportedException">Always.</exception>
        </member>
        <member name="T:Enkoni.Framework.Entities.DatabaseSourceInfo">
            <summary>This class can be used by the <see cref="T:Enkoni.Framework.Entities.DatabaseRepository`1"/> to retrieve valuable information about the database that is to 
            be used. This class is added for improved usability of the DataSourceInfo in combination with the DatabaseRepository.</summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.DatabaseSourceInfo.DbContextKey">
            <summary>Defines the key that is used to store and retrieve the DbContext.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseSourceInfo.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.DatabaseSourceInfo"/> class using a default value of <see langword="null"/> for the 
            DbContext.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseSourceInfo.#ctor(System.Data.Entity.DbContext)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.DatabaseSourceInfo"/> class using the specified <see cref="P:Enkoni.Framework.Entities.DatabaseSourceInfo.DbContext"/> instance.
            </summary>
            <param name="dbContext">The database context that must be use to communicate with the database.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseSourceInfo.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.DatabaseSourceInfo"/> class using the specified default values. If the default values 
            do not specify the DbContext using the correct key and/or type, the value <see langword="null"/> will be used.</summary>
            <param name="defaultValues">The default values that are to be used.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseSourceInfo.IsDbContextSpecified(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Determines if the DbContext is specified in the source information.</summary>
            <param name="dataSourceInfo">The datasource information that is queried.</param>
            <returns><see langword="true"/> if the DbContext is defined; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseSourceInfo.SelectDbContext(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Selects the DbContext from the specified datasource information.</summary>
            <param name="dataSourceInfo">The datasource information that is queried.</param>
            <returns>The DbContext that is stored in the datasource information or <see langword="null"/> if the DbContext could not be found.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.DatabaseSourceInfo.IsDbContextSpecified">
            <summary>Determines if the DbContext is specified in the source information.</summary>
            <returns><see langword="true"/> if the DbContext is defined; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="P:Enkoni.Framework.Entities.DatabaseSourceInfo.DbContext">
            <summary>Gets or sets the DbContext that is to be used by the DatabaseRepository.</summary>
        </member>
    </members>
</doc>
