<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Enkoni.Framework</name>
    </assembly>
    <members>
        <member name="T:Enkoni.Framework.LambdaSpecification`1">
            <summary>This class implements a specific Specification-type that uses a lambda expression to define the desired specification.</summary>
            <typeparam name="T">The type of object to which the specification applies.</typeparam>
        </member>
        <member name="T:Enkoni.Framework.Specification`1">
            <summary>This class contains the basic functionality for any specification-class.</summary>
            <typeparam name="T">The type of object that is ultimately selected by the specification.</typeparam>
        </member>
        <member name="T:Enkoni.Framework.ISpecification`1">
            <summary>This interface describes the public API of the classes that make up the specification subsystem that is implemented using the 
            Specification Pattern.</summary>
            <typeparam name="T">The type of object that is ultimatilly selected by the specification.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.ISpecification`1.And(Enkoni.Framework.ISpecification{`0})">
            <summary>Creates an 'And' specification that can be used to combine two specifications and compare them using the '&amp;&amp;' operation.
            </summary>
            <param name="specification">The specification that must be combined.</param>
            <returns>The combined specification.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISpecification`1.Or(Enkoni.Framework.ISpecification{`0})">
            <summary>Creates an 'Or' specification that can be used to combine two specifications and compare them using the '||' operation.</summary>
            <param name="specification">The specification that must be combined.</param>
            <returns>The combined specification.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISpecification`1.SetMaximumResults(System.Int32)">
            <summary>Sets the maximum number of records that must be retrieved using the specification.</summary>
            <param name="maximum">The maximum number. A value of '-1' means 'retrieve all'.</param>
        </member>
        <member name="M:Enkoni.Framework.ISpecification`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>Specifies the way the sequence must be sorted. It used a default sortorder of ascending.</summary>
            <typeparam name="TKey">The type of object that must be used to perform the sorting.</typeparam>
            <param name="keySelector">The expression that points to the field that must be used to perform the sorting.</param>
            <returns>The specification with the sortingrules.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISpecification`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Enkoni.Framework.SortOrder)">
            <summary>Specifies the way the sequence must be sorted.</summary>
            <typeparam name="TKey">The type of object that must be used to perform the sorting.</typeparam>
            <param name="keySelector">The expression that points to the field that must be used to perform the sorting.</param>
            <param name="direction">The direction that the ordering must take place in.</param>
            <returns>The specification with the sortingrules.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISpecification`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>Specifies the way the sequence must be sorted. It used a default sortorder of descending.</summary>
            <typeparam name="TKey">The type of object that must be used to perform the sorting.</typeparam>
            <param name="keySelector">The expression that points to the field that must be used to perform the sorting.</param>
            <returns>The specification with the sortingrules.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISpecification`1.Visit(Enkoni.Framework.ISpecificationVisitor{`0})">
            <summary>Visits the specification and lets <paramref name="visitor"/> convert the contents of the specification into an expression that can 
            be used to perform the actual filtering/selection.</summary>
            <param name="visitor">The instance that will perform the conversion.</param>
            <returns>The expression that was created using this specification.</returns>
        </member>
        <member name="E:Enkoni.Framework.ISpecification`1.MaximumResultsUpdated">
            <summary>Occurs when the maximum number of records has changed.</summary>
        </member>
        <member name="E:Enkoni.Framework.ISpecification`1.SortRulesUpdated">
            <summary>Occurs when the sorting rules have changed.</summary>
        </member>
        <member name="P:Enkoni.Framework.ISpecification`1.MaximumResults">
            <summary>Gets the maximum number of results that must be returned by the specification.</summary>
        </member>
        <member name="P:Enkoni.Framework.ISpecification`1.SortRules">
            <summary>Gets the sorting rules.</summary>
        </member>
        <member name="F:Enkoni.Framework.Specification`1.maxResultsUpdated">
            <summary>The delegate that holds the references to the various eventhandlers. Normally, there will be at most one handler.</summary>
        </member>
        <member name="F:Enkoni.Framework.Specification`1.maxResultsChangePending">
            <summary>Indicates if there is a change-event pending.</summary>
        </member>
        <member name="F:Enkoni.Framework.Specification`1.sortRulesUpdated">
            <summary>The delegate that holds the references to the various eventhandlers. Normally, there will be at most one handler.</summary>
        </member>
        <member name="F:Enkoni.Framework.Specification`1.sortRulesChangePending">
            <summary>Indicates if there is a change-event pending.</summary>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Specification`1"/> class.</summary>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.SetMaximumResults(System.Int32)">
            <summary>Sets the maximum number of records that must be retrieved using the specification.</summary>
            <param name="maximum">The maximum number. A value of '-1' means 'retrieve all'.</param>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>Specifies the way the sequence must be sorted. It used a default sortorder of ascending.</summary>
            <typeparam name="TKey">The type of object that must be used to perform the sorting.</typeparam>
            <param name="keySelector">The expression that points to the field that must be used to perform the sorting.</param>
            <returns>The specification with the sortingrules.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>Specifies the way the sequence must be sorted. It used a default sortorder of descending.</summary>
            <typeparam name="TKey">The type of object that must be used to perform the sorting.</typeparam>
            <param name="keySelector">The expression that points to the field that must be used to perform the sorting.</param>
            <returns>The specification with the sortingrules.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Enkoni.Framework.SortOrder)">
            <summary>Specifies the way the sequence must be sorted.</summary>
            <typeparam name="TKey">The type of object that must be used to perform the sorting.</typeparam>
            <param name="keySelector">The expression that points to the field that must be used to perform the sorting.</param>
            <param name="direction">The direction that the ordering must take place in.</param>
            <returns>The specification with the sortingrules.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.OrderBy(Enkoni.Framework.SortSpecifications{`0})">
            <summary>Specifies the way the sequence must be sorted.</summary>
            <param name="sortSpecifications">The specifications that define the way the sequence must be sorted.</param>
            <returns>The specification with the sortingrules.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.And(Enkoni.Framework.ISpecification{`0})">
            <summary>Creates an 'And' specification that can be used to combine two specifications and compare them using the '&amp;&amp;' operation.
            </summary>
            <param name="specification">The specification that must be combined.</param>
            <returns>The combined specification.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.Or(Enkoni.Framework.ISpecification{`0})">
            <summary>Creates an 'Or' specification that can be used to combine two specifications and compare them using the '||' operation.</summary>
            <param name="specification">The specification that must be combined.</param>
            <returns>The combined specification.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.Visit(Enkoni.Framework.ISpecificationVisitor{`0})">
            <summary>Visits the specification and lets <paramref name="visitor"/> convert the contents of the specification into an expression that can 
            be used to perform the actual filtering/selection.</summary>
            <param name="visitor">The instance that will perform the conversion.</param>
            <returns>The expression that was created using this specification.</returns>
            <exception cref="T:System.ArgumentNullException">Parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.HandleMaximumResultsUpdated(System.Object,Enkoni.Framework.EventArgs{System.Int32})">
            <summary>Handles the occurence of a changed maximum for the number of records that must be retrieved.</summary>
            <param name="sender">The object that raised the event.</param>
            <param name="args">Some additional information regarding the event.</param>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.HandleOrderByRulesUpdated(System.Object,Enkoni.Framework.SortSpecificationsEventArgs{`0})">
            <summary>Handles the occurence of a changed set of sorting rules.</summary>
            <param name="sender">The object that raised the event.</param>
            <param name="args">Some additional information regarding the event.</param>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.VisitCore(Enkoni.Framework.ISpecificationVisitor{`0})">
            <summary>Visits the specification and lets <paramref name="visitor"/> convert the contents of the specification into an expression that can 
            be used to perform the actual filtering/selection.</summary>
            <param name="visitor">The instance that will perform the conversion.</param>
            <returns>The expression that was created using this specification.</returns>
        </member>
        <member name="E:Enkoni.Framework.Specification`1.MaximumResultsUpdated">
            <summary>Occurs when the maximum number of records has changed.</summary>
        </member>
        <member name="E:Enkoni.Framework.Specification`1.SortRulesUpdated">
            <summary>Occurs when the sortrules have been updated.</summary>
        </member>
        <member name="P:Enkoni.Framework.Specification`1.MaximumResults">
            <summary>Gets the maximum number of records that must be retrieved using this specification.</summary>
        </member>
        <member name="P:Enkoni.Framework.Specification`1.SortRules">
            <summary>Gets the sorting rules that are specified.</summary>
        </member>
        <member name="M:Enkoni.Framework.LambdaSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.LambdaSpecification`1"/> class.</summary>
            <param name="function">The function that equals the search pattern that is implemented by the type.</param>
        </member>
        <member name="M:Enkoni.Framework.LambdaSpecification`1.VisitCore(Enkoni.Framework.ISpecificationVisitor{`0})">
            <summary>Visits the specification and lets <paramref name="visitor"/> convert the contents of the specification into an expression that can 
            be used to perform the actual filtering/selection.</summary>
            <param name="visitor">The instance that will perform the conversion.</param>
            <returns>The expression that was created using this specification.</returns>
        </member>
        <member name="P:Enkoni.Framework.LambdaSpecification`1.Expression">
            <summary>Gets the function that equals the search-pattern that is implemented by this type.</summary>
        </member>
        <member name="T:Enkoni.Framework.IWorkflow">
            <summary>Represents a process or workflow that executes a defined task or set of tasks.</summary>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.Start">
            <summary>Tries to start the workflow. It blocks untill the workflow is started.</summary>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be started. Only when the workflow is in the state
            <see cref="F:Enkoni.Framework.WorkflowState.Init"/> or <see cref="F:Enkoni.Framework.WorkflowState.Stopped"/>, it can be started.</exception>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.Stop">
            <summary>Tries to stop the workflow. It blocks untill the workflow is stopped.</summary>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be stopped. Only when the workflow is in the state 
            <see cref="F:Enkoni.Framework.WorkflowState.Started"/>, <see cref="F:Enkoni.Framework.WorkflowState.Pausing"/> or <see cref="F:Enkoni.Framework.WorkflowState.Continued"/>, it can be stopped.</exception>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.Pause">
            <summary>Tries to pause the workflow. It blocks untill the workflow is paused.</summary>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and resuming.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be paused. Only when the workflow is in the state
            <see cref="F:Enkoni.Framework.WorkflowState.Started"/> or <see cref="F:Enkoni.Framework.WorkflowState.Continued"/>, it can be paused.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.Continue">
            <summary>Tries to continue the workflow. It blocks untill the workflow is continued.</summary>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and continuing.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be continued. Only when the workflow is in the
            state <see cref="F:Enkoni.Framework.WorkflowState.Paused"/>, it can be continued.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.BeginStart(System.AsyncCallback,System.Object)">
            <summary>Begins to start the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous start operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous start request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous start.</returns>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.EndStart(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous start to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be started. Only when the workflow is in the state 
            <see cref="F:Enkoni.Framework.WorkflowState.Init"/> or <see cref="F:Enkoni.Framework.WorkflowState.Stopped"/>, it can be started.</exception>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.BeginStop(System.AsyncCallback,System.Object)">
            <summary>Begins to stop the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous stop operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous stop request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous stop.</returns>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.EndStop(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous stop to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be stopped. Only when the workflow is in the state
            <see cref="F:Enkoni.Framework.WorkflowState.Started"/>, <see cref="F:Enkoni.Framework.WorkflowState.Pausing"/> or <see cref="F:Enkoni.Framework.WorkflowState.Continued"/>, it can be stopped.</exception>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.BeginPause(System.AsyncCallback,System.Object)">
            <summary>Begins to pause the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous pause operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous pause request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous pause.</returns>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.EndPause(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous pause to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and resuming.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be paused. Only when the workflow is in the state 
            <see cref="F:Enkoni.Framework.WorkflowState.Started"/> or <see cref="F:Enkoni.Framework.WorkflowState.Continued"/>, it can be paused.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.BeginContinue(System.AsyncCallback,System.Object)">
            <summary>Begins to continue the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous continue operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous continue request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous continue.</returns>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.EndContinue(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous continue to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and continuing.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be continued. Only when the workflow is in the 
            state <see cref="F:Enkoni.Framework.WorkflowState.Paused"/>, it can be continued.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="P:Enkoni.Framework.IWorkflow.CanPauseAndContinue">
            <summary>Gets a value indicating whether the workflow is able to pause and continue its internal processes. By default, a <b>Workflow</b> 
            cannot be paused or continued.</summary>
        </member>
        <member name="P:Enkoni.Framework.IWorkflow.State">
            <summary>Gets the current <see cref="T:Enkoni.Framework.WorkflowState"/> of the workflow.</summary>
        </member>
        <member name="T:Enkoni.Framework.Extensions">
            <summary>This class contains some all-purpose extension-methods.</summary>
        </member>
        <member name="M:Enkoni.Framework.Extensions.Clone``1(``0)">
            <summary>Returns a strong-typed clone of the instance.</summary>
            <typeparam name="T">The actual type of the instance that will be cloned.</typeparam>
            <param name="instance">The instance on which the clone-method will be invoked.</param>
            <returns>A typed clone of the instance.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.Fire(System.EventHandler,System.Object,System.EventArgs)">
            <summary>Fires an event in a sequential way. An eventhandler needs to finish before the next eventhandler will be called. This method will 
            return when all the eventhandlers have finished. <br/>
            This method will automatically check if there are any eventhandlers subscribed to <paramref name="handler"/> and it will automatically 
            propagate the call the the appropriate thread.</summary>
            <param name="handler">The multicast delegate that must be executed.</param>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Any metadata that must be passed to the eventhandlers.</param>
        </member>
        <member name="M:Enkoni.Framework.Extensions.Fire``1(System.EventHandler{``0},System.Object,``0)">
            <summary>Fires an event in a sequential way. An eventhandler needs to finish before the next eventhandler will be called. This method will 
            return when all the eventhandlers have finished. <br/>
            This method will automatically check if there are any eventhandlers subscribed to <paramref name="handler"/> and it will automatically 
            propagate the call the the appropriate thread.</summary>
            <typeparam name="T">The type of eventargs that is passed with the event.</typeparam>
            <param name="handler">The multicast delegate that must be executed.</param>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Any metadata that must be passed to the eventhandlers.</param>
        </member>
        <member name="M:Enkoni.Framework.Extensions.FireInParallel(System.EventHandler,System.Object,System.EventArgs)">
            <summary>Fires an event in a parallel way. This method will return when all the eventhandlers have finished.<br/>
            This method will automatically check if there are any eventhandlers subscribed to <paramref name="handler"/> and it will automatically 
            propagate the call the the appropriate thread.</summary>
            <param name="handler">The multicast delegate that must be executed.</param>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Any metadata that must be passed to the eventhandlers.</param>
        </member>
        <member name="M:Enkoni.Framework.Extensions.FireInParallel``1(System.EventHandler{``0},System.Object,``0)">
            <summary>Fires an event in a parallel way. This method will return when all the eventhandlers have finished.<br/>
            This method will automatically check if there are any eventhandlers subscribed to <paramref name="handler"/> and it will automatically 
            propagate the call the the appropriate thread.</summary>
            <typeparam name="T">The type of eventargs that is passed with the event.</typeparam>
            <param name="handler">The multicast delegate that must be executed.</param>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Any metadata that must be passed to the eventhandlers.</param>
        </member>
        <member name="M:Enkoni.Framework.Extensions.FireAsync(System.EventHandler,System.Object,System.EventArgs)">
            <summary>Fires an event in an asynchronous way. When this method returns, the eventhandlers may still be running.<br/>
            This method will automatically check if there are any eventhandlers subscribed to <paramref name="handler"/> and it will automatically 
            propagate the call the the appropriate thread.</summary>
            <param name="handler">The multicast delegate that must be executed.</param>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Any metadata that must be passed to the eventhandlers.</param>
        </member>
        <member name="M:Enkoni.Framework.Extensions.FireAsync``1(System.EventHandler{``0},System.Object,``0)">
            <summary>Fires an event in an asynchronous way. When this method returns, the eventhandlers may still be running.<br/>
            This method will automatically check if there are any eventhandlers subscribed to <paramref name="handler"/> and it will automatically 
            propagate the call the the appropriate thread.</summary>
            <typeparam name="T">The type of eventargs that is passed with the event.</typeparam>
            <param name="handler">The multicast delegate that must be executed.</param>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Any metadata that must be passed to the eventhandlers.</param>
        </member>
        <member name="M:Enkoni.Framework.Extensions.Capitalize(System.String)">
            <summary>Capitalizes the first letter of each word assuming that words are separated by a single space.</summary>
            <param name="source">The string that must be capitalized.</param>
            <returns>The capitalized string.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.Capitalize(System.String,System.Boolean)">
            <summary>Capitalizes the first letter of each word assuming that words are separated by a single space.</summary>
            <param name="source">The string that must be capitalized.</param>
            <param name="keepExistingCapitals">Indicates if any capitals that are already in the string must be preserved or must be lowered.</param>
            <returns>The capitalized string.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.Capitalize(System.String,System.Globalization.CultureInfo)">
            <summary>Capitalizes the first letter of each word assuming that words are separated by a single space.</summary>
            <param name="source">The string that must be capitalized.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object that supplies culture-specific casing rules.</param>
            <returns>The capitalized string.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.Capitalize(System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>Capitalizes the first letter of each word assuming that words are separated by a single space.</summary>
            <param name="source">The string that must be capitalized.</param>
            <param name="keepExistingCapitals">Indicates if any capitals that are already in the string must be preserved or must be lowered.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object that supplies culture-specific casing rules.</param>
            <returns>The capitalized string.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.GetWeekNumber(System.DateTime)">
            <summary>Determines the weeknumber of the given <see cref="T:System.DateTime"/> value using the ISO 8601 specification.</summary>
            <param name="source">The datetime of which the weeknumber must be determined.</param>
            <returns>The determined weeknumber.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.Remove``1(System.Collections.Generic.ICollection{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Adds an overload for the ICollection-method 'Remove(T)' which lets the user define a comparer that must be used.</summary>
            <typeparam name="T">The type of element that is stored in the collection.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.ICollection`1"/> to remove the item from.</param>
            <param name="item">The item that must be removed.</param>
            <param name="comparer">The comparer that must be used to find the appropriate item in the collection.</param>
            <returns><see langword="true"/> if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>. 
            This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">One or more parameters are null.</exception>
        </member>
        <member name="M:Enkoni.Framework.Extensions.IndexOf``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Adds an overload for the IList-method 'IndexOf(T)' which lets the user define a comparer to look for the desired item.</summary>
            <typeparam name="T">The type of element that is stored in the list.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> that must be searched.</param>
            <param name="item">The item that must be removed from the list.</param>
            <param name="comparer">The comparer that must be used to find the appropriate item in the list.</param>
            <returns>The index of <paramref name="item"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.IndexOf``1(System.Collections.Generic.List{``0},``0,System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Adds an overload for the List-method 'IndexOf(T, int)' which lets the user define a comparer to look for the desired item.</summary>
            <typeparam name="T">The type of element that is stored in the list.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.List`1"/> that must be searched.</param>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1"/>. The value can be <see langword="null"/> for reference types.</param>
            <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
            <param name="comparer">The comparer that must be used to find the appropriate item in the list.</param>
            <returns>The zero-based index of the first occurrence of item within the range of elements in the <see cref="T:System.Collections.Generic.List`1"/> that extends from 
            index to the last element, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="comparer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1"/>.
            </exception>
        </member>
        <member name="M:Enkoni.Framework.Extensions.IndexOf``1(System.Collections.Generic.List{``0},``0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Adds an overload for the List-method 'IndexOf(T, int, int)' which lets the user define a comparer to look for the desired item.
            </summary>
            <typeparam name="T">The type of element that is stored in the list.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.List`1"/> that must be searched.</param>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1"/>. The value can be <see langword="null"/> for reference types.</param>
            <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="comparer">The comparer that must be used to find the appropriate item in the list.</param>
            <returns>The zero-based index of the first occurrence of item within the range of elements in the <see cref="T:System.Collections.Generic.List`1"/> that starts at index 
            and contains count number of elements, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="comparer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> and <paramref name="count"/> do not specify a valid section in the 
            <see cref="T:System.Collections.Generic.List`1"/>.</exception>
        </member>
        <member name="M:Enkoni.Framework.Extensions.InvokeDelegate(System.Delegate,System.Object[])">
            <summary>Invokes a delegate. If required, the call is transfered to the appropriate thread.</summary>
            <param name="del">The delegate that must be invoked.</param>
            <param name="args">The arguments that must be passed to the delegate.</param>
        </member>
        <member name="M:Enkoni.Framework.Extensions.UnsafeFire(System.Delegate,System.Object[])">
            <summary>Invokes the subscribers of the specified delegate in a sequential way.</summary>
            <param name="del">The delegate whose subscribers must be invoked.</param>
            <param name="args">The arguments that must be passed to the delegate-subscribers.</param>
        </member>
        <member name="M:Enkoni.Framework.Extensions.UnsafeFireInParallel(System.Delegate,System.Object[])">
            <summary>Invokes the subscribers of the specified delegate in a parallel way.</summary>
            <param name="del">The delegate whose subscribers must be invoked.</param>
            <param name="args">The arguments that must be passed to the delegate-subscribers.</param>
        </member>
        <member name="M:Enkoni.Framework.Extensions.UnsafeFireAsync(System.Delegate,System.Object[])">
            <summary>Invokes the subscribers of the specified delegate in an asynchronous way.</summary>
            <param name="del">The delegate whose subscribers must be invoked.</param>
            <param name="args">The arguments that must be passed to the delegate-subscribers.</param>
        </member>
        <member name="T:Enkoni.Framework.SortSpecificationsEventArgs`1">
            <summary>Represents a generic type of <see cref="T:System.EventArgs"/> that holds a single value.</summary>
            <typeparam name="T">The type of the value that is passed with the event.</typeparam>
        </member>
        <member name="T:Enkoni.Framework.EventArgs`1">
            <summary>Represents a generic type of <see cref="T:System.EventArgs"/> that holds a single value.</summary>
            <typeparam name="T">The type of the value that is passed with the event.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.EventArgs`1.#ctor(`0)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.EventArgs`1"/> class.</summary>
            <param name="eventValue">The value that must be passed to the eventhandler.</param>
        </member>
        <member name="P:Enkoni.Framework.EventArgs`1.EventValue">
            <summary>Gets the value that is passed to the eventhandler.</summary>
        </member>
        <member name="M:Enkoni.Framework.SortSpecificationsEventArgs`1.#ctor(Enkoni.Framework.SortSpecifications{`0})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.SortSpecificationsEventArgs`1"/> class.</summary>
            <param name="eventValue">The value that must be passed to the eventhandler.</param>
        </member>
        <member name="T:Enkoni.Framework.NotSpecification`1">
            <summary>This class implements a specific Specification-type that uses a lambda expression to define the desired specification. The expression 
            must not be true in order for it to pass this specification.</summary>
            <typeparam name="T">The type of object to which the specification applies.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.NotSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.NotSpecification`1"/> class.</summary>
            <param name="function">The function that equals the search pattern that is implemented by the type.</param>
        </member>
        <member name="M:Enkoni.Framework.NotSpecification`1.#ctor(Enkoni.Framework.ISpecification{`0})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.NotSpecification`1"/> class.</summary>
            <param name="specification">The specification that must not be met.</param>
        </member>
        <member name="M:Enkoni.Framework.NotSpecification`1.VisitCore(Enkoni.Framework.ISpecificationVisitor{`0})">
            <summary>Visits the specification and lets <paramref name="visitor"/> convert the contents of the specification into an expression that can 
            be used to perform the actual filtering/selection.</summary>
            <param name="visitor">The instance that will perform the conversion.</param>
            <returns>The expression that was created using this specification.</returns>
        </member>
        <member name="P:Enkoni.Framework.NotSpecification`1.Specification">
            <summary>Gets the specification whose result must be negated.</summary>
        </member>
        <member name="T:Enkoni.Framework.LikeSpecification`1">
            <summary>This class defines a specification type that matches using a string-pattern.</summary>
            <typeparam name="T">The type of object to which the specification applies.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.LikeSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.LikeSpecification`1"/> class.</summary>
            <param name="field">The field that must match the pattern.</param>
            <param name="pattern">The search-pattern.</param>
        </member>
        <member name="M:Enkoni.Framework.LikeSpecification`1.VisitCore(Enkoni.Framework.ISpecificationVisitor{`0})">
            <summary>Visits the specification and lets <paramref name="visitor"/> convert the contents of the specification into an expression that can 
            be used to perform the actual filtering/selection.</summary>
            <param name="visitor">The instance that will perform the conversion.</param>
            <returns>The expression that was created using this specification.</returns>
        </member>
        <member name="P:Enkoni.Framework.LikeSpecification`1.Field">
            <summary>Gets the field that must match the pattern.</summary>
        </member>
        <member name="P:Enkoni.Framework.LikeSpecification`1.Pattern">
            <summary>Gets the search-pattern.</summary>
        </member>
        <member name="T:Enkoni.Framework.Specification">
            <summary>This class contains static members that would normally be part of the <see cref="T:Enkoni.Framework.Specification`1"/> class, but since that class is 
            generic the static members are placed in this non-generic counterpart to avoid possible confussion about the use of the methods.</summary>
        </member>
        <member name="M:Enkoni.Framework.Specification.All``1">
            <summary>Creates a specification that will return all available objects.</summary>
            <typeparam name="T">The type of object that is ultimately selected by the specification.</typeparam>
            <returns>A specification that will return all available objects.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification.None``1">
            <summary>Creates a specification that will return none of the available objects.</summary>
            <typeparam name="T">The type of object that is ultimately selected by the specification.</typeparam>
            <returns>A specification that will return none of the available objects.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification.Lambda``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>Creates a specification that will return the objects that match the specified expression.</summary>
            <typeparam name="T">The type of object that is ultimately selected by the specification.</typeparam>
            <param name="expression">The expression that acts as a filter.</param>
            <returns>A specification that will only return the objects that match the expression.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification.Like``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.String)">
            <summary>Creates a specification that will return the objects for which the specified field matches the specified pattern. The pattern 
            supports two types of wildcards. The '*' wildcard matches any character (zero or more times) and the '?' wildcard matches exactly one 
            character.</summary>
            <typeparam name="T">The type of object that is ultimately selected by the specification.</typeparam>
            <param name="field">The field that must match the expression.</param>
            <param name="pattern">The search-pattern.</param>
            <returns>A specification that will return only the objects for which the field matches the search-pattern.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>Creates a specification that will return the objects that do not match the specified expression.</summary>
            <typeparam name="T">The type of object that is ultimately selected by the specification.</typeparam>
            <param name="expression">The expression that acts as a filter.</param>
            <returns>A specification that will only return the objects that do not match the expression.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification.Not``1(Enkoni.Framework.ISpecification{``0})">
            <summary>Creates a specification that will return the objects that do not match the specified expression.</summary>
            <typeparam name="T">The type of object that is ultimately selected by the specification.</typeparam>
            <param name="specification">The specification that acts as a filter.</param>
            <returns>A specification that will only return the objects that do not match the specification.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification.BusinessRule``1(System.String,System.Object[])">
            <summary>Creates a specification that holds information about a businessrule that must be executed.</summary>
            <typeparam name="T">The type of object that is ultimately selected by the specification.</typeparam>
            <param name="ruleName">The name of the rule that must be executed.</param>
            <param name="ruleArguments">The arguments that must be used by the businessrule.</param>
            <returns>A specification that holds information about a businessrule.</returns>
        </member>
        <member name="T:Enkoni.Framework.OrSpecification`1">
            <summary>This class contains a specificationtype that combines two specifications using an OR operation.</summary>
            <typeparam name="T">The type of object that is ultimatilly selected by the specification.</typeparam>
        </member>
        <member name="T:Enkoni.Framework.CombinedSpecification`1">
            <summary>This abstract class defines the basic API of a specification-type that combines two specifications.</summary>
            <typeparam name="T">The type of object that is ultimatilly selected by the specification.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.CombinedSpecification`1.#ctor(Enkoni.Framework.ISpecification{`0},Enkoni.Framework.ISpecification{`0})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.CombinedSpecification`1"/> class.</summary>
            <param name="leftOperand">The left operand of the combination.</param>
            <param name="rightOperand">The right operand of the combination.</param>
        </member>
        <member name="P:Enkoni.Framework.CombinedSpecification`1.LeftOperand">
            <summary>Gets the left operand of the combination.</summary>
        </member>
        <member name="P:Enkoni.Framework.CombinedSpecification`1.RightOperand">
            <summary>Gets the right operand of the combination.</summary>
        </member>
        <member name="M:Enkoni.Framework.OrSpecification`1.#ctor(Enkoni.Framework.ISpecification{`0},Enkoni.Framework.ISpecification{`0})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.OrSpecification`1"/> class.</summary>
            <param name="leftOperand">The left operant of the combination.</param>
            <param name="rightOperand">The right operand of the combination.</param>
        </member>
        <member name="M:Enkoni.Framework.OrSpecification`1.VisitCore(Enkoni.Framework.ISpecificationVisitor{`0})">
            <summary>Visits the specification and lets <paramref name="visitor"/> convert the contents of the specification into an expression that can 
            be used to perform the actual filtering/selection.</summary>
            <param name="visitor">The instance that will perform the conversion.</param>
            <returns>The expression that was created using this specification.</returns>
        </member>
        <member name="T:Enkoni.Framework.ISortSpecification`1">
            <summary>Defines a type that is able to sort a collection using the specificationsystem.</summary>
            <typeparam name="T">The type of object that must be sorted.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.ISortSpecification`1.OrderBy(System.Linq.IQueryable{`0})">
            <summary>Sorts the elements of a sequence.</summary>
            <param name="query">The sequence that must be sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISortSpecification`1.OrderBy(System.Collections.Generic.IEnumerable{`0})">
            <summary>Sorts the elements of a sequence.</summary>
            <param name="query">The sequence that must be sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISortSpecification`1.ThenBy(System.Linq.IOrderedQueryable{`0})">
            <summary>Performs a subsequent ordering of the elements in a sequence.</summary>
            <param name="query">The sequence that must be sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISortSpecification`1.ThenBy(System.Linq.IOrderedEnumerable{`0})">
            <summary>Performs a subsequent ordering of the elements in a sequence.</summary>
            <param name="query">The sequence that must be sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="T:Enkoni.Framework.LambdaEqualityComparer`2">
            <summary>This class compares types based on a field of the type. By using this class, it is no longer required to create a specific equality 
            comparer to compare types using just one field.</summary>
            <typeparam name="T">The type of object that must be compared.</typeparam>
            <typeparam name="TField">The type of the field of <b>T</b> that must be used in the comparison.</typeparam>
        </member>
        <member name="F:Enkoni.Framework.LambdaEqualityComparer`2.fieldFunction">
            <summary>The function that gives access to the field.</summary>
        </member>
        <member name="M:Enkoni.Framework.LambdaEqualityComparer`2.#ctor(System.Func{`0,`1})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.LambdaEqualityComparer`2"/> class.</summary>
            <param name="field">The function that gives access to the field that must be used in the comparison.</param>
        </member>
        <member name="M:Enkoni.Framework.LambdaEqualityComparer`2.Equals(`0,`0)">
            <summary>Determines whether the specified objects are equal.</summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns><see langword="true"/> if the specified objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.LambdaEqualityComparer`2.GetHashCode(`0)">
            <summary>Returns a hash code for the specified object.</summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of obj is a reference type and obj is null.</exception>
        </member>
        <member name="T:Enkoni.Framework.Comparer`1">
            <summary>Provides a generic implementation of <see cref="T:System.Collections.Generic.IComparer`1"/> that is able to compare two objects based on a specified fieldname, 
            which can even be concatenated using the '.' character. The final field by which the objects must be compared must implement the 
            <c>CompareTo</c> method which is defined by the <see cref="T:System.IComparable"/> and <see cref="T:System.IComparable`1"/> interfaces.</summary>
            <typeparam name="T">The type of object that must be compared.</typeparam>
        </member>
        <member name="F:Enkoni.Framework.Comparer`1.fieldName">
            <summary>The field by which the objects must be ordered.</summary>
        </member>
        <member name="F:Enkoni.Framework.Comparer`1.order">
            <summary>The directtion of the order.</summary>
        </member>
        <member name="F:Enkoni.Framework.Comparer`1.compareDelegate">
            <summary>The Func-delegate that does the actual work.</summary>
        </member>
        <member name="M:Enkoni.Framework.Comparer`1.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Comparer`1"/> class that compares objects in an ascending order.</summary>
            <param name="fieldName">The field that must be used to compare two objects. Use the '.' character to specify a field that is deeper in the
            chain of hierachy.</param>
        </member>
        <member name="M:Enkoni.Framework.Comparer`1.#ctor(System.String,Enkoni.Framework.SortOrder)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Comparer`1"/> class.</summary>
            <param name="fieldName">The field that must be used to compare two objects. Use the '.' character to specify a field that is deeper in the 
            chain of hierachy.</param>
            <param name="order">The ordering direction that must be used.</param>
        </member>
        <member name="M:Enkoni.Framework.Comparer`1.Compare(`0,`0)">
            <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>If <b>x</b> is smaller than <b>y</b>, a value less than zero is returned. If <b>x</b> equals <b>y</b>, zero is returned. If <b>x</b> 
            is greater than <b>y</b>, a value greater than zero is returned.<br/>
            If the sort-order was set to <see cref="F:Enkoni.Framework.SortOrder.Descending"/>, the results are inverted.</returns>
        </member>
        <member name="T:Enkoni.Framework.Serialization.CsvSerializer`1">
            <summary>Serializes or deserializes a list of objects to and from a CSV file.</summary>
            <typeparam name="T">Type of the object that has to be serialized.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvSerializer`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Serialization.CsvSerializer`1"/> class.</summary>
            <exception cref="T:Enkoni.Framework.InvalidTypeParameterException">The specified type-parameter cannot be serialized using this serializer.</exception>
            <exception cref="T:System.InvalidOperationException">The specified type-parameter contains illegal metadata that prevents it from being 
            (de)serialized.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvSerializer`1.Serialize(System.Collections.Generic.IEnumerable{`0},System.String)">
            <summary>Serializes a list of objects to a CSV file using a default encoding of UTF-8.</summary>
            <param name="objects">The collection of objects that must be serialized.</param>
            <param name="filePath">The name of the outputfile.</param>
            <returns>The number of bytes that have been written to the file.</returns>
            <exception cref="T:System.ArgumentNullException">The parameter is null.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvSerializer`1.Serialize(System.Collections.Generic.IEnumerable{`0},System.String,System.Text.Encoding)">
            <summary>Serializes a list of objects to a CSV file.</summary>
            <param name="objects">The collection of objects that must be serialized.</param>
            <param name="filePath">The name of the outputfile.</param>
            <param name="encoding">The encoding that must be used to serialize the data.</param>
            <returns>The number of bytes that have been written to the file.</returns>
            <exception cref="T:System.ArgumentNullException">The parameter is null.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvSerializer`1.Serialize(System.Collections.Generic.IEnumerable{`0},System.IO.Stream)">
            <summary>Serializes a list of objects to a CSV format and writes the data to a stream using a default encoding of UTF-8.</summary>
            <param name="objects">The collection of objects that must be serialized.</param>
            <param name="stream">The name of the outputfile.</param>
            <returns>The number of bytes that have been written to the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The parameter is null.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvSerializer`1.Serialize(System.Collections.Generic.IEnumerable{`0},System.IO.Stream,System.Text.Encoding)">
            <summary>Serializes a list of objects to a CSV format and writes the data to a stream.</summary>
            <param name="objects">The collection of objects that must be serialized.</param>
            <param name="stream">The name of the outputfile.</param>
            <param name="encoding">The encoding that must be used to serialize the data.</param>
            <returns>The number of bytes that have been written to the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The parameter is null.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvSerializer`1.Deserialize(System.String)">
            <summary>Deserializes a CSV to a list of objects using a default encoding of UTF-8.</summary>
            <param name="filePath">Filepath to csv file.</param>
            <returns>List with objects.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvSerializer`1.Deserialize(System.String,System.Text.Encoding)">
            <summary>Deserializes a CSV to a list of objects.</summary>
            <param name="filePath">Filepath to csv file.</param>
            <param name="encoding">The encoding that must be used to deserialize the data.</param>
            <returns>List with objects.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvSerializer`1.Deserialize(System.IO.Stream)">
            <summary>Deserializes CSV data to a list of objects using a default encoding of UTF-8.</summary>
            <param name="stream">The stream that contains the csv data.</param>
            <returns>List with objects.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvSerializer`1.Deserialize(System.IO.Stream,System.Text.Encoding)">
            <summary>Deserializes a CSV to a list of objects.</summary>
            <param name="stream">The stream that contains the csv data.</param>
            <param name="encoding">The encoding that must be used to deserialize the data.</param>
            <returns>List with objects.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvSerializer`1.Serialize(System.Collections.Generic.IEnumerable{`0})">
            <summary>Serializes the collection of objects to a string in which all lines are seperated using the line-terminator for the current 
            environment.</summary>
            <param name="objects">The objects that must be serialized.</param>
            <returns>The string representation of the collection of objects.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvSerializer`1.Deserialize(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Deserializes a collection of strings to a collection of objects.</summary>
            <param name="lines">The lines that must be deserialized.</param>
            <returns>The collection of deserialized objects.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvSerializer`1.SetPropertyValue(System.Reflection.PropertyInfo,`0,System.String,System.String,System.String)">
            <summary>Set a property value of an object.</summary>
            <param name="propertyInfo">The property that must be assigned.</param>
            <param name="obj">Reference to the object whose property must be assigned.</param>
            <param name="value">The value that must be assigned.</param>
            <param name="formatString">An optional formatstring that can be used to properly parse the value.</param>
            <param name="cultureName">An optional culture-name that can be used to properly parse the value.</param>
            <exception cref="T:System.NotSupportedException">The type of the property that must be assigned is not supported.</exception>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvSerializer`1.ColumnNameMappings">
            <summary>Gets the mappings of the columnnames. The dictionary uses the columnindex as key and columnname as value.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvSerializer`1.PropertyDelegates">
            <summary>Gets the delegates that give access to the properties of the instances that need to be serialized and deserialized.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvSerializer`1.FormatMappings">
            <summary>Gets the mappings of the formatstrings. The dictionary uses the columnindex as key and formatstring as value.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvSerializer`1.CultureMappings">
            <summary>Gets the mappings of the cultures. The dictionary uses the columnindex as key and culturename as value.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvSerializer`1.EmitHeader">
            <summary>Gets or sets a value indicating whether a header-line must be included when serializing the objects.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvSerializer`1.IgnoreHeaderOnRead">
            <summary>Gets or sets a value indicating whether the header should be ignored when reading the file.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvSerializer`1.Separator">
            <summary>Gets or sets the separator-character.</summary>
        </member>
        <member name="T:Enkoni.Framework.Serialization.CsvRecordAttribute">
            <summary>This attribute defines how an object must be serialized and deserialized to and from a CSV file.</summary>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvRecordAttribute.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Serialization.CsvRecordAttribute"/> class using a default seperator.</summary>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvRecordAttribute.#ctor(System.Char)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Serialization.CsvRecordAttribute"/> class.</summary>
            <param name="separator">The separator that is used to seperate the fields.</param>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvRecordAttribute.Separator">
            <summary>Gets the seperator character. Defaults to ','.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvRecordAttribute.IgnoreHeaderOnRead">
            <summary>Gets or sets a value indicating whether the first line in the file must be ignored when deserializing the object.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvRecordAttribute.WriteHeader">
            <summary>Gets or sets a value indicating whether the header must be included in the file when serializing the object.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvRecordAttribute.CultureName">
            <summary>Gets or sets the name of the culture that must be used to parse the field values.</summary>
        </member>
        <member name="T:Enkoni.Framework.ConfigurationException">
            <summary>This exception can be thrown when a problem with the configuration has been discovered.</summary>
        </member>
        <member name="M:Enkoni.Framework.ConfigurationException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.ConfigurationException"/> class.</summary>
        </member>
        <member name="M:Enkoni.Framework.ConfigurationException.#ctor(System.String)">
            <summary> Initializes a new instance of the <see cref="T:Enkoni.Framework.ConfigurationException"/> class with a specified errormessage.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Enkoni.Framework.ConfigurationException.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of the <see cref="T:Enkoni.Framework.ConfigurationException"/> class with a specified errormessage.</summary>
            <param name="configurationParameter">The name of the configurationparameter that causes the problem.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Enkoni.Framework.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.ConfigurationException"/> class with a specified errormessage and a reference to the 
            inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/> reference if no inner 
            exception is specified.</param>
        </member>
        <member name="M:Enkoni.Framework.ConfigurationException.#ctor(System.String,System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.ConfigurationException"/> class with a specified errormessage and a reference to the 
            inner exception that is the cause of this exception.</summary>
            <param name="configurationParameter">The name of the configurationparameter that causes the problem.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/> reference if no inner 
            exception is specified.</param>
        </member>
        <member name="M:Enkoni.Framework.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.ConfigurationException"/> class with serialized data.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enkoni.Framework.ConfigurationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:Enkoni.Framework.ConfigurationException.ConfigurationParameter">
            <summary>Gets the name of the configurationparameter that caused the problem.</summary>
        </member>
        <member name="T:Enkoni.Framework.ISpecificationVisitor`1">
            <summary>This interface describes the public API of a visitor class that can be used to visit a specification using the visitor Design Pattern.
            </summary>
            <typeparam name="T">The type of object that is ultimatilly selected using the specification.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.ISpecificationVisitor`1.CreateLambdaExpression(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>Creates a lambda-expression using the specified expression. Typically, this method simply returns the parameter.</summary>
            <param name="expression">The expression that was originally passed to the specification.</param>
            <returns>The created expression.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISpecificationVisitor`1.CreateNotExpression(Enkoni.Framework.ISpecification{`0})">
            <summary>Creates a NOT-expression using the specified specification.</summary>
            <param name="specification">The specification whose result must be inverted.</param>
            <returns>The created expression.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISpecificationVisitor`1.CreateLikeExpression(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
            <summary>Creates a LIKE-expression using the specified field and searchpattern.</summary>
            <param name="field">The field of type <c>T</c> that must match the pattern.</param>
            <param name="pattern">The pattern to which the field must apply. The pattern may contain a '*' and '?' wildcard.</param>
            <returns>The created expression.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISpecificationVisitor`1.CreateAndExpression(Enkoni.Framework.ISpecification{`0},Enkoni.Framework.ISpecification{`0})">
            <summary>Creates an AND-expression using the two specified specifications.</summary>
            <param name="leftOperand">The left operand of the combination.</param>
            <param name="rightOperand">The right operand of the combination.</param>
            <returns>The created expression.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISpecificationVisitor`1.CreateOrExpression(Enkoni.Framework.ISpecification{`0},Enkoni.Framework.ISpecification{`0})">
            <summary>Creates an OR-expression using the two specified specifications.</summary>
            <param name="leftOperand">The left operand of the combination.</param>
            <param name="rightOperand">The right operand of the combination.</param>
            <returns>The created expression.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISpecificationVisitor`1.CreateCustomExpression(Enkoni.Framework.ISpecification{`0})">
            <summary>Creates an expression using the custom specification. This method is executed when a specification-type is used that is not part of 
            the default specification system.</summary>
            <param name="specification">The custom specification.</param>
            <returns>The created expression.</returns>
        </member>
        <member name="T:Enkoni.Framework.ReferenceEqualityComparer`1">
            <summary>This class compares types based on their reference.</summary>
            <typeparam name="T">The type of object that must be compared.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.ReferenceEqualityComparer`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.ReferenceEqualityComparer`1"/> class.</summary>
        </member>
        <member name="M:Enkoni.Framework.ReferenceEqualityComparer`1.Equals(`0,`0)">
            <summary>Determines whether the specified objects are equal.</summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns><see langword="true"/> if the specified objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.ReferenceEqualityComparer`1.GetHashCode(`0)">
            <summary>Returns a hash code for the specified object.</summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of obj is a reference type and obj is null.</exception>
        </member>
        <member name="T:Enkoni.Framework.NotSupportedTypeParameterException">
            <summary>This exception can be thrown when a method or class definition is called with an unsupported typeparameter.</summary>
        </member>
        <member name="M:Enkoni.Framework.NotSupportedTypeParameterException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.NotSupportedTypeParameterException"/> class.</summary>
        </member>
        <member name="M:Enkoni.Framework.NotSupportedTypeParameterException.#ctor(System.String)">
            <summary> Initializes a new instance of the <see cref="T:Enkoni.Framework.NotSupportedTypeParameterException"/> class with a specified errormessage.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Enkoni.Framework.NotSupportedTypeParameterException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.NotSupportedTypeParameterException"/> class with a specified errormessage and a 
            reference to the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/> reference if no inner 
            exception is specified.</param>
        </member>
        <member name="M:Enkoni.Framework.NotSupportedTypeParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.NotSupportedTypeParameterException"/> class with serialized data.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Enkoni.Framework.Serialization.CsvColumnAttribute">
            <summary>This attribute defines how a property must be serialized and deserialized to and from a column in a CSV file.</summary>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvColumnAttribute.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Serialization.CsvColumnAttribute"/> class using a default field index.</summary>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvColumnAttribute.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Serialization.CsvColumnAttribute"/> class.</summary>
            <param name="fieldIndex">The index of the field in the CSV file.</param>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvColumnAttribute.FieldIndex">
            <summary>Gets the index of the field in the CSV file.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvColumnAttribute.FormatString">
            <summary>Gets or sets the format string that is to be used when parsing the column value.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvColumnAttribute.CultureName">
            <summary>Gets or sets the name of the culture that must be used to parse the field value. If this property is set, it overrides any 
            culture-settings that may have been set in the CsvRecord-attribute.</summary>
        </member>
        <member name="T:Enkoni.Framework.AndSpecification`1">
            <summary>This class contains a specificationtype that combines two specifications using an AND operation.</summary>
            <typeparam name="T">The type of object that is ultimatilly selected by the specification.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.AndSpecification`1.#ctor(Enkoni.Framework.ISpecification{`0},Enkoni.Framework.ISpecification{`0})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.AndSpecification`1"/> class.</summary>
            <param name="leftOperand">The left operant of the combination.</param>
            <param name="rightOperand">The right operand of the combination.</param>
        </member>
        <member name="M:Enkoni.Framework.AndSpecification`1.VisitCore(Enkoni.Framework.ISpecificationVisitor{`0})">
            <summary>Visits the specification and lets <paramref name="visitor"/> convert the contents of the specification into an expression that can 
            be used to perform the actual filtering/selection.</summary>
            <param name="visitor">The instance that will perform the conversion.</param>
            <returns>The expression that was created using this specification.</returns>
        </member>
        <member name="T:Enkoni.Framework.Linq.Extensions">
            <summary>This class contains some all-purpose extension-methods.</summary>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>Adds an overload for the Linq-method 'SingleOrDefault' which lets the user define the default value that must be returned when the 
            standard 'SingleOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns>The single element of the input sequence that satisfies the condition, or 
            <paramref name="defaultValue"/> if no such element is found.</returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>Adds an overload for the Linq-method 'ElementAtOrDefault' which lets the user define the default value that must be returned when 
            the standard 'ElementAtOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element from.</param>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns><paramref name="defaultValue"/> if the index is outside the bounds of the source sequence; otherwise, the element at the specified 
            position in the source sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Adds an overload for the Linq-method 'FirstOrDefault' which lets the user define the default value that must be returned when the 
            standard 'FirstOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element from.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns>The first element of the input sequence, or <paramref name="defaultValue"/> if no such element is found.</returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>Adds an overload for the Linq-method 'FirstOrDefault' which lets the user define the default value that must be returned when the 
            standard 'FirstOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns>The first element of the input sequence that satisfies the condition, or <paramref name="defaultValue"/> if no such element is 
            found.</returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Adds an overload for the Linq-method 'LastOrDefault' which lets the user define the default value that must be returned when the 
            standard 'LastOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element from.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns>The last element of the input sequence, or <paramref name="defaultValue"/> if no such element is found.</returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>Adds an overload for the Linq-method 'LastOrDefault' which lets the user define the default value that must be returned when the 
            standard 'LastOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns>The last element of the input sequence that satisfies the condition, or <paramref name="defaultValue"/> if no such element is found.
            </returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>Performs an operation on each member in <paramref name="source"/>.</summary>
            <typeparam name="T">The type of element that is stored in the enumerable.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to perform the operations on.</param>
            <param name="action">The operation that must be performed for each item in the enumerable.</param>
            <exception cref="T:System.ArgumentNullException">One or more of the parameters are null.</exception>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Enkoni.Framework.SortSpecifications{``0})">
            <summary>Sorts the sequence according to the sortspecifications.</summary>
            <typeparam name="T">The type of object that must be sorted.</typeparam>
            <param name="source">The sequence that must be sorted.</param>
            <param name="sortSpecifications">The specifications for the sorting.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0)">
            <summary>Adds an overload for the Linq-method 'SingleOrDefault' which lets the user define the default value that must be returned when the 
            standard 'SingleOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns>The single element of the input sequence that satisfies the condition, or <paramref name="defaultValue"/> if no such element is 
            found.</returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0)">
            <summary>Adds an overload for the Linq-method 'FirstOrDefault' which lets the user define the default value that must be returned when the 
            standard 'FirstOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns>The first element of the input sequence that satisfies the condition, or <paramref name="defaultValue"/> if no such element is 
            found.</returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0)">
            <summary>Adds an overload for the Linq-method 'LastOrDefault' which lets the user define the default value that must be returned when the 
            standard 'LastOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns>The last element of the input sequence that satisfies the condition, or <paramref name="defaultValue"/> if no such element is found.
            </returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.OrderBy``1(System.Linq.IQueryable{``0},Enkoni.Framework.SortSpecifications{``0})">
            <summary>Sorts the sequence according to the sortspecifications.</summary>
            <typeparam name="T">The type of object that must be sorted.</typeparam>
            <param name="source">The sequence that must be sorted.</param>
            <param name="sortSpecifications">The specifications for the sorting.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1"/> that inverts the result of <paramref name="source"/>.</summary>
            <typeparam name="T">The type that is used as input for the expression.</typeparam>
            <param name="source">An <see cref="T:System.Linq.Expressions.Expression`1"/> whose result must be inverted.</param>
            <returns>An expression that will invert the result of <paramref name="source"/>.</returns>
        </member>
        <member name="T:Enkoni.Framework.InvalidTypeParameterException">
            <summary>This exception can be thrown when a method or class definition is used with an illegal type parameter.</summary>
        </member>
        <member name="M:Enkoni.Framework.InvalidTypeParameterException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.InvalidTypeParameterException"/> class.</summary>
        </member>
        <member name="M:Enkoni.Framework.InvalidTypeParameterException.#ctor(System.String)">
            <summary> Initializes a new instance of the <see cref="T:Enkoni.Framework.InvalidTypeParameterException"/> class with a specified errormessage.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Enkoni.Framework.InvalidTypeParameterException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.InvalidTypeParameterException"/> class with a specified errormessage and a reference to 
            the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/> reference if no inner 
            exception is specified.</param>
        </member>
        <member name="M:Enkoni.Framework.InvalidTypeParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.InvalidTypeParameterException"/> class with serialized data.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Enkoni.Framework.SortSpecification`2">
            <summary>Implements the <see cref="T:Enkoni.Framework.ISortSpecification`1"/>.</summary>
            <typeparam name="T">The type of object that must be sorted.</typeparam>
            <typeparam name="TKey">The type of the key that is used to perform the sorting.</typeparam>
        </member>
        <member name="F:Enkoni.Framework.SortSpecification`2.sortDirection">
            <summary>Defines the direction of the ordering.</summary>
        </member>
        <member name="F:Enkoni.Framework.SortSpecification`2.sortExpression">
            <summary>Defines the expression that must be used to perform the sorting.</summary>
        </member>
        <member name="M:Enkoni.Framework.SortSpecification`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.SortSpecification`2"/> class using the ascending sortorder as default sort 
            direction.</summary>
            <param name="sortExpression">The expression that is used for the sorting.</param>
        </member>
        <member name="M:Enkoni.Framework.SortSpecification`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},Enkoni.Framework.SortOrder)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.SortSpecification`2"/> class.</summary>
            <param name="sortExpression">The expression that is used for the sorting.</param>
            <param name="sortDirection">The direction of the sorting.</param>
        </member>
        <member name="M:Enkoni.Framework.SortSpecification`2.OrderBy(System.Linq.IQueryable{`0})">
            <summary>Sorts the elements of a sequence.</summary>
            <param name="query">The sequence that must be sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.SortSpecification`2.OrderBy(System.Collections.Generic.IEnumerable{`0})">
            <summary>Sorts the elements of a sequence.</summary>
            <param name="query">The sequence that must be sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.SortSpecification`2.ThenBy(System.Linq.IOrderedQueryable{`0})">
            <summary>Performs a subsequent ordering of the elements in a sequence.</summary>
            <param name="query">The sequence that must be sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.SortSpecification`2.ThenBy(System.Linq.IOrderedEnumerable{`0})">
            <summary>Performs a subsequent ordering of the elements in a sequence.</summary>
            <param name="query">The sequence that must be sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="T:Enkoni.Framework.SortOrder">
            <summary>Defines the supported sort orders.</summary>
        </member>
        <member name="F:Enkoni.Framework.SortOrder.Ascending">
            <summary>Indicates that the objects should be sorted 'smallest first'.</summary>
        </member>
        <member name="F:Enkoni.Framework.SortOrder.Descending">
            <summary>Indicates that the objects should be sorted 'biggest first'.</summary>
        </member>
        <member name="T:Enkoni.Framework.WorkflowState">
            <summary>Contains the states in which a workflow can be. A workflow can only be in one state at a time.</summary>
        </member>
        <member name="F:Enkoni.Framework.WorkflowState.Init">
            <summary>Indicates that the workflow is created but not yet started.</summary>
        </member>
        <member name="F:Enkoni.Framework.WorkflowState.Starting">
            <summary>Indicates that the workflow is currently starting.</summary>
        </member>
        <member name="F:Enkoni.Framework.WorkflowState.Started">
            <summary>Indicates that the workflow is running.</summary>
        </member>
        <member name="F:Enkoni.Framework.WorkflowState.Pausing">
            <summary>Indicates that the workflow is pausing its processes.</summary>
        </member>
        <member name="F:Enkoni.Framework.WorkflowState.Paused">
            <summary>Indicates that the workflow is currently paused.</summary>
        </member>
        <member name="F:Enkoni.Framework.WorkflowState.Continuing">
            <summary>Indicates that the workflow is resuming its processes.</summary>
        </member>
        <member name="F:Enkoni.Framework.WorkflowState.Continued">
            <summary>Indicates that the workflow is resuming. This basically is equal to the <see cref="F:Enkoni.Framework.WorkflowState.Started"/> state.</summary>
        </member>
        <member name="F:Enkoni.Framework.WorkflowState.Stopping">
            <summary>Indicates that the workflow is stopping its processes.</summary>
        </member>
        <member name="F:Enkoni.Framework.WorkflowState.Stopped">
            <summary>Indicates that the workflow has stopped.</summary>
        </member>
        <member name="F:Enkoni.Framework.WorkflowState.Faulted">
            <summary>Indicates that the workflow is stopped as a result of an error.</summary>
        </member>
        <member name="T:Enkoni.Framework.AsyncResultVoid">
            <summary>Represents the status of an asynchronous operation that returns void.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResultVoid.PendingState">
            <summary>Indicates that the operation is pending.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResultVoid.CompletedSynchronouslyState">
            <summary>Indicates that the operation has completed synchronously.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResultVoid.CompletedAsynchronouslyState">
            <summary>Indicates that the operation has completed asynchronously.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResultVoid.asyncCallback">
            <summary>The callback that is called when the operation completes.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResultVoid.asyncState">
            <summary>A user-defined object that qualifies or contains information about an asynchronous operation.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResultVoid.currentState">
            <summary>The current state of the operation.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResultVoid.asyncWaitHandle">
            <summary>Notifies any waiting thread that an event has occured. This field may or may not be used depening on the
            usage of this class.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResultVoid.pendingException">
            <summary>The pending exception (if any) that was thrown by the executed method.</summary>
        </member>
        <member name="M:Enkoni.Framework.AsyncResultVoid.#ctor(System.AsyncCallback,System.Object)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.AsyncResultVoid"/> class.</summary>
            <param name="asyncCallback">The callback that is executed when the operation completes. Leave <see langword="null"/> if not used.</param>
            <param name="state">A user-defined object that qualifies or contains information about an asynchronous operation. Leave 
            <see langword="null"/> if not used.</param>
        </member>
        <member name="M:Enkoni.Framework.AsyncResultVoid.SetAsCompleted(System.Exception,System.Boolean)">
            <summary>Sets the status of the asynchronous call to completed.</summary>
            <param name="exception">The <see cref="T:System.Exception"/> that was thrown by the executed method. If no pendingException was thrown, pass a 
            <see langword="null"/> reference.</param>
            <param name="completedSynchronously"><c>True</c> if the asynchronous operation completed synchronously; otherwise, <c>false</c>.</param>
            <remarks>If the synchronous completion of the call is detected in the <see cref="T:System.AsyncCallback"/> delegate, it is probable that the thread 
            that initiated the asynchronous operation is the current thread.<br/>
            <br/>
            <b>Notes to Implementers:</b><br/>
            Most implementers of the <see cref="T:System.IAsyncResult"/> interface will not use this property and should return <see langword="false"/>.</remarks>
        </member>
        <member name="M:Enkoni.Framework.AsyncResultVoid.EndInvoke">
            <summary>Ends the invocation by waiting for the waithandle to finish.</summary>
        </member>
        <member name="P:Enkoni.Framework.AsyncResultVoid.IsCompleted">
            <summary>Gets a value indicating whether the asynchronous operation has completed.</summary>
        </member>
        <member name="P:Enkoni.Framework.AsyncResultVoid.AsyncState">
            <summary>Gets a user-defined object that qualifies or contains information about an asynchronous operation.</summary>
        </member>
        <member name="P:Enkoni.Framework.AsyncResultVoid.CompletedSynchronously">
            <summary>Gets a value indicating whether the asynchronous operation completed synchronously.</summary>
        </member>
        <member name="P:Enkoni.Framework.AsyncResultVoid.AsyncWaitHandle">
            <summary>Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.</summary>
        </member>
        <member name="T:Enkoni.Framework.Workflow">
            <summary>Represents a process or workflow that executes a defined task or set of tasks. This class provides the basic logic to start, stop, 
            pause and continue a workflow both synchronously and asynchronously.</summary>
        </member>
        <member name="M:Enkoni.Framework.Workflow.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Workflow"/> class. It sets the state to the initial value of 
            <see cref="F:Enkoni.Framework.WorkflowState.Init"/>.</summary>
        </member>
        <member name="M:Enkoni.Framework.Workflow.Start">
            <summary>Tries to start the workflow. It blocks untill the workflow is started.</summary>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be started. Only when the workflow is in the state 
            <see cref="F:Enkoni.Framework.WorkflowState.Init"/> or <see cref="F:Enkoni.Framework.WorkflowState.Stopped"/>, it can be started.</exception>
        </member>
        <member name="M:Enkoni.Framework.Workflow.Stop">
            <summary>Tries to stop the workflow. It blocks untill the workflow is stopped.</summary>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be stopped. Only when the workflow is in the state 
            <see cref="F:Enkoni.Framework.WorkflowState.Started"/>, <see cref="F:Enkoni.Framework.WorkflowState.Pausing"/> or <see cref="F:Enkoni.Framework.WorkflowState.Continued"/>, it can be stopped.
            </exception>
        </member>
        <member name="M:Enkoni.Framework.Workflow.Pause">
            <summary>Tries to pause the workflow. It blocks untill the workflow is paused.</summary>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and resuming.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be paused. Only when the workflow is in the state 
            <see cref="F:Enkoni.Framework.WorkflowState.Started"/> or <see cref="F:Enkoni.Framework.WorkflowState.Continued"/>, it can be paused.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="M:Enkoni.Framework.Workflow.Continue">
            <summary>Tries to continue the workflow. It blocks untill the workflow is continued.</summary>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and continuing.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be continued. Only when the workflow is in the 
            state <see cref="F:Enkoni.Framework.WorkflowState.Paused"/>, it can be continued.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="M:Enkoni.Framework.Workflow.BeginStart(System.AsyncCallback,System.Object)">
            <summary>Begins to start the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous start operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous start request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous start.</returns>
        </member>
        <member name="M:Enkoni.Framework.Workflow.EndStart(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous start to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be started. Only when the workflow is in the state 
            <see cref="F:Enkoni.Framework.WorkflowState.Init"/> or <see cref="F:Enkoni.Framework.WorkflowState.Stopped"/>, it can be started.</exception>
        </member>
        <member name="M:Enkoni.Framework.Workflow.BeginStop(System.AsyncCallback,System.Object)">
            <summary>Begins to stop the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous stop operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous stop request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous stop.</returns>
        </member>
        <member name="M:Enkoni.Framework.Workflow.EndStop(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous stop to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be stopped. Only when the workflow is in the state 
            <see cref="F:Enkoni.Framework.WorkflowState.Started"/>, <see cref="F:Enkoni.Framework.WorkflowState.Pausing"/> or <see cref="F:Enkoni.Framework.WorkflowState.Continued"/>, it can be stopped.</exception>
        </member>
        <member name="M:Enkoni.Framework.Workflow.BeginPause(System.AsyncCallback,System.Object)">
            <summary>Begins to pause the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous pause operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous pause request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous pause.</returns>
        </member>
        <member name="M:Enkoni.Framework.Workflow.EndPause(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous pause to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and resuming.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be paused. Only when the workflow is in the state 
            <see cref="F:Enkoni.Framework.WorkflowState.Started"/> or <see cref="F:Enkoni.Framework.WorkflowState.Continued"/>, it can be paused.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="M:Enkoni.Framework.Workflow.BeginContinue(System.AsyncCallback,System.Object)">
            <summary>Begins to continue the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous continue operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous continue request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous continue.</returns>
        </member>
        <member name="M:Enkoni.Framework.Workflow.EndContinue(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous continue to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and continuing.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be continued. Only when the workflow is in the 
            state <see cref="F:Enkoni.Framework.WorkflowState.Paused"/>, it can be continued.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="M:Enkoni.Framework.Workflow.OnStart">
            <summary>Contains the actual start-up logic. The default implementation is empty, subclasses will have to provide the implementation by 
            overriding this method. Implementers of this method do not have to check the state of the workflow or change the state of the workflow as 
            this is already done by the public <see cref="M:Enkoni.Framework.Workflow.Start"/> method.</summary>
            <remarks>If the implementer detects a situation in which it cannot be started, it should throw an <see cref="T:System.InvalidOperationException"/>. 
            This will cause the <b>Workflow</b> to move to the <see cref="F:Enkoni.Framework.WorkflowState.Faulted"/> state.</remarks>
        </member>
        <member name="M:Enkoni.Framework.Workflow.OnStop">
            <summary>Contains the actual stop logic. The default implementation is empty, subclasses will have to provide the implementation by 
            overriding this method. Implementers of this method do not have to check the state of the workflow or change the state of the workflow as 
            this is already done by the public <see cref="M:Enkoni.Framework.Workflow.Stop"/> method.</summary>
            <remarks>If the implementer detects a situation in which it cannot be stopped, it should throw an <see cref="T:System.InvalidOperationException"/>. 
            This will cause the <b>Workflow</b> to move to the <see cref="F:Enkoni.Framework.WorkflowState.Faulted"/> state.</remarks>
        </member>
        <member name="M:Enkoni.Framework.Workflow.OnPause">
            <summary>Contains the actual pause logic. The default implementation is empty, subclasses will have to provide the implementation by 
            overriding this method. Implementers of this method do not have to check the state of the workflow or change the state of the workflow as 
            this is already done by the public <see cref="M:Enkoni.Framework.Workflow.Pause"/> method.</summary>
            <remarks>If the implementer detects a situation in which it cannot be paused, it should throw an <see cref="T:System.InvalidOperationException"/>. 
            This will cause the <b>Workflow</b> to move to the <see cref="F:Enkoni.Framework.WorkflowState.Faulted"/> state.</remarks>
        </member>
        <member name="M:Enkoni.Framework.Workflow.OnContinue">
            <summary>Contains the actual continue logic. The default implementation is empty, subclasses will have to provide the implementation by 
            overriding this method. Implementers of this method do not have to check the state of the workflow or change the state of the workflow as 
            this is already done by the public <see cref="M:Enkoni.Framework.Workflow.Continue"/> method.</summary>
            <remarks>If the implementer detects a situation in which it cannot be continued, it should throw an <see cref="T:System.InvalidOperationException"/>. 
            This will cause the <b>Workflow</b> to move to the <see cref="F:Enkoni.Framework.WorkflowState.Faulted"/> state.</remarks>
        </member>
        <member name="M:Enkoni.Framework.Workflow.StartWorkflowHelper(System.Object)">
            <summary>Executes the <see cref="M:Enkoni.Framework.Workflow.Start"/> method in a seperate thread. This is used to support asynchronous operations.</summary>
            <param name="asyncResult">The object that holds the status of the asynchronous operation.</param>
        </member>
        <member name="M:Enkoni.Framework.Workflow.StopWorkflowHelper(System.Object)">
            <summary>Executes the <see cref="M:Enkoni.Framework.Workflow.Stop"/> method in a seperate thread. This is used to support asynchronous operations.</summary>
            <param name="asyncResult">The object that holds the status of the asynchronous operation.</param>
        </member>
        <member name="M:Enkoni.Framework.Workflow.PauseWorkflowHelper(System.Object)">
            <summary>Executes the <see cref="M:Enkoni.Framework.Workflow.Pause"/> method in a seperate thread. This is used to support asynchronous operations.</summary>
            <param name="asyncResult">The object that holds the status of the asynchronous operation.</param>
        </member>
        <member name="M:Enkoni.Framework.Workflow.ContinueWorkflowHelper(System.Object)">
            <summary>Executes the <see cref="M:Enkoni.Framework.Workflow.Continue"/> method in a seperate thread. This is used to support asynchronous operations.</summary>
            <param name="asyncResult">The object that holds the status of the asynchronous operation.</param>
        </member>
        <member name="P:Enkoni.Framework.Workflow.CanPauseAndContinue">
            <summary>Gets a value indicating whether the workflow is able to pause and continue its internal processes. By default, a <b>Workflow</b> 
            cannot be paused or continued.</summary>
        </member>
        <member name="P:Enkoni.Framework.Workflow.State">
            <summary>Gets or sets the current <see cref="T:Enkoni.Framework.WorkflowState"/> of the workflow.</summary>
        </member>
        <member name="T:Enkoni.Framework.SortSpecifications`1">
            <summary>This class holds a collection of sortspecifications which can be used to sort a sequence of 
            <typeparamref name="T"/>.</summary>
            <typeparam name="T">The type of object that must be sorted.</typeparam>
        </member>
        <member name="F:Enkoni.Framework.SortSpecifications`1.sortingSpecifications">
            <summary>The collection of sortspecifications.</summary>
        </member>
        <member name="M:Enkoni.Framework.SortSpecifications`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.SortSpecifications`1"/> class.</summary>
        </member>
        <member name="M:Enkoni.Framework.SortSpecifications`1.Sort(System.Linq.IQueryable{`0})">
            <summary>Sorts a sequence according to the specifications that are held by this instance.</summary>
            <param name="query">The sequence that must be sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.SortSpecifications`1.Sort(System.Collections.Generic.IEnumerable{`0})">
            <summary>Sorts a sequence according to the specifications that are held by this instance.</summary>
            <param name="query">The sequence that must be sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.SortSpecifications`1.Add(Enkoni.Framework.ISortSpecification{`0})">
            <summary>Adds a new sortspecification to the collection.</summary>
            <param name="sortSpecification">The sortspecification that must be added.</param>
        </member>
        <member name="M:Enkoni.Framework.SortSpecifications`1.AddRange(Enkoni.Framework.SortSpecifications{`0})">
            <summary>Adds a new collcetion of sortspecifications to the collection.</summary>
            <param name="sortSpecifications">The sortspecifications that must be added.</param>
        </member>
        <member name="M:Enkoni.Framework.SortSpecifications`1.Clear">
            <summary>Removes all the sortspecifications from the collection.</summary>
        </member>
        <member name="T:Enkoni.Framework.BusinessRuleSpecification`1">
            <summary>This class implements a specific Specification-type that holds information about a special businessrule.</summary>
            <typeparam name="T">The type of object to which the specification applies.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.BusinessRuleSpecification`1.#ctor(System.String,System.Object[])">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.BusinessRuleSpecification`1"/> class.</summary>
            <param name="ruleName">The name of the rule that must be excuted.</param>
            <param name="arguments">The arguments that must be used by the business rule.</param>
        </member>
        <member name="M:Enkoni.Framework.BusinessRuleSpecification`1.VisitCore(Enkoni.Framework.ISpecificationVisitor{`0})">
            <summary>Visits the specification and lets <paramref name="visitor"/> convert the contents of the specification into an expression that can 
            be used to perform the actual filtering/selection.</summary>
            <param name="visitor">The instance that will perform the conversion.</param>
            <returns>The expression that was created using this specification.</returns>
        </member>
        <member name="P:Enkoni.Framework.BusinessRuleSpecification`1.RuleName">
            <summary>Gets the name of the businessrule that must be executed.</summary>
        </member>
        <member name="P:Enkoni.Framework.BusinessRuleSpecification`1.RuleArguments">
            <summary>Gets any arguments that were passed and may be required to execute the businessrule.</summary>
        </member>
    </members>
</doc>
