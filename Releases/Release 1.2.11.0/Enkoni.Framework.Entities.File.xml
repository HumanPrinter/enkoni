<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Enkoni.Framework.Entities.File</name>
    </assembly>
    <members>
        <member name="T:Enkoni.Framework.Entities.Extensions">
            <summary>This class contains some all-purpose extension-methods.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.Extensions.CreateCopyOrClone``1(``0)">
            <summary>Returns a copy or clone of the instance.</summary>
            <typeparam name="TEntity">The actual type of the instance that will be copied.</typeparam>
            <param name="instance">The instance that will be copied or cloned.</param>
            <returns>A copy of the instance.</returns>
        </member>
        <member name="T:Enkoni.Framework.Entities.ValidatedNotNullAttribute">
            <summary>Defines a marker attribute that is used to avoid incorrect CA1062 warnings.</summary>
        </member>
        <member name="T:Enkoni.Framework.Entities.XmlFileRepository`1">
            <summary>This class extends the abstract <see cref="T:Enkoni.Framework.Entities.FileRepository`1"/> class and implements the functionality to read and write from or
            to an XML-file.</summary>
            <typeparam name="TEntity">The type of the entity that is handled by this repository.</typeparam>
        </member>
        <member name="F:Enkoni.Framework.Entities.XmlFileRepository`1.serializer">
            <summary>The instance that is used to (de)serialize the entities.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.XmlFileRepository`1.#ctor(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.XmlFileRepository`1"/> class using the specified <see cref="T:Enkoni.Framework.Entities.DataSourceInfo"/>.
            </summary>
            <param name="dataSourceInfo">The data source information that must be used to access the source file.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.XmlFileRepository`1.ReadAllRecordsFromFile(System.IO.FileInfo,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Reads all the available records from the source file.</summary>
            <param name="sourceFile">Information about the file that must be read.</param>
            <param name="dataSourceInfo">Optional information about the data source.</param>
            <returns>The entities that were read from the file.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.XmlFileRepository`1.WriteAllRecordsToFile(System.IO.FileInfo,Enkoni.Framework.Entities.DataSourceInfo,System.Collections.Generic.IEnumerable{`0})">
            <summary>Writes the specified records to the destination file.</summary>
            <param name="destinationFile">Information about the file in which the contents must be saved.</param>
            <param name="dataSourceInfo">Optional information about the data source.</param>
            <param name="contents">The new contents of the file.</param>
            <returns>The entities after they have been written to the file (in case the saving resulted in some updated values).</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.XmlFileRepository`1.ConstructAttributeOverrides">
            <summary>Constructs an instance of the <see cref="T:System.Xml.Serialization.XmlAttributeOverrides"/> class that is used to instruct an <see cref="T:System.Xml.Serialization.XmlSerializer"/> how to (de)serialize
            an entity.</summary>
            <returns>The constructed instance.</returns>
        </member>
        <member name="T:Enkoni.Framework.Entities.XmlFileRepository`1.CustomAttributeProvider">
            <summary>Implements a custom attribute provider that is used to construct an <see cref="T:System.Xml.Serialization.XmlAttributes"/> instance.</summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.XmlFileRepository`1.CustomAttributeProvider.propertyInfo">
            <summary>The PropertyInfo that describes the property whose attributes must be retrieved.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.XmlFileRepository`1.CustomAttributeProvider.#ctor(System.Reflection.PropertyInfo)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.XmlFileRepository`1.CustomAttributeProvider"/> class.</summary>
            <param name="propertyInfo">The instance that is the source for this provider.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.XmlFileRepository`1.CustomAttributeProvider.GetCustomAttributes(System.Boolean)">
            <summary>Returns an array of all of the custom attributes defined on this member, excluding named attributes, or an empty array if there
            are no custom attributes.</summary>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>An array of Objects representing custom attributes, or an empty array.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.XmlFileRepository`1.CustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>Returns an array of custom attributes defined on this member, identified by type, or an empty array if there are no custom
            attributes of that type.</summary>
            <param name="attributeType">The type of the custom attributes.</param>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>An array of Objects representing custom attributes, or an empty array.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.XmlFileRepository`1.CustomAttributeProvider.IsDefined(System.Type,System.Boolean)">
            <summary>Indicates whether one or more instance of attributeType is defined on this member.</summary>
            <param name="attributeType">The type of the custom attributes.</param>
            <param name="inherit">When true, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns><see langword="true"/> if the attributeType is defined on this member; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Enkoni.Framework.Entities.CsvFileRepository`1">
            <summary>This class extends the abstract <see cref="T:Enkoni.Framework.Entities.FileRepository`1"/> class and implements the functionality to read and write from or
            to a CSV-file.</summary>
            <typeparam name="TEntity">The type of the entity that is handled by this repository.</typeparam>
        </member>
        <member name="F:Enkoni.Framework.Entities.CsvFileRepository`1.serializer">
            <summary>The instance that is used to (de)serialize the entities.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.CsvFileRepository`1.#ctor(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.CsvFileRepository`1"/> class using the specified <see cref="T:Enkoni.Framework.Entities.DataSourceInfo"/>.
            </summary>
            <param name="dataSourceInfo">The data source information that must be used to access the source file.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.CsvFileRepository`1.ReadAllRecordsFromFile(System.IO.FileInfo,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Reads all the available records from the source file.</summary>
            <param name="sourceFile">Information about the file that must be read.</param>
            <param name="dataSourceInfo">Optional information about the data source.</param>
            <returns>The entities that were read from the file.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.CsvFileRepository`1.WriteAllRecordsToFile(System.IO.FileInfo,Enkoni.Framework.Entities.DataSourceInfo,System.Collections.Generic.IEnumerable{`0})">
            <summary>Writes the specified records to the destination file.</summary>
            <param name="destinationFile">Information about the file in which the contents must be saved.</param>
            <param name="dataSourceInfo">Optional information about the data source.</param>
            <param name="contents">The new contents of the file.</param>
            <returns>The entities after they have been written to the file (in case the saving resulted in some updated values).</returns>
        </member>
        <member name="T:Enkoni.Framework.Entities.FileSourceInfo">
            <summary>This class can be used by the <see cref="T:Enkoni.Framework.Entities.FileRepository`1"/> or any of its descendants to retrieve valuable information about
            the file that is to be used. This class is added for improved usability of the DataSourceInfo in combination with the FileRepository.</summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.FileSourceInfo.SourceFileInfoKey">
            <summary>Defines the key that is used to store and retrieve the FileInfo that points to the desired file.</summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.FileSourceInfo.MonitorSourceFileKey">
            <summary>Defines the key that is used to store and retrieve the boolean that indicates whether or not to monitor the source file.</summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.FileSourceInfo.ChangeCompleteTimeoutKey">
            <summary>Defines the key that is used to store and retrieve the numeric value that is used to determine if a change in the source file is finished.</summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.FileSourceInfo.SourceFileEncodingKey">
            <summary>Defines the key that is used to store and retrieve the encoding of the source file.</summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.FileSourceInfo.DefaultMonitorSourceFile">
            <summary>The default value for the <see cref="P:Enkoni.Framework.Entities.FileSourceInfo.MonitorSourceFile"/> that will be used when no custom value has been specified.</summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.FileSourceInfo.DefaultChangeCompleteTimeout">
            <summary>The default value for the <see cref="P:Enkoni.Framework.Entities.FileSourceInfo.ChangeCompleteTimeout"/> that will be used when no custom value has been specified.</summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.FileSourceInfo.DefaultSourceFileEncoding">
            <summary>The default value for the <see cref="P:Enkoni.Framework.Entities.FileSourceInfo.SourceFileEncoding"/> that will be used when no custom value has been specified.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.FileSourceInfo"/> class using default values for the properties.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.#ctor(System.IO.FileInfo)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.FileSourceInfo"/> class using default values for the properties.</summary>
            <param name="sourceFileInfo">The file information about the file that is used as data source.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.#ctor(System.IO.FileInfo,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.FileSourceInfo"/> class using default values for the properties.</summary>
            <param name="sourceFileInfo">The file information about the file that is used as data source.</param>
            <param name="cloneDataSourceItems">Indicates whether or not any entity that originate from the data source should be cloned or not.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.#ctor(System.IO.FileInfo,System.Text.Encoding)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.FileSourceInfo"/> class using default values for the properties.</summary>
            <param name="sourceFileInfo">The file information about the file that is used as data source.</param>
            <param name="sourceFileEncoding">The encoding of the source file.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.#ctor(System.IO.FileInfo,System.Text.Encoding,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.FileSourceInfo"/> class using default values for the properties.</summary>
            <param name="sourceFileInfo">The file information about the file that is used as data source.</param>
            <param name="sourceFileEncoding">The encoding of the source file.</param>
            <param name="cloneDataSourceItems">Indicates whether or not any entity that originate from the data source should be cloned or not.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.#ctor(System.IO.FileInfo,System.Boolean,System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.FileSourceInfo"/> class using the specified <see cref="T:System.IO.FileInfo"/>,
            <see langword="bool"/> and <see langword="int"/> values.</summary>
            <param name="sourceFileInfo">The file information about the file that is used as data source.</param>
            <param name="monitorSourceFile">Indicates if the monitor that watches the source file must be started.</param>
            <param name="changeCompleteTimeout">The timeout that is used to determine if a file change has completed or not.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.#ctor(System.IO.FileInfo,System.Boolean,System.Int32,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.FileSourceInfo"/> class using the specified <see cref="T:System.IO.FileInfo"/>,
            <see langword="bool"/> and <see langword="int"/> values.</summary>
            <param name="sourceFileInfo">The file information about the file that is used as data source.</param>
            <param name="monitorSourceFile">Indicates if the monitor that watches the source file must be started.</param>
            <param name="changeCompleteTimeout">The timeout that is used to determine if a file change has completed or not.</param>
            <param name="cloneDataSourceItems">Indicates whether or not any entity that originate from the data source should be cloned or not.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.#ctor(System.IO.FileInfo,System.Boolean,System.Int32,System.Text.Encoding)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.FileSourceInfo"/> class using the specified <see cref="T:System.IO.FileInfo"/>,
            <see langword="bool"/> and <see langword="int"/> values.</summary>
            <param name="sourceFileInfo">The file information about the file that is used as data source.</param>
            <param name="monitorSourceFile">Indicates if the monitor that watches the source file must be started.</param>
            <param name="changeCompleteTimeout">The timeout that is used to determine if a file change has completed or not.</param>
            <param name="sourceFileEncoding">The encoding of the source file.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.#ctor(System.IO.FileInfo,System.Boolean,System.Int32,System.Text.Encoding,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.FileSourceInfo"/> class using the specified <see cref="T:System.IO.FileInfo"/>,
            <see langword="bool"/> and <see langword="int"/> values.</summary>
            <param name="sourceFileInfo">The file information about the file that is used as data source.</param>
            <param name="monitorSourceFile">Indicates if the monitor that watches the source file must be started.</param>
            <param name="changeCompleteTimeout">The timeout that is used to determine if a file change has completed or not.</param>
            <param name="sourceFileEncoding">The encoding of the source file.</param>
            <param name="cloneDataSourceItems">Indicates whether or not any entity that originate from the data source should be cloned or not.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.FileSourceInfo"/> class using the specified default values. If the default values do
            not specify supported properties using the correct key and/or type, the default values will be used.</summary>
            <param name="defaultValues">The default values that are to be used.</param>
        </member>
        <member name="P:Enkoni.Framework.Entities.FileSourceInfo.SourceFileInfo">
            <summary>Gets or sets the FileInfo that points to the file that is used as data source.</summary>
        </member>
        <member name="P:Enkoni.Framework.Entities.FileSourceInfo.MonitorSourceFile">
            <summary>Gets or sets a value indicating whether the source file must be monitored for any changes.</summary>
        </member>
        <member name="P:Enkoni.Framework.Entities.FileSourceInfo.ChangeCompleteTimeout">
            <summary>Gets or sets the timeout value that is used to determine if a file change has been completed.</summary>
        </member>
        <member name="P:Enkoni.Framework.Entities.FileSourceInfo.SourceFileEncoding">
            <summary>Gets or sets the Encoding of the source file.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.IsSourceFileInfoSpecified(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Determines if the source FileInfo is specified in the source information.</summary>
            <param name="dataSourceInfo">The data source information that is queried.</param>
            <returns><see langword="true"/> if the FileInfo is defined; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.SelectSourceFileInfo(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Selects the source FileInfo from the specified data source information.</summary>
            <param name="dataSourceInfo">The data source information that is queried.</param>
            <returns>The FileInfo that is stored in the data source information or <see langword="null"/> if the FileInfo could not be found.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.IsMonitorSourceFileSpecified(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Determines if the monitor-flag is specified in the source information.</summary>
            <param name="dataSourceInfo">The data source information that is queried.</param>
            <returns><see langword="true"/> if the flag is defined; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.SelectMonitorSourceFile(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Selects the monitor-flag from the specified data source information.</summary>
            <param name="dataSourceInfo">The data source information that is queried.</param>
            <returns>The monitor-flag that is stored in the data source information or <see langword="true"/> if the flag could not be found.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.IsChangeCompleteTimeoutSpecified(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Determines if the change complete timeout is specified in the source information.</summary>
            <param name="dataSourceInfo">The data source information that is queried.</param>
            <returns><see langword="true"/> if the value is defined; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.SelectChangeCompleteTimeout(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Selects the change complete timeout from the specified data source information.</summary>
            <param name="dataSourceInfo">The data source information that is queried.</param>
            <returns>The value that is stored in the data source information or the default value if the flag could not be found.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.IsSourceFileEncodingSpecified(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Determines if the source file's encoding is specified in the source information.</summary>
            <param name="dataSourceInfo">The data source information that is queried.</param>
            <returns><see langword="true"/> if the value is defined; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.SelectSourceFileEncoding(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Selects the source file's encoding from the specified data source information.</summary>
            <param name="dataSourceInfo">The data source information that is queried.</param>
            <returns>The value that is stored in the data source information or <see langword="null"/> if the value could not be found.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.IsSourceFileInfoSpecified">
            <summary>Determines if the source FileInfo is specified in the source information.</summary>
            <returns><see langword="true"/> if the FileInfo is defined; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.IsMonitorSourceFileSpecified">
            <summary>Determines if the monitor-flag is specified in the source information.</summary>
            <returns><see langword="true"/> if the flag is defined; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.IsChangeCompleteTimeoutSpecified">
            <summary>Determines if the change complete timeout is specified in the source information.</summary>
            <returns><see langword="true"/> if the value is defined; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileSourceInfo.IsSourceFileEncodingSpecified">
            <summary>Determines if the source file's encoding is specified in the source information.</summary>
            <returns><see langword="true"/> if the value is defined; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="T:Enkoni.Framework.Entities.FileRepository`1">
            <summary>This abstract class extends the abstract <see cref="T:Enkoni.Framework.Entities.Repository`1"/> class and implements some of the functionality using basic file
            I/O. This implementation can be used a base for any file format-specific file repositories.</summary>
            <typeparam name="TEntity">The type of the entity that is handled by this repository.</typeparam>
        </member>
        <member name="F:Enkoni.Framework.Entities.FileRepository`1.sourceFileMonitor">
            <summary>The instance that is used to monitor changes in the source file.</summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.FileRepository`1.internalCache">
            <summary>The internal cache that is used to cache the entities from the file.</summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.FileRepository`1.additionCache">
            <summary>The collection of entities that are to be added to the data source. </summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.FileRepository`1.updateCache">
            <summary>The collection of entities that are to be updated in the data source.</summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.FileRepository`1.deletionCache">
            <summary>The collection of entities that are to be removed from the data source.</summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.FileRepository`1.storageLock">
            <summary>A lock that is used to synchronize access to the internal storage.</summary>
        </member>
        <member name="F:Enkoni.Framework.Entities.FileRepository`1.changeEventTimer">
            <summary>The timer that is used to determine if a file-change has finished.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.#ctor(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Entities.FileRepository`1"/> class using the specified <see cref="T:Enkoni.Framework.Entities.DataSourceInfo"/>.
            </summary>
            <param name="dataSourceInfo">The data source information that must be used to access the source file.</param>
            <exception cref="T:System.InvalidOperationException"><paramref name="dataSourceInfo"/> does not specify a valid source file.</exception>
        </member>
        <member name="P:Enkoni.Framework.Entities.FileRepository`1.SourceFile">
            <summary>Gets the FileInfo that references the used source file.</summary>
        </member>
        <member name="P:Enkoni.Framework.Entities.FileRepository`1.SourceFileMonitorIsRunning">
            <summary>Gets a value indicating whether the file monitor is currently running.</summary>
        </member>
        <member name="P:Enkoni.Framework.Entities.FileRepository`1.ChangeCompleteTimeout">
            <summary>Gets the timeout value that is used to determine if a file change has finished or not.</summary>
        </member>
        <member name="P:Enkoni.Framework.Entities.FileRepository`1.SourceFileEncoding">
            <summary>Gets the encoding of the source file.</summary>
        </member>
        <member name="P:Enkoni.Framework.Entities.FileRepository`1.Cache">
            <summary>Gets the entities that are available through the caching mechanism.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.ResetCore(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Resets the repository by undoing any unsaved changes.</summary>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.SaveChangesCore(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Save the changes that were made to the repository. It is possible to supply data source information that specifies a specific
            destination file. In that case, the contents will be written to that file and the internal cache is untouched. Otherwise, the changes are
            written back to the source file and the internal cache will be refreshed.</summary>
            <param name="dataSourceInfo">Optional data source information that may contain a reference to a destination file other than the original
            source file.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.CreateEntityCore(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Creates a new entity of type <typeparamref name="TEntity"/>. This is done by calling the default constructor of
            <typeparamref name="TEntity"/>.</summary>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage. This parameter is not used.
            </param>
            <returns>The created entity.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.FindAllCore(System.Func{`0,System.Boolean},Enkoni.Framework.SortSpecifications{`0},System.Int32,System.String[],Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Finds all the entities of type <typeparamref name="TEntity"/> that match the expression.</summary>
            <param name="expression">The expression that is used as a filter.</param>
            <param name="sortRules">The specification of the sort rules that must be applied. Use <see langword="null"/> to ignore the ordering.</param>
            <param name="maximumResults">The maximum number of results that must be retrieved. Use '-1' to retrieve all results.</param>
            <param name="includePaths">The dot-separated lists of related objects to return in the query results.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage. This parameter is not used.
            <br/>If the cache is empty but the source file exists, the file is read first and its contents are placed in the cache. Otherwise, the
            concatenated cache is simply returned.</param>
            <returns>All the available entities that match the expression.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.FindFirstCore(System.Func{`0,System.Boolean},Enkoni.Framework.SortSpecifications{`0},System.String[],Enkoni.Framework.Entities.DataSourceInfo,`0)">
            <summary>Finds the first entity of type <typeparamref name="TEntity"/> that matches the expression.</summary>
            <param name="expression">The expression that is used as a filter.</param>
            <param name="sortRules">The specification of the sort rules that must be applied. Use <see langword="null"/> to ignore the ordering.</param>
            <param name="includePaths">The dot-separated lists of related objects to return in the query results.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage. This parameter is not used.
            <br/>If the cache is empty but the source file exists, the file is read first and its contents are placed in the cache. Otherwise, the
            concatenated cache is simply returned.</param>
            <param name="defaultValue">The value that must be returned if the query yielded no results.</param>
            <returns>The first entity that matches the expression or the default value if there were no results.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.FindSingleCore(System.Func{`0,System.Boolean},System.String[],Enkoni.Framework.Entities.DataSourceInfo,`0)">
            <summary>Finds the single entity of type <typeparamref name="TEntity"/> that matches the expression.</summary>
            <param name="expression">The expression that is used as a filter.</param>
            <param name="includePaths">The dot-separated lists of related objects to return in the query results.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage. This parameter is not used.
            <br/>If the cache is empty but the source file exists, the file is read first and its contents are placed in the cache. Otherwise, the
            concatenated cache is simply returned.</param>
            <param name="defaultValue">The value that must be returned if the query yielded no results.</param>
            <returns>The single entity that matches the expression or the default value if there were no results.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.AddEntityCore(`0,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Adds a new entity to the repository. It is added to the addition cache until it is saved using the
            <see cref="M:Enkoni.Framework.Entities.Repository`1.SaveChanges"/> method. A temporary (negative) RecordID is assigned to the entity. This will be reset when the
            entity is saved.</summary>
            <param name="entity">The entity that must be added.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage. This parameter is not used.
            </param>
            <returns>The entity as it was added to the repository.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.AddEntitiesCore(System.Collections.Generic.IEnumerable{`0},Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Adds a collection of new entities to the repository. They are added to the addition cache until it is saved using the
            <see cref="M:Enkoni.Framework.Entities.Repository`1.SaveChanges"/> method. A temporary (negative) RecordID is assigned to the entities. This will be reset when
            the entity is saved.</summary>
            <param name="entities">The entities that must be added.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage. This parameter is not used.
            </param>
            <returns>The entities as they were added to the repository.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.DeleteEntityCore(`0,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Removes an entity from the repository. Depending on the status of the entity, it is removed from the addition-cache or it is added
            to the deletion-cache until it is saved using the <see cref="M:Enkoni.Framework.Entities.Repository`1.SaveChanges"/> method.</summary>
            <param name="entity">The entity that must be removed.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage. This parameter is not used.
            </param>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.DeleteEntitiesCore(System.Collections.Generic.IEnumerable{`0},Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Removes a collection of entities from the repository. Depending on the status of each entity, it is removed from the addition-cache
            or it is added to the deletion-cache until it is saved using the <see cref="M:Enkoni.Framework.Entities.Repository`1.SaveChanges"/> method.</summary>
            <param name="entities">The entities that must be removed.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage. This parameter is not used.
            </param>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.UpdateEntityCore(`0,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Updates an entity in the repository. Depending on the status of the entity, it is updated in the addition-cache or it is added to
            the update-cache.</summary>
            <param name="entity">The entity that contains the updated values.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage. This parameter is not used.
            </param>
            <returns>The entity as it was stored in the repository.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.UpdateEntitiesCore(System.Collections.Generic.IEnumerable{`0},Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Updates a collection of entities in the repository. Depending on the status of each entity, it is updated in the addition-cache or
            it is added to the update-cache.</summary>
            <param name="entities">The entities that contain the updated values.</param>
            <param name="dataSourceInfo">Information about the data source that may not have been set at an earlier stage. This parameter is not used.
            </param>
            <returns>The entities as they are stored in the repository.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.ReadAllRecordsFromFile(System.IO.FileInfo,Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Reads all the available records from the source file.</summary>
            <param name="sourceFile">Information about the file that must be read.</param>
            <param name="dataSourceInfo">Optional information about the data source.</param>
            <returns>The entities that were read from the file.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.WriteAllRecordsToFile(System.IO.FileInfo,Enkoni.Framework.Entities.DataSourceInfo,System.Collections.Generic.IEnumerable{`0})">
            <summary>Writes the specified records to the destination file.</summary>
            <param name="destinationFile">Information about the file in which the contents must be saved.</param>
            <param name="dataSourceInfo">Optional information about the data source.</param>
            <param name="contents">The new contents of the file.</param>
            <returns>The entities after they have been written to the file (in case the saving resulted in some updated values).</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.DisposeManagedResources">
            <summary>Disposes all the managed resources that are held by this instance.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.UseGlobalSourceFile(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Determines whether or not the globally specified source file must be used during an operation or if the specified source information
            specifies a different file.</summary>
            <param name="dataSourceInfo">The data source information that must be examined.</param>
            <returns><see langword="true"/> if the global source file must be used, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.SelectSourceFileInfo(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Selects the FileInfo that must be used. If the specified DataSourceInfo contains a valid FileInfo, it is used; otherwise the value
            of the property 'SourceFile' is used.</summary>
            <param name="dataSourceInfo">Any information regarding the file that is used as data source.</param>
            <returns>The FileInfo that must be used.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.ReadMultipleRecordsFromFile(System.IO.FileInfo,Enkoni.Framework.Entities.DataSourceInfo,System.Func{`0,System.Boolean})">
            <summary>Reads all the records from the file that match a specific criteria. The default implementation simply reads all the records from the
            file and selects the records that match the criteria. Override this method if a more efficient approach is feasible.</summary>
            <param name="sourceFile">The file that must be read.</param>
            <param name="dataSourceInfo">Optional information about the data source.</param>
            <param name="expression">The expression that must be used to select the correct records.</param>
            <returns>The entities that match the expression or an empty collection if there were no results.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.ReadSingleRecordFromFile(System.IO.FileInfo,Enkoni.Framework.Entities.DataSourceInfo,System.Func{`0,System.Boolean})">
            <summary>Reads a single the records from the file that matches a specific criteria. The default implementation simply reads all the records
            from the file and selects the first record that matches the criteria. Override this
            method if a more efficient approach is feasible.</summary>
            <param name="sourceFile">The file that must be read.</param>
            <param name="dataSourceInfo">Optional information about the data source.</param>
            <param name="expression">The expression that must be used to select the correct records.</param>
            <returns>The entity that matches the expression or <see langword="null"/> if there were no results.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.ApplyIdentifiers(System.Collections.Generic.IEnumerable{`0})">
            <summary>Applies new identifiers to the entities starting with identifier '1'. More often then not, entities that are read from a file do not
            have any identifiers. Therefore, they are applied here. If the source file already specifies identifiers for each record, override this method
            with an empty implementation to disable this behavior.</summary>
            <param name="entities">The entities to which the identifiers must be applied.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.ApplyIdentifiers(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>Applies new identifiers to the entities starting with the specified start value. More often then not, entities that are read from a
            file do not have any identifiers. Therefore, they are applied here. If the source file already specifies identifiers for each record, override
            this method with an empty implementation to disable this behavior.</summary>
            <param name="entities">The entities to which the identifiers must be applied.</param>
            <param name="startIdentifier">The first identifier that must be applied.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.OnSourceFileDeleted">
            <summary>Performs some actions in response to the source file being deleted. This will normally result in clearing the cache.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.OnSourceFileCreated">
            <summary>Performs some actions in response to the source file being created. This will normally result in filling the cache.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.OnSourceFileChanged">
            <summary>Performs some actions in response to the source file being changed. This will normally result in refreshing the cache.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.StartSourceFileMonitor">
            <summary>Starts the monitor that monitors the source file. It is save to call this method multiple times.</summary>
            <exception cref="T:System.InvalidOperationException">If both the file monitor and source file have not yet been set.</exception>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.StopSourceFileMonitor">
            <summary>Stops the monitor that monitors the source file. It is save to call this method multiple times.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.ResumeSourceFileMonitor">
            <summary>Resumes the monitor that monitors the source file. This method is added as a counterpart for the
            <see cref="M:Enkoni.Framework.Entities.FileRepository`1.PauseSourceFileMonitor"/> method, however since the file monitor does not have any specific pause/resume behavior, calling
            this method is the same as calling <see cref="M:Enkoni.Framework.Entities.FileRepository`1.StartSourceFileMonitor"/>.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.PauseSourceFileMonitor">
            <summary>Pauses the monitor that monitors the source file. This method is added as a counterpart for the
            <see cref="M:Enkoni.Framework.Entities.FileRepository`1.ResumeSourceFileMonitor"/> method, however since the file monitor does not have any specific pause/resume behavior, calling
            this method is the same as calling <see cref="M:Enkoni.Framework.Entities.FileRepository`1.StopSourceFileMonitor"/>.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.ClearCache">
            <summary>Clears the internal cache.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.RefreshCache(System.Collections.Generic.IEnumerable{`0})">
            <summary>Refreshes the internal cache by clearing it and filling it with the specified values.</summary>
            <param name="cacheValues">The values that must be placed in the cache.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.CreateSourceFileMonitor">
            <summary>Create the file monitor and hooks all the event-handlers.</summary>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.ConcatCache">
            <summary>Concatenates the internal caches into one complete and up-to-date cache.</summary>
            <returns>The concatenated cache-values.</returns>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.PrepareNewContent(Enkoni.Framework.Entities.DataSourceInfo)">
            <summary>Prepares the new contents for the data source file by checking the consistency of the caches and merging the caches.</summary>
            <param name="dataSourceInfo">Any information regarding the used data source.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.HandleSourceFileRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>Handles the situation in which the used source file is renamed. If the file is renamed to something other then the original file name,
            it is regarded to be the same as deleting the file, since the file can no longer be found under its original name. Otherwise, the event is
            treated as a created-event.</summary>
            <param name="sender">The instance that raised the event.</param>
            <param name="args">Some additional information regarding the event.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.HandleSourceFileDeleted(System.Object,System.IO.FileSystemEventArgs)">
            <summary>Handles the situation in which the used source file is deleted.</summary>
            <param name="sender">The instance that raised the event.</param>
            <param name="args">Some additional information regarding the event.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.HandleSourceFileCreated(System.Object,System.IO.FileSystemEventArgs)">
            <summary>Handles the situation in which the used source file is created.</summary>
            <param name="sender">The instance that raised the event.</param>
            <param name="args">Some additional information regarding the event.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.HandleSourceFileChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>Handles the situation in which the used source file is changed.</summary>
            <param name="sender">The instance that raised the event.</param>
            <param name="args">Some additional information regarding the event.</param>
        </member>
        <member name="M:Enkoni.Framework.Entities.FileRepository`1.HandleChangeEventTimeout(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>Handles the elapsed event of the change-event timer. If the timer elapsed, the assumption is made that the file change has finished
            and it is safe to call the <see cref="M:Enkoni.Framework.Entities.FileRepository`1.OnSourceFileChanged"/> method.</summary>
            <param name="sender">The instance that raised the event.</param>
            <param name="args">Some additional information regarding the event.</param>
        </member>
    </members>
</doc>
