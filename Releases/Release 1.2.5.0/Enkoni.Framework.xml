<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Enkoni.Framework</name>
    </assembly>
    <members>
        <member name="T:Enkoni.Framework.AsyncResultVoid">
            <summary>Represents the status of an asynchronous operation that returns void.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResultVoid.PendingState">
            <summary>Indicates that the operation is pending.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResultVoid.CompletedSynchronouslyState">
            <summary>Indicates that the operation has completed synchronously.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResultVoid.CompletedAsynchronouslyState">
            <summary>Indicates that the operation has completed asynchronously.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResultVoid.asyncCallback">
            <summary>The callback that is called when the operation completes.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResultVoid.asyncState">
            <summary>A user-defined object that qualifies or contains information about an asynchronous operation.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResultVoid.currentState">
            <summary>The current state of the operation.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResultVoid.asyncWaitHandle">
            <summary>Notifies any waiting thread that an event has occurred. This field may or may not be used depending on the usage of this class.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResultVoid.pendingException">
            <summary>The pending exception (if any) that was thrown by the executed method.</summary>
        </member>
        <member name="M:Enkoni.Framework.AsyncResultVoid.#ctor(System.AsyncCallback,System.Object)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.AsyncResultVoid"/> class.</summary>
            <param name="asyncCallback">The callback that is executed when the operation completes. Leave <see langword="null"/> if not used.</param>
            <param name="state">A user-defined object that qualifies or contains information about an asynchronous operation. Leave 
            <see langword="null"/> if not used.</param>
        </member>
        <member name="M:Enkoni.Framework.AsyncResultVoid.SetAsCompleted(System.Exception,System.Boolean)">
            <summary>Sets the status of the asynchronous call to completed.</summary>
            <param name="exception">The <see cref="T:System.Exception"/> that was thrown by the executed method. If no pendingException was thrown, pass a 
            <see langword="null"/> reference.</param>
            <param name="completedSynchronously"><c>True</c> if the asynchronous operation completed synchronously; otherwise, <c>false</c>.</param>
            <remarks>If the synchronous completion of the call is detected in the <see cref="T:System.AsyncCallback"/> delegate, it is probable that the thread 
            that initiated the asynchronous operation is the current thread.<br/>
            <br/>
            <b>Notes to Implementers:</b><br/>
            Most implementers of the <see cref="T:System.IAsyncResult"/> interface will not use this property and should return <see langword="false"/>.</remarks>
        </member>
        <member name="M:Enkoni.Framework.AsyncResultVoid.EndInvoke">
            <summary>Ends the invocation by waiting for the wait handle to finish.</summary>
        </member>
        <member name="P:Enkoni.Framework.AsyncResultVoid.IsCompleted">
            <summary>Gets a value indicating whether the asynchronous operation has completed.</summary>
        </member>
        <member name="P:Enkoni.Framework.AsyncResultVoid.AsyncState">
            <summary>Gets a user-defined object that qualifies or contains information about an asynchronous operation.</summary>
        </member>
        <member name="P:Enkoni.Framework.AsyncResultVoid.CompletedSynchronously">
            <summary>Gets a value indicating whether the asynchronous operation completed synchronously.</summary>
        </member>
        <member name="P:Enkoni.Framework.AsyncResultVoid.AsyncWaitHandle">
            <summary>Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.</summary>
        </member>
        <member name="T:Enkoni.Framework.Collections.CircularStack`1">
            <summary>Represents a fixed size last-in-first-out (LIFO) collection of instances of the same arbitrary type that uses a circular collection as internal storage.</summary>
            <typeparam name="T">Specifies the type of elements in the stack.</typeparam>
        </member>
        <member name="F:Enkoni.Framework.Collections.CircularStack`1.storage">
            <summary>The actual storage that contains the 'stack' items. The virtual index of each item is used as key.</summary>
        </member>
        <member name="F:Enkoni.Framework.Collections.CircularStack`1.currentIndex">
            <summary>The index of the last added item. In other words the index of the item that is returned by the Pop or Peek operation.</summary>
        </member>
        <member name="F:Enkoni.Framework.Collections.CircularStack`1.version">
            <summary>The version that is used to determine if the stack is modified.</summary>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/> class using an unlimited maximum size and the default capacity.
            </summary>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/> class using a maximum size.</summary>
            <param name="maximumSize">The number of items this stack can contain at most. Once this number has been reached, the oldest elements will be 
            overwritten. Use <c>-1</c> to use an unlimited maximum size.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The maximum size is not set to a valid value.</exception>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/> class that contains elements copied from the specified collection
            and has sufficient capacity to accommodate the number of elements copied.</summary>
            <param name="collection">The collection whose elements are copied to the new stack.</param>
            <exception cref="T:System.ArgumentNullException">The specified collection is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/> class that contains elements copied from the specified collection
            and has a maximum size.</summary>
            <param name="collection">The collection whose elements are copied to the new stack.</param>
            <param name="maximumSize">The number of items this stack can contain at most. Once this number has been reached, the oldest elements will be 
            overwritten. Use <c>-1</c> to use an unlimited maximum size.</param>
            <exception cref="T:System.ArgumentNullException">The specified collection is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The maximum size is not set to a valid value.</exception>
            <exception cref="T:System.ArgumentException">The specified collection exceeds the specified maximum size.</exception>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. 
            The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.<br/>
            -or- <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.<br/>
            -or- The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from index to the end of the 
            destination array.</exception>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.Clear">
            <summary>Removes all objects from the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</summary>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.Contains(`0)">
            <summary>Determines whether an element is in the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</summary>
            <param name="item">The object to locate in the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>. The value can be <see langword="null"/> for reference types.
            </param>
            <returns><see langword="true"/> if item is found in the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.CopyTo(`0[],System.Int32)">
            <summary>Copies the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/> to an existing one-dimensional <see cref="T:System.Array"/>, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="arrayIndex"/> is equal to or greater than the length of array.<br/>
            -or- The number of elements in the source <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/> is greater than the available space from 
            <paramref name="arrayIndex"/> to the end of the destination array.</exception>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.GetEnumerator">
            <summary>Returns an enumerator for the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</summary>
            <returns>An <see cref="T:Enkoni.Framework.Collections.CircularStack`1.Enumerator"/> for the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.Peek">
            <summary>Returns the object at the top of the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/> without removing it.</summary>
            <returns>The object at the top of the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/> is empty.</exception>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.Pop">
            <summary>Removes and returns the object at the top of the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</summary>
            <returns>The object removed from the top of the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/> is empty.</exception>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.Push(`0)">
            <summary>Inserts an object at the top of the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>. If the current size of the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/> has
            reached the maximum size, <paramref name="item"/> will overwrite the first or oldest item in the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</summary>
            <param name="item">The object to push onto the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>. The value can be <see langword="null"/> for reference types.
            </param>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.ToArray">
            <summary>Copies the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/> to a new array.</summary>
            <returns>A new array containing copies of the elements of the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.TrimExcess">
            <summary>Sets the capacity to the actual number of elements in the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>, if that number is less than 90 percent of 
            current capacity.</summary>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.ClearCore">
            <summary>Removes all objects from the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</summary>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.ContainsCore(`0)">
            <summary>Determines whether an element is in the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</summary>
            <param name="item">The object to locate in the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>. The value can be <see langword="null"/> for reference types.
            </param>
            <returns><see langword="true"/> if item is found in the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.CopyToCore(`0[],System.Int32)">
            <summary>Copies the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/> to an existing one-dimensional <see cref="T:System.Array"/>, starting at the specified array index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from 
            <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.GetEnumeratorCore">
            <summary>Returns an enumerator for the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</summary>
            <returns>An <see cref="T:Enkoni.Framework.Collections.CircularStack`1.Enumerator"/> for the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.PeekCore">
            <summary>Returns the object at the top of the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/> without removing it.</summary>
            <returns>The object at the top of the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.PopCore">
            <summary>Removes and returns the object at the top of the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</summary>
            <returns>The object removed from the top of the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.PushCore(`0)">
            <summary>Inserts an object at the top of the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>. If the current size of the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/> has
            reached the maximum size, <paramref name="item"/> will overwrite the first or oldest item in the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</summary>
            <param name="item">The object to push onto the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>. The value can be <see langword="null"/> for reference types.
            </param>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.ToArrayCore">
            <summary>Copies the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/> to a new array.</summary>
            <returns>A new array containing copies of the elements of the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.TrimExcessCore">
            <summary>Sets the capacity to the actual number of elements in the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>, if that number is less than 90 percent of 
            current capacity.</summary>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.CopyTo(System.Array,System.Int32)">
            <summary>Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. 
            The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="P:Enkoni.Framework.Collections.CircularStack`1.System#Collections#ICollection#IsSynchronized">
            <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).</summary>
        </member>
        <member name="P:Enkoni.Framework.Collections.CircularStack`1.System#Collections#ICollection#SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.</summary>
        </member>
        <member name="P:Enkoni.Framework.Collections.CircularStack`1.Count">
            <summary>Gets the number of elements actually contained in the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</summary>
        </member>
        <member name="P:Enkoni.Framework.Collections.CircularStack`1.MaximumSize">
            <summary>Gets the maximum size of this <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>. The value <c>-1</c> indicates an unlimited maximum size.</summary>
        </member>
        <member name="P:Enkoni.Framework.Collections.CircularStack`1.IsSynchronized">
            <summary>Gets a value indicating whether access to the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/> is synchronized (thread safe).</summary>
        </member>
        <member name="P:Enkoni.Framework.Collections.CircularStack`1.SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</summary>
        </member>
        <member name="T:Enkoni.Framework.Collections.CircularStack`1.Enumerator">
            <summary>Enumerates the elements of a <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</summary>
        </member>
        <member name="F:Enkoni.Framework.Collections.CircularStack`1.Enumerator.enumeratorSource">
            <summary>The collection that is enumerated.</summary>
        </member>
        <member name="F:Enkoni.Framework.Collections.CircularStack`1.Enumerator.enumeratorIndex">
            <summary>The index at which the enumerator is currently looking.</summary>
        </member>
        <member name="F:Enkoni.Framework.Collections.CircularStack`1.Enumerator.stackVersion">
            <summary>The version of the stack at the time the enumerator was created.</summary>
        </member>
        <member name="F:Enkoni.Framework.Collections.CircularStack`1.Enumerator.startIndex">
            <summary>The index at which the enumerator started the look.</summary>
        </member>
        <member name="F:Enkoni.Framework.Collections.CircularStack`1.Enumerator.isPassedFirstItem">
            <summary>Indicates if the enumerator has already enumerated over the first item.</summary>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.Enumerator.#ctor(Enkoni.Framework.Collections.CircularStack{`0})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Collections.CircularStack`1.Enumerator"/> struct.</summary>
            <param name="enumeratorSource">The collection that must be enumerated.</param>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.Enumerator.MoveNext">
            <summary>Advances the enumerator to the next element of the <see cref="T:Enkoni.Framework.Collections.CircularStack`1"/>.</summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator 
            has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.Enumerator.Dispose">
            <summary>Releases all resources used by the <see cref="T:Enkoni.Framework.Collections.CircularStack`1.Enumerator"/>.</summary>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.Enumerator.System#Collections#IEnumerator#Reset">
            <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
        </member>
        <member name="M:Enkoni.Framework.Collections.CircularStack`1.Enumerator.System#Collections#IEnumerator#MoveNext">
            <summary>Advances the enumerator to the next element of the collection.</summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator 
            has passed the end of the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created.</exception>
        </member>
        <member name="P:Enkoni.Framework.Collections.CircularStack`1.Enumerator.Current">
            <summary>Gets the element at the current position of the enumerator.</summary>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last 
            element.</exception>
        </member>
        <member name="P:Enkoni.Framework.Collections.CircularStack`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>Gets the current element in the collection.</summary>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last 
            element.</exception>
        </member>
        <member name="T:Enkoni.Framework.Collections.Comparer`1">
            <summary>Provides a generic implementation of <see cref="T:System.Collections.Generic.IComparer`1"/> that is able to compare two objects based on a specified field name, 
            which can even be concatenated using the '.' character. The final field by which the objects must be compared must implement the 
            <c>CompareTo</c> method which is defined by the <see cref="T:System.IComparable"/> and <see cref="T:System.IComparable`1"/> interfaces.</summary>
            <typeparam name="T">The type of object that must be compared.</typeparam>
        </member>
        <member name="F:Enkoni.Framework.Collections.Comparer`1.fieldName">
            <summary>The field by which the objects must be ordered.</summary>
        </member>
        <member name="F:Enkoni.Framework.Collections.Comparer`1.order">
            <summary>The direction of the order.</summary>
        </member>
        <member name="F:Enkoni.Framework.Collections.Comparer`1.compareDelegate">
            <summary>The Func-delegate that does the actual work.</summary>
        </member>
        <member name="M:Enkoni.Framework.Collections.Comparer`1.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Collections.Comparer`1"/> class that compares objects in an ascending order.</summary>
            <param name="fieldName">The field that must be used to compare two objects. Use the '.' character to specify a field that is deeper in the
            chain of hierarchy.</param>
        </member>
        <member name="M:Enkoni.Framework.Collections.Comparer`1.#ctor(System.String,Enkoni.Framework.SortOrder)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Collections.Comparer`1"/> class.</summary>
            <param name="fieldName">The field that must be used to compare two objects. Use the '.' character to specify a field that is deeper in the 
            chain of hierarchy.</param>
            <param name="order">The ordering direction that must be used.</param>
        </member>
        <member name="M:Enkoni.Framework.Collections.Comparer`1.Compare(`0,`0)">
            <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>If <b>x</b> is smaller than <b>y</b>, a value less than zero is returned. If <b>x</b> equals <b>y</b>, zero is returned. If <b>x</b> 
            is greater than <b>y</b>, a value greater than zero is returned.<br/>
            If the sort-order was set to <see cref="F:Enkoni.Framework.SortOrder.Descending"/>, the results are inverted.</returns>
        </member>
        <member name="T:Enkoni.Framework.Collections.Extensions">
            <summary>This class contains some all-purpose extension-methods.</summary>
        </member>
        <member name="M:Enkoni.Framework.Collections.Extensions.Remove``1(System.Collections.Generic.ICollection{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Adds an overload for the ICollection-method 'Remove(T)' which lets the user define a comparer that must be used.</summary>
            <typeparam name="T">The type of element that is stored in the collection.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.ICollection`1"/> to remove the item from.</param>
            <param name="item">The item that must be removed.</param>
            <param name="comparer">The comparer that must be used to find the appropriate item in the collection.</param>
            <returns><see langword="true"/> if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, <see langword="false"/>. 
            This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">One or more parameters are null.</exception>
        </member>
        <member name="M:Enkoni.Framework.Collections.Extensions.IndexOf``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Adds an overload for the IList-method 'IndexOf(T)' which lets the user define a comparer to look for the desired item.</summary>
            <typeparam name="T">The type of element that is stored in the list.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IList`1"/> that must be searched.</param>
            <param name="item">The item that must be removed from the list.</param>
            <param name="comparer">The comparer that must be used to find the appropriate item in the list.</param>
            <returns>The index of <paramref name="item"/> if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Enkoni.Framework.Collections.Extensions.IndexOf``1(System.Collections.Generic.List{``0},``0,System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Adds an overload for the List-method 'IndexOf(T, int)' which lets the user define a comparer to look for the desired item.</summary>
            <typeparam name="T">The type of element that is stored in the list.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.List`1"/> that must be searched.</param>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1"/>. The value can be <see langword="null"/> for reference types.</param>
            <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
            <param name="comparer">The comparer that must be used to find the appropriate item in the list.</param>
            <returns>The zero-based index of the first occurrence of item within the range of elements in the <see cref="T:System.Collections.Generic.List`1"/> that extends from 
            index to the last element, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="comparer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1"/>.
            </exception>
        </member>
        <member name="M:Enkoni.Framework.Collections.Extensions.IndexOf``1(System.Collections.Generic.List{``0},``0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>Adds an overload for the List-method 'IndexOf(T, int, int)' which lets the user define a comparer to look for the desired item.
            </summary>
            <typeparam name="T">The type of element that is stored in the list.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.List`1"/> that must be searched.</param>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.List`1"/>. The value can be <see langword="null"/> for reference types.</param>
            <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="comparer">The comparer that must be used to find the appropriate item in the list.</param>
            <returns>The zero-based index of the first occurrence of item within the range of elements in the <see cref="T:System.Collections.Generic.List`1"/> that starts at index 
            and contains count number of elements, if found; otherwise, –1.</returns>
            <exception cref="T:System.ArgumentNullException">Parameter <paramref name="comparer"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is outside the range of valid indexes for the <see cref="T:System.Collections.Generic.List`1"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="count"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> and <paramref name="count"/> do not specify a valid section in the 
            <see cref="T:System.Collections.Generic.List`1"/>.</exception>
        </member>
        <member name="T:Enkoni.Framework.ConfigurationException">
            <summary>This exception can be thrown when a problem with the configuration has been discovered.</summary>
        </member>
        <member name="M:Enkoni.Framework.ConfigurationException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.ConfigurationException"/> class.</summary>
        </member>
        <member name="M:Enkoni.Framework.ConfigurationException.#ctor(System.String)">
            <summary> Initializes a new instance of the <see cref="T:Enkoni.Framework.ConfigurationException"/> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Enkoni.Framework.ConfigurationException.#ctor(System.String,System.String)">
            <summary> Initializes a new instance of the <see cref="T:Enkoni.Framework.ConfigurationException"/> class with a specified error message.</summary>
            <param name="configurationParameter">The name of the configuration parameter that causes the problem.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Enkoni.Framework.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.ConfigurationException"/> class with a specified error message and a reference to the 
            inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/> reference if no inner 
            exception is specified.</param>
        </member>
        <member name="M:Enkoni.Framework.ConfigurationException.#ctor(System.String,System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.ConfigurationException"/> class with a specified error message and a reference to the 
            inner exception that is the cause of this exception.</summary>
            <param name="configurationParameter">The name of the configuration parameter that causes the problem.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/> reference if no inner 
            exception is specified.</param>
        </member>
        <member name="M:Enkoni.Framework.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.ConfigurationException"/> class with serialized data.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enkoni.Framework.ConfigurationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The info parameter is <see langword="null"/>.</exception>
        </member>
        <member name="P:Enkoni.Framework.ConfigurationException.ConfigurationParameter">
            <summary>Gets the name of the configuration parameter that caused the problem.</summary>
        </member>
        <member name="T:Enkoni.Framework.CombinedSpecification`1">
            <summary>This abstract class defines the basic API of a specification-type that combines two specifications.</summary>
            <typeparam name="T">The type of object that is ultimately selected by the specification.</typeparam>
        </member>
        <member name="T:Enkoni.Framework.Specification`1">
            <summary>This class contains the basic functionality for any specification-class.</summary>
            <typeparam name="T">The type of object that is ultimately selected by the specification.</typeparam>
        </member>
        <member name="T:Enkoni.Framework.ISpecification`1">
            <summary>This interface describes the public API of the classes that make up the specification subsystem that is implemented using the 
            Specification Pattern.</summary>
            <typeparam name="T">The type of object that is ultimately selected by the specification.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.ISpecification`1.And(Enkoni.Framework.ISpecification{`0})">
            <summary>Creates an 'And' specification that can be used to combine two specifications and compare them using the '&amp;&amp;' operation.
            </summary>
            <param name="specification">The specification that must be combined.</param>
            <returns>The combined specification.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISpecification`1.Or(Enkoni.Framework.ISpecification{`0})">
            <summary>Creates an 'Or' specification that can be used to combine two specifications and compare them using the '||' operation.</summary>
            <param name="specification">The specification that must be combined.</param>
            <returns>The combined specification.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISpecification`1.SetMaximumResults(System.Int32)">
            <summary>Sets the maximum number of records that must be retrieved using the specification.</summary>
            <param name="maximum">The maximum number. A value of '-1' means 'retrieve all'.</param>
        </member>
        <member name="M:Enkoni.Framework.ISpecification`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>Specifies the way the sequence must be sorted. It used a default sort order of ascending.</summary>
            <typeparam name="TKey">The type of object that must be used to perform the sorting.</typeparam>
            <param name="keySelector">The expression that points to the field that must be used to perform the sorting.</param>
            <returns>The specification with the sorting rules.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISpecification`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Enkoni.Framework.SortOrder)">
            <summary>Specifies the way the sequence must be sorted.</summary>
            <typeparam name="TKey">The type of object that must be used to perform the sorting.</typeparam>
            <param name="keySelector">The expression that points to the field that must be used to perform the sorting.</param>
            <param name="direction">The direction that the ordering must take place in.</param>
            <returns>The specification with the sorting rules.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISpecification`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>Specifies the way the sequence must be sorted. It used a default sort order of descending.</summary>
            <typeparam name="TKey">The type of object that must be used to perform the sorting.</typeparam>
            <param name="keySelector">The expression that points to the field that must be used to perform the sorting.</param>
            <returns>The specification with the sorting rules.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISpecification`1.Visit(Enkoni.Framework.ISpecificationVisitor{`0})">
            <summary>Visits the specification and lets <paramref name="visitor"/> convert the contents of the specification into an expression that can 
            be used to perform the actual filtering/selection.</summary>
            <param name="visitor">The instance that will perform the conversion.</param>
            <returns>The expression that was created using this specification.</returns>
        </member>
        <member name="E:Enkoni.Framework.ISpecification`1.MaximumResultsUpdated">
            <summary>Occurs when the maximum number of records has changed.</summary>
        </member>
        <member name="E:Enkoni.Framework.ISpecification`1.SortRulesUpdated">
            <summary>Occurs when the sorting rules have changed.</summary>
        </member>
        <member name="P:Enkoni.Framework.ISpecification`1.MaximumResults">
            <summary>Gets the maximum number of results that must be returned by the specification.</summary>
        </member>
        <member name="P:Enkoni.Framework.ISpecification`1.SortRules">
            <summary>Gets the sorting rules.</summary>
        </member>
        <member name="F:Enkoni.Framework.Specification`1.maxResultsUpdated">
            <summary>The delegate that holds the references to the various event handlers. Normally, there will be at most one handler.</summary>
        </member>
        <member name="F:Enkoni.Framework.Specification`1.maxResultsChangePending">
            <summary>Indicates if there is a change-event pending.</summary>
        </member>
        <member name="F:Enkoni.Framework.Specification`1.sortRulesUpdated">
            <summary>The delegate that holds the references to the various event handlers. Normally, there will be at most one handler.</summary>
        </member>
        <member name="F:Enkoni.Framework.Specification`1.sortRulesChangePending">
            <summary>Indicates if there is a change-event pending.</summary>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Specification`1"/> class.</summary>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.SetMaximumResults(System.Int32)">
            <summary>Sets the maximum number of records that must be retrieved using the specification.</summary>
            <param name="maximum">The maximum number. A value of '-1' means 'retrieve all'.</param>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>Specifies the way the sequence must be sorted. It used a default sort order of ascending.</summary>
            <typeparam name="TKey">The type of object that must be used to perform the sorting.</typeparam>
            <param name="keySelector">The expression that points to the field that must be used to perform the sorting.</param>
            <returns>The specification with the sorting rules.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>Specifies the way the sequence must be sorted. It used a default sort order of descending.</summary>
            <typeparam name="TKey">The type of object that must be used to perform the sorting.</typeparam>
            <param name="keySelector">The expression that points to the field that must be used to perform the sorting.</param>
            <returns>The specification with the sorting rules.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Enkoni.Framework.SortOrder)">
            <summary>Specifies the way the sequence must be sorted.</summary>
            <typeparam name="TKey">The type of object that must be used to perform the sorting.</typeparam>
            <param name="keySelector">The expression that points to the field that must be used to perform the sorting.</param>
            <param name="direction">The direction that the ordering must take place in.</param>
            <returns>The specification with the sorting rules.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.OrderBy(Enkoni.Framework.SortSpecifications{`0})">
            <summary>Specifies the way the sequence must be sorted.</summary>
            <param name="sortSpecifications">The specifications that define the way the sequence must be sorted.</param>
            <returns>The specification with the sorting rules.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.And(Enkoni.Framework.ISpecification{`0})">
            <summary>Creates an 'And' specification that can be used to combine two specifications and compare them using the '&amp;&amp;' operation.
            </summary>
            <param name="specification">The specification that must be combined.</param>
            <returns>The combined specification.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.Or(Enkoni.Framework.ISpecification{`0})">
            <summary>Creates an 'Or' specification that can be used to combine two specifications and compare them using the '||' operation.</summary>
            <param name="specification">The specification that must be combined.</param>
            <returns>The combined specification.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.Visit(Enkoni.Framework.ISpecificationVisitor{`0})">
            <summary>Visits the specification and lets <paramref name="visitor"/> convert the contents of the specification into an expression that can 
            be used to perform the actual filtering/selection.</summary>
            <param name="visitor">The instance that will perform the conversion.</param>
            <returns>The expression that was created using this specification.</returns>
            <exception cref="T:System.ArgumentNullException">Parameter is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.HandleMaximumResultsUpdated(System.Object,Enkoni.Framework.EventArgs{System.Int32})">
            <summary>Handles the occurrence of a changed maximum for the number of records that must be retrieved.</summary>
            <param name="sender">The object that raised the event.</param>
            <param name="args">Some additional information regarding the event.</param>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.HandleOrderByRulesUpdated(System.Object,Enkoni.Framework.SortSpecificationsEventArgs{`0})">
            <summary>Handles the occurrence of a changed set of sorting rules.</summary>
            <param name="sender">The object that raised the event.</param>
            <param name="args">Some additional information regarding the event.</param>
        </member>
        <member name="M:Enkoni.Framework.Specification`1.VisitCore(Enkoni.Framework.ISpecificationVisitor{`0})">
            <summary>Visits the specification and lets <paramref name="visitor"/> convert the contents of the specification into an expression that can 
            be used to perform the actual filtering/selection.</summary>
            <param name="visitor">The instance that will perform the conversion.</param>
            <returns>The expression that was created using this specification.</returns>
        </member>
        <member name="E:Enkoni.Framework.Specification`1.MaximumResultsUpdated">
            <summary>Occurs when the maximum number of records has changed.</summary>
        </member>
        <member name="E:Enkoni.Framework.Specification`1.SortRulesUpdated">
            <summary>Occurs when the sort rules have been updated.</summary>
        </member>
        <member name="P:Enkoni.Framework.Specification`1.MaximumResults">
            <summary>Gets the maximum number of records that must be retrieved using this specification.</summary>
        </member>
        <member name="P:Enkoni.Framework.Specification`1.SortRules">
            <summary>Gets the sorting rules that are specified.</summary>
        </member>
        <member name="M:Enkoni.Framework.CombinedSpecification`1.#ctor(Enkoni.Framework.ISpecification{`0},Enkoni.Framework.ISpecification{`0})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.CombinedSpecification`1"/> class.</summary>
            <param name="leftOperand">The left operand of the combination.</param>
            <param name="rightOperand">The right operand of the combination.</param>
        </member>
        <member name="P:Enkoni.Framework.CombinedSpecification`1.LeftOperand">
            <summary>Gets the left operand of the combination.</summary>
        </member>
        <member name="P:Enkoni.Framework.CombinedSpecification`1.RightOperand">
            <summary>Gets the right operand of the combination.</summary>
        </member>
        <member name="T:Enkoni.Framework.AndSpecification`1">
            <summary>This class contains a specification type that combines two specifications using an AND operation.</summary>
            <typeparam name="T">The type of object that is ultimately selected by the specification.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.AndSpecification`1.#ctor(Enkoni.Framework.ISpecification{`0},Enkoni.Framework.ISpecification{`0})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.AndSpecification`1"/> class.</summary>
            <param name="leftOperand">The left operant of the combination.</param>
            <param name="rightOperand">The right operand of the combination.</param>
        </member>
        <member name="M:Enkoni.Framework.AndSpecification`1.VisitCore(Enkoni.Framework.ISpecificationVisitor{`0})">
            <summary>Visits the specification and lets <paramref name="visitor"/> convert the contents of the specification into an expression that can 
            be used to perform the actual filtering/selection.</summary>
            <param name="visitor">The instance that will perform the conversion.</param>
            <returns>The expression that was created using this specification.</returns>
        </member>
        <member name="T:Enkoni.Framework.BusinessRuleSpecification`1">
            <summary>This class implements a specific Specification type that holds information about a special business rule.</summary>
            <typeparam name="T">The type of object to which the specification applies.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.BusinessRuleSpecification`1.#ctor(System.String,System.Object[])">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.BusinessRuleSpecification`1"/> class.</summary>
            <param name="ruleName">The name of the rule that must be executed.</param>
            <param name="arguments">The arguments that must be used by the business rule.</param>
        </member>
        <member name="M:Enkoni.Framework.BusinessRuleSpecification`1.VisitCore(Enkoni.Framework.ISpecificationVisitor{`0})">
            <summary>Visits the specification and lets <paramref name="visitor"/> convert the contents of the specification into an expression that can 
            be used to perform the actual filtering/selection.</summary>
            <param name="visitor">The instance that will perform the conversion.</param>
            <returns>The expression that was created using this specification.</returns>
        </member>
        <member name="P:Enkoni.Framework.BusinessRuleSpecification`1.RuleName">
            <summary>Gets the name of the business rule that must be executed.</summary>
        </member>
        <member name="P:Enkoni.Framework.BusinessRuleSpecification`1.RuleArguments">
            <summary>Gets any arguments that were passed and may be required to execute the business rule.</summary>
        </member>
        <member name="T:Enkoni.Framework.AsyncResult`1">
            <summary>Represents the status of an asynchronous operation.</summary>
            <typeparam name="T">The type that is returned by the asynchronous operation.</typeparam>
        </member>
        <member name="F:Enkoni.Framework.AsyncResult`1.PendingState">
            <summary>Indicates that the operation is pending.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResult`1.CompletedSynchronouslyState">
            <summary>Indicates that the operation has completed synchronously.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResult`1.CompletedAsynchronouslyState">
            <summary>Indicates that the operation has completed asynchronously.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResult`1.asyncCallback">
            <summary>The callback that is called when the operation completes.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResult`1.asyncState">
            <summary>A user-defined object that qualifies or contains information about an asynchronous operation.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResult`1.currentState">
            <summary>The current state of the operation.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResult`1.asyncWaitHandle">
            <summary>Notifies any waiting thread that an event has occurred. This field may or may not be used depending on the usage of this class.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResult`1.pendingException">
            <summary>The pending exception (if any) that was thrown by the executed method.</summary>
        </member>
        <member name="F:Enkoni.Framework.AsyncResult`1.operationResult">
            <summary>The actual result that was returned by the asynchronous method.</summary>
        </member>
        <member name="M:Enkoni.Framework.AsyncResult`1.#ctor(System.AsyncCallback,System.Object)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.AsyncResult`1"/> class.</summary>
            <param name="asyncCallback">The callback that is executed when the operation completes. Leave <see langword="null"/> if not used.</param>
            <param name="state">A user-defined object that qualifies or contains information about an asynchronous operation. Leave 
            <see langword="null"/> if not used.</param>
        </member>
        <member name="M:Enkoni.Framework.AsyncResult`1.SetAsCompleted(`0,System.Exception,System.Boolean)">
            <summary>Sets the status of the asynchronous call to completed.</summary>
            <param name="result">The result that returned by the asynchronous operation.</param>
            <param name="exception">The <see cref="T:System.Exception"/> that was thrown by the executed method. If no pending Exception was thrown, pass a <see langword="null"/> 
            reference.</param>
            <param name="completedSynchronously"><see langword="true"/> if the asynchronous operation completed synchronously; otherwise, <see langword="false"/>.</param>
            <remarks>If the synchronous completion of the call is detected in the <see cref="T:System.AsyncCallback"/> delegate, it is probable that the thread that initiated the 
            asynchronous operation is the current thread.<br/>
            <br/>
            <b>Notes to Implementers:</b><br/>
            Most implementers of the <see cref="T:System.IAsyncResult"/> interface will not use this property and should return <see langword="false"/>.</remarks>
        </member>
        <member name="M:Enkoni.Framework.AsyncResult`1.EndInvoke">
            <summary>Ends the invocation by waiting for the wait handle to finish.</summary>
            <returns>The return value of the asynchronous operation.</returns>
        </member>
        <member name="P:Enkoni.Framework.AsyncResult`1.IsCompleted">
            <summary>Gets a value indicating whether the asynchronous operation has completed.</summary>
        </member>
        <member name="P:Enkoni.Framework.AsyncResult`1.AsyncState">
            <summary>Gets a user-defined object that qualifies or contains information about an asynchronous operation.</summary>
        </member>
        <member name="P:Enkoni.Framework.AsyncResult`1.CompletedSynchronously">
            <summary>Gets a value indicating whether the asynchronous operation completed synchronously.</summary>
        </member>
        <member name="P:Enkoni.Framework.AsyncResult`1.AsyncWaitHandle">
            <summary>Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.</summary>
        </member>
        <member name="T:Enkoni.Framework.FixedDateTimeProvider">
            <summary>A provider that can be used to retrieve the current date and time using a fixed date and time.</summary>
        </member>
        <member name="T:Enkoni.Framework.DateTimeProvider">
            <summary>A provider that can be used to retrieve the current date and time in a way that can be influenced using dependency injection.</summary>
        </member>
        <member name="M:Enkoni.Framework.DateTimeProvider.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.DateTimeProvider"/> class.</summary>
        </member>
        <member name="P:Enkoni.Framework.DateTimeProvider.MaxValue">
            <summary>Gets the largest possible value of <see cref="T:System.DateTime"/>.</summary>
        </member>
        <member name="P:Enkoni.Framework.DateTimeProvider.MinValue">
            <summary>Gets the smallest possible value of <see cref="T:System.DateTime"/>.</summary>
        </member>
        <member name="P:Enkoni.Framework.DateTimeProvider.Now">
            <summary>Gets a <see cref="T:System.DateTime"/> object that is set to the current date and time on this computer, expressed as the local time.</summary>
        </member>
        <member name="P:Enkoni.Framework.DateTimeProvider.Today">
            <summary>Gets the current date.</summary>
        </member>
        <member name="P:Enkoni.Framework.DateTimeProvider.UtcNow">
            <summary>Gets a <see cref="T:System.DateTime"/> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).</summary>
        </member>
        <member name="F:Enkoni.Framework.FixedDateTimeProvider.innerClock">
            <summary>The fixed date and time that is being used.</summary>
        </member>
        <member name="M:Enkoni.Framework.FixedDateTimeProvider.#ctor(System.DateTime)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.FixedDateTimeProvider"/> class using a fixed date and time.</summary>
            <param name="fixedValue">The date and time that must be used by this provider.</param>
        </member>
        <member name="P:Enkoni.Framework.FixedDateTimeProvider.Now">
            <summary>Gets a <see cref="T:System.DateTime"/> object that is set to the current date and time on this computer, expressed as the local time.</summary>
        </member>
        <member name="P:Enkoni.Framework.FixedDateTimeProvider.Today">
            <summary>Gets the current date.</summary>
        </member>
        <member name="P:Enkoni.Framework.FixedDateTimeProvider.UtcNow">
            <summary>Gets a <see cref="T:System.DateTime"/> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).</summary>
        </member>
        <member name="T:Enkoni.Framework.OffsetDateTimeProvider">
            <summary>A provider that can be used to retrieve the current date and time but with a specified offset applied.</summary>
        </member>
        <member name="F:Enkoni.Framework.OffsetDateTimeProvider.offset">
            <summary>The offset that is aplied to the current date and time.</summary>
        </member>
        <member name="M:Enkoni.Framework.OffsetDateTimeProvider.#ctor(System.TimeSpan)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.OffsetDateTimeProvider"/> class using a specified offset to the current date and time.</summary>
            <param name="offset">A negative of positive offset that will be added to the <see cref="T:System.DateTime"/> values that are retrieved through the properties and methods of this class.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The sum of the current date and time and <paramref name="offset"/> results in a value that is less than <see cref="F:System.DateTime.MinValue"/> or 
            greater than <see cref="F:System.DateTime.MaxValue"/>.</exception>
        </member>
        <member name="P:Enkoni.Framework.OffsetDateTimeProvider.Now">
            <summary>Gets a <see cref="T:System.DateTime"/> object that is set to the current date and time on this computer, expressed as the local time.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The sum of the current date and time and the offset results in a value that is less than <see cref="F:System.DateTime.MinValue"/> or 
            greater than <see cref="F:System.DateTime.MaxValue"/>.</exception>
        </member>
        <member name="P:Enkoni.Framework.OffsetDateTimeProvider.Today">
            <summary>Gets the current date.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The sum of the current date and time and the offset results in a value that is less than <see cref="F:System.DateTime.MinValue"/> or 
            greater than <see cref="F:System.DateTime.MaxValue"/>.</exception>
        </member>
        <member name="P:Enkoni.Framework.OffsetDateTimeProvider.UtcNow">
            <summary>Gets a <see cref="T:System.DateTime"/> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">The sum of the current date and time and the offsaet results in a value that is less than <see cref="F:System.DateTime.MinValue"/> or 
            greater than <see cref="F:System.DateTime.MaxValue"/>.</exception>
        </member>
        <member name="T:Enkoni.Framework.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Enkoni.Framework.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Enkoni.Framework.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Enkoni.Framework.Properties.Resources.FormatExceptionInvalidBooleanValue">
            <summary>
              Looks up a localized string similar to {0} is not a valid value for Boolean..
            </summary>
        </member>
        <member name="P:Enkoni.Framework.Properties.Resources.FormatExceptionInvalidCharValue">
            <summary>
              Looks up a localized string similar to {0} is not a valid value for Char..
            </summary>
        </member>
        <member name="P:Enkoni.Framework.Properties.Resources.FormatExceptionInvalidDateTimeValue">
            <summary>
              Looks up a localized string similar to {0} is not a valid value for DateTime..
            </summary>
        </member>
        <member name="P:Enkoni.Framework.Properties.Resources.FormatExceptionInvalidFormatting">
            <summary>
              Looks up a localized string similar to {0} is not correctly formatted..
            </summary>
        </member>
        <member name="P:Enkoni.Framework.Properties.Resources.FormatExceptionInvalidTypeValue">
            <summary>
              Looks up a localized string similar to {0} is not a valid value for {1}..
            </summary>
        </member>
        <member name="P:Enkoni.Framework.Properties.Resources.InvalidOperationExceptionInvalidFormatString">
            <summary>
              Looks up a localized string similar to {0} is not a valid format string..
            </summary>
        </member>
        <member name="T:Enkoni.Framework.Timers.AlarmClock">
            <summary>Implements a class that is capable of triggering an event at a specific time of day.</summary>
        </member>
        <member name="F:Enkoni.Framework.Timers.AlarmClock.NumberOfMillisecondsPerDay">
            <summary>Defines the number of milliseconds for each 24-hour period.</summary>
        </member>
        <member name="F:Enkoni.Framework.Timers.AlarmClock.timer">
            <summary>The timer that does the actual work.</summary>
        </member>
        <member name="F:Enkoni.Framework.Timers.AlarmClock.isActive">
            <summary>Indicates if the timer is currently active.</summary>
        </member>
        <member name="F:Enkoni.Framework.Timers.AlarmClock.onAlarmHandler">
            <summary>The handler that will be executed when the alarm time has been reached.</summary>
        </member>
        <member name="F:Enkoni.Framework.Timers.AlarmClock.alarmTime">
            <summary>The local time at which the alarm must go off.</summary>
        </member>
        <member name="F:Enkoni.Framework.Timers.AlarmClock.repeat">
            <summary>Indicates if the alarm must go off each time the alarm time has been reached, or just once.</summary>
        </member>
        <member name="M:Enkoni.Framework.Timers.AlarmClock.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Timers.AlarmClock"/> class.</summary>
        </member>
        <member name="M:Enkoni.Framework.Timers.AlarmClock.#ctor(System.Object)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Timers.AlarmClock"/> class.</summary>
            <param name="state">An object containing information to be used by the callback method, or <see langword="null"/>.</param>
        </member>
        <member name="M:Enkoni.Framework.Timers.AlarmClock.#ctor(System.TimeSpan)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Timers.AlarmClock"/> class.</summary>
            <param name="alarmTime">The time of day at which the alarm must go off. The time must be in the local time zone.</param>
        </member>
        <member name="M:Enkoni.Framework.Timers.AlarmClock.#ctor(System.TimeSpan,System.Object)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Timers.AlarmClock"/> class.</summary>
            <param name="alarmTime">The time of day at which the alarm must go off. The time must be in the local time zone.</param>
            <param name="state">An object containing information to be used by the callback method, or <see langword="null"/>.</param>
        </member>
        <member name="M:Enkoni.Framework.Timers.AlarmClock.Start">
            <summary>Starts the alarm clock.</summary>
            <exception cref="T:System.InvalidOperationException">When this instance is already disposed.</exception>
        </member>
        <member name="M:Enkoni.Framework.Timers.AlarmClock.Stop">
            <summary>Stops the alarm clock.</summary>
            <exception cref="T:System.InvalidOperationException">When this instance is already disposed.</exception>
        </member>
        <member name="M:Enkoni.Framework.Timers.AlarmClock.Dispose">
            <summary>Disposes any resources held by this instance.</summary>
        </member>
        <member name="M:Enkoni.Framework.Timers.AlarmClock.DisposeManagedResources">
            <summary>Disposes any resources held by this instance.</summary>
        </member>
        <member name="M:Enkoni.Framework.Timers.AlarmClock.AdjustTimer(System.Object,System.EventArgs)">
            <summary>Adjusts the internal timer after the system time has changed or the properties of this class were changed.</summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Any arguments that may have been passed with the event.</param>
        </member>
        <member name="M:Enkoni.Framework.Timers.AlarmClock.SettOffAlarm(System.Object)">
            <summary>Sets off the alarm when the timer has elapsed.</summary>
            <param name="state">An optional state object that may have been passed in the constructor.</param>
        </member>
        <member name="E:Enkoni.Framework.Timers.AlarmClock.OnAlarm">
            <summary>Occurs when the alarm time has been reached.</summary>
        </member>
        <member name="P:Enkoni.Framework.Timers.AlarmClock.AlarmTime">
            <summary>Gets or sets the alarm time for the alarm clock in the local time zone.</summary>
        </member>
        <member name="P:Enkoni.Framework.Timers.AlarmClock.Repeat">
            <summary>Gets or sets a value indicating whether the Alarm Clock must set off an alarm each time the alarm time is reached or just once.
            </summary>
        </member>
        <member name="T:Enkoni.Framework.Timers.Stopwatch">
            <summary>This class is a wrapper around the <see cref="T:System.Diagnostics.Stopwatch"/> class and adds support for recording lap times.</summary>
        </member>
        <member name="F:Enkoni.Framework.Timers.Stopwatch.internalStopwatch">
            <summary>The instance that does the actual work.</summary>
        </member>
        <member name="F:Enkoni.Framework.Timers.Stopwatch.lapTimes">
            <summary>Holds the elapsed time of each lap.</summary>
        </member>
        <member name="F:Enkoni.Framework.Timers.Stopwatch.state">
            <summary>Holds the current state of the stopwatch.</summary>
        </member>
        <member name="M:Enkoni.Framework.Timers.Stopwatch.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Timers.Stopwatch"/> class.</summary>
        </member>
        <member name="M:Enkoni.Framework.Timers.Stopwatch.Start">
            <summary>Starts or resumes the stopwatch. If the stopwatch was paused before, the current lap will be resumed; otherwise, a new lap is 
            started.</summary>
        </member>
        <member name="M:Enkoni.Framework.Timers.Stopwatch.Stop">
            <summary>Stops the stopwatch and saves the elapsed time of the current lap. Restarting the stopwatch will start a new lap.</summary>
        </member>
        <member name="M:Enkoni.Framework.Timers.Stopwatch.Pause">
            <summary>Pauses the stopwatch. Restarting the stopwatch will resume the current lap.</summary>
        </member>
        <member name="M:Enkoni.Framework.Timers.Stopwatch.Resume">
            <summary>Resumes the stopwatch.</summary>
            <remarks><see cref="M:Enkoni.Framework.Timers.Stopwatch.Resume"/> and <see cref="M:Enkoni.Framework.Timers.Stopwatch.Start"/> provide the same functionality. The <see cref="M:Enkoni.Framework.Timers.Stopwatch.Resume"/> method has been added to 
            make working with the <see cref="T:Enkoni.Framework.Timers.Stopwatch"/> class more intuitive.</remarks>
        </member>
        <member name="M:Enkoni.Framework.Timers.Stopwatch.Reset">
            <summary>Resets the stopwatch and clears the lap times.</summary>
        </member>
        <member name="M:Enkoni.Framework.Timers.Stopwatch.NewLap">
            <summary>Saves the elapsed time of the current lap and starts recording the lap time of the next lap.</summary>
            <returns>The lap time of the last completed lap.</returns>
        </member>
        <member name="P:Enkoni.Framework.Timers.Stopwatch.LapTimes">
            <summary>Gets the lap times of each completed lap.</summary>
        </member>
        <member name="P:Enkoni.Framework.Timers.Stopwatch.CurrentLapTime">
            <summary>Gets the elapsed time of the current lap.</summary>
        </member>
        <member name="T:Enkoni.Framework.Collections.DoubleEqualityComparer">
            <summary>This class compares two <see cref="T:System.Double"/> values using a more mathematically accepted approach.</summary>
        </member>
        <member name="F:Enkoni.Framework.Collections.DoubleEqualityComparer.compareOption">
            <summary>The option that determines the compare method.</summary>
        </member>
        <member name="F:Enkoni.Framework.Collections.DoubleEqualityComparer.compareFactor">
            <summary>The factor that is used in the comparison.</summary>
        </member>
        <member name="M:Enkoni.Framework.Collections.DoubleEqualityComparer.#ctor(System.Double,Enkoni.Framework.DoubleCompareOption)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Collections.DoubleEqualityComparer"/> class.</summary>
            <param name="comparisonFactor">The factor that must be taken into account. If <paramref name="compareOption"/> is set to 
            <see cref="F:Enkoni.Framework.DoubleCompareOption.Margin"/>, the comparison factor will be treated as an absolute margin. If <paramref name="compareOption"/> is
            set to <see cref="F:Enkoni.Framework.DoubleCompareOption.SignificantDigits"/> the comparison factor will be treated as the number of digits that must be 
            examined will comparing. Note that the comparison factor in that case will be truncated to an integer.</param>
            <param name="compareOption">Defines the method that must be used to compare the double values.</param>
        </member>
        <member name="M:Enkoni.Framework.Collections.DoubleEqualityComparer.Equals(System.Double,System.Double)">
            <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>If <b>x</b> is smaller than <b>y</b>, a value less than zero is returned. If <b>x</b> equals <b>y</b>, zero is returned. If <b>x</b> 
            is greater than <b>y</b>, a value greater than zero is returned.</returns>
        </member>
        <member name="M:Enkoni.Framework.Collections.DoubleEqualityComparer.GetHashCode(System.Double)">
            <summary>Returns a hash code for the specified object.</summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
        </member>
        <member name="M:Enkoni.Framework.Collections.DoubleEqualityComparer.EqualsByMargin(System.Double,System.Double,System.Double)">
            <summary>Compares two doubles by looking if the difference is within the specified margin. If so, the two values are considered equal.
            </summary>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <param name="margin">The margin that must be taken into account.</param>
            <returns><see langword="true"/> if the difference between the two numbers is within the margin; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.Collections.DoubleEqualityComparer.EqualsBySignificantDigits(System.Double,System.Double,System.Int32)">
            <summary>Compares two doubles by looking only at the significant digits.</summary>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <param name="digits">The significant digits that must be taken into account.</param>
            <returns><see langword="true"/> if the two numbers are equal up to their significant digits; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Enkoni.Framework.Collections.DoubleComparer">
            <summary>This class compares two <see cref="T:System.Double"/> values a more mathematically accepted approach.</summary>
        </member>
        <member name="F:Enkoni.Framework.Collections.DoubleComparer.compareOption">
            <summary>The option that determines the compare method.</summary>
        </member>
        <member name="F:Enkoni.Framework.Collections.DoubleComparer.compareFactor">
            <summary>The factor that is used in the comparison.</summary>
        </member>
        <member name="M:Enkoni.Framework.Collections.DoubleComparer.#ctor(System.Double,Enkoni.Framework.DoubleCompareOption)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Collections.DoubleComparer"/> class.</summary>
            <param name="comparisonFactor">The factor that must be taken into account. If <paramref name="compareOption"/> is set to 
            <see cref="F:Enkoni.Framework.DoubleCompareOption.Margin"/>, the comparison factor will be treated as an absolute margin. If <paramref name="compareOption"/> is
            set to <see cref="F:Enkoni.Framework.DoubleCompareOption.SignificantDigits"/> the comparison factor will be treated as the number of digits that must be 
            examined will comparing. Note that the comparison factor in that case will be truncated to an integer.</param>
            <param name="compareOption">Defines the method that must be used to compare the double values.</param>
        </member>
        <member name="M:Enkoni.Framework.Collections.DoubleComparer.Compare(System.Double,System.Double)">
            <summary>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>A signed number indicating the relative values of the two numbers. <br/>
            Return Value Description <br/>
            Less than zero: <paramref name="x"/> is less than <paramref name="y"/> -or- <paramref name="x"/> is not a number (<see cref="F:System.Double.NaN"/>) 
            and <paramref name="y"/> is a number.<br/>
            Zero: <paramref name="x"/> is equal to <paramref name="y"/> -or- Both <paramref name="x"/> and <paramref name="y"/> are not a number 
            (<see cref="F:System.Double.NaN"/>), <see cref="F:System.Double.PositiveInfinity"/>, or <see cref="F:System.Double.NegativeInfinity"/>.<br/>
            Greater than zero: <paramref name="x"/> is greater than <paramref name="y"/> -or- <paramref name="x"/> is a number and <paramref name="y"/> is
            not a number (<see cref="F:System.Double.NaN"/>).</returns>
        </member>
        <member name="M:Enkoni.Framework.Collections.DoubleComparer.CompareByMargin(System.Double,System.Double,System.Double)">
            <summary>Compares two doubles by looking if the difference is within the specified margin. If so, the two values are considered equal. 
            Otherwise, the values are compared in the traditional way.</summary>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <param name="margin">The margin that must be taken into account.</param>
            <returns>Zero if the difference between the two numbers is within the margin, less than zero if the first operand is less than the second 
            operand, more than zero if the first operand is more than the second operand.</returns>
        </member>
        <member name="M:Enkoni.Framework.Collections.DoubleComparer.CompareBySignificantDigits(System.Double,System.Double,System.Int32)">
            <summary>Compares two doubles by looking only at the significant digits.</summary>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <param name="digits">The significant digits that must be taken into account.</param>
            <returns>An integer indicating the difference between the two numbers.</returns>
        </member>
        <member name="T:Enkoni.Framework.EnumHelper">
            <summary>This class contains helper methods that perform common tasks for enum values.</summary>
        </member>
        <member name="M:Enkoni.Framework.EnumHelper.ToString(System.Enum)">
            <summary>Returns a string value representing the specified enum value. If the enum value has the <see cref="T:Enkoni.Framework.LocalizedDescriptionAttribute"/> 
            applied, its parameters are used to generate the string value. If those parameters do not result in a valid string value or the attribute is 
            not applied, the enum value is tested for the <see cref="T:System.ComponentModel.DescriptionAttribute"/>. If that attribute is applied, the 
            <see cref="P:System.ComponentModel.DescriptionAttribute.Description"/> field is used as the string value. <br/>
            If the <see cref="T:System.ComponentModel.DescriptionAttribute"/> is not applied or does not result in a valid string value, the enum value is tested for the 
            <see cref="T:System.Runtime.Serialization.EnumMemberAttribute"/>. If that attribute is applied, the <see cref="P:System.Runtime.Serialization.EnumMemberAttribute.Value"/> field is used as the string 
            value.<br/>
            If none of the attributes are applied or result in a valid string value, the default <see cref="M:System.Enum.ToString"/> method is used.
            </summary>
            <param name="enumValue">The enum value that must be converted into a string value.</param>
            <returns>The string representation of the enum value.</returns>
        </member>
        <member name="M:Enkoni.Framework.EnumHelper.ToString(System.Enum,System.Globalization.CultureInfo)">
            <summary>Returns a string value representing the specified enum value. If the enum value has the <see cref="T:Enkoni.Framework.LocalizedDescriptionAttribute"/> 
            applied, its parameters are used to generate the string value. If those parameters do not result in a valid string value or the attribute is 
            not applied, the enum value is tested for the <see cref="T:System.ComponentModel.DescriptionAttribute"/>. If that attribute is applied, the 
            <see cref="P:System.ComponentModel.DescriptionAttribute.Description"/> field is used as the string value. <br/>
            If the <see cref="T:System.ComponentModel.DescriptionAttribute"/> is not applied or does not result in a valid string value, the enum value is tested for the 
            <see cref="T:System.Runtime.Serialization.EnumMemberAttribute"/>. If that attribute is applied, the <see cref="P:System.Runtime.Serialization.EnumMemberAttribute.Value"/> field is used as the string 
            value.<br/>
            If none of the attributes are applied or result in a valid string value, the default <see cref="M:System.Enum.ToString"/> method is used.</summary>
            <param name="enumValue">The enum value that must be converted into a string value.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> object that represents the culture for which the resource is localized. Note that if the 
            resource is not localized for this culture, the lookup will fall back using the culture's <see cref="P:System.Globalization.CultureInfo.Parent"/> property, stopping 
            after looking in the neutral culture.  If this value is <see langword="null"/>, the <see cref="T:System.Globalization.CultureInfo"/> is obtained using the culture's 
            <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/> property.</param>
            <returns>The string representation of the enum value.</returns>
        </member>
        <member name="M:Enkoni.Framework.EnumHelper.ToString(System.Enum,System.Resources.ResourceManager)">
            <summary>Returns a string value representing the specified enum value. If the enum value has the <see cref="T:Enkoni.Framework.LocalizedDescriptionAttribute"/> 
            applied, its parameters are used to generate the string value. If those parameters do not result in a valid string value or the attribute is 
            not applied, the enum value is tested for the <see cref="T:System.ComponentModel.DescriptionAttribute"/>. If that attribute is applied, the 
            <see cref="P:System.ComponentModel.DescriptionAttribute.Description"/> field is used as the string value. <br/>
            If the <see cref="T:System.ComponentModel.DescriptionAttribute"/> is not applied or does not result in a valid string value, the enum value is tested for the 
            <see cref="T:System.Runtime.Serialization.EnumMemberAttribute"/>. If that attribute is applied, the <see cref="P:System.Runtime.Serialization.EnumMemberAttribute.Value"/> field is used as the string 
            value.<br/>
            If none of the attributes are applied or result in a valid string value, the default <see cref="M:System.Enum.ToString"/> method is used.</summary>
            <param name="enumValue">The enum value that must be converted into a string value.</param>
            <param name="resources">The resource manager that must be used to retrieve the localized string.</param>
            <returns>The string representation of the enum value.</returns>
        </member>
        <member name="M:Enkoni.Framework.EnumHelper.ToString(System.Enum,System.Resources.ResourceManager,System.Globalization.CultureInfo)">
            <summary>Returns a string value representing the specified enum value. If the enum value has the <see cref="T:Enkoni.Framework.LocalizedDescriptionAttribute"/> 
            applied, its parameters are used to generate the string value. If those parameters do not result in a valid string value or the attribute is 
            not applied, the enum value is tested for the <see cref="T:System.ComponentModel.DescriptionAttribute"/>. If that attribute is applied, the 
            <see cref="P:System.ComponentModel.DescriptionAttribute.Description"/> field is used as the string value. <br/>
            If the <see cref="T:System.ComponentModel.DescriptionAttribute"/> is not applied or does not result in a valid string value, the enum value is tested for the 
            <see cref="T:System.Runtime.Serialization.EnumMemberAttribute"/>. If that attribute is applied, the <see cref="P:System.Runtime.Serialization.EnumMemberAttribute.Value"/> field is used as the string 
            value.<br/>
            If none of the attributes are applied or result in a valid string value, the default <see cref="M:System.Enum.ToString"/> method is used.</summary>
            <param name="enumValue">The enum value that must be converted into a string value.</param>
            <param name="resources">The resource manager that must be used to retrieve the localized string.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> object that represents the culture for which the resource is localized. Note that if the 
            resource is not localized for this culture, the lookup will fall back using the culture's <see cref="P:System.Globalization.CultureInfo.Parent"/> property, stopping 
            after looking in the neutral culture.  If this value is <see langword="null"/>, the <see cref="T:System.Globalization.CultureInfo"/> is obtained using the culture's 
            <see cref="P:System.Globalization.CultureInfo.CurrentUICulture"/> property.</param>
            <returns>The string representation of the enum value.</returns>
        </member>
        <member name="M:Enkoni.Framework.EnumHelper.SetFlag``1(``0,``0)">
            <summary>Sets the specified flag in the enum value.</summary>
            <typeparam name="T">The type of enum that is manipulated.</typeparam>
            <param name="enumValue">The value that must have the flag bit set.</param>
            <param name="flag">The flag bit that must be set.</param>
            <returns>The enum value with the flag bit set.</returns>
        </member>
        <member name="M:Enkoni.Framework.EnumHelper.UnsetFlag``1(``0,``0)">
            <summary>Unsets the specified flag in the enum value.</summary>
            <typeparam name="T">The type of enum that is manipulated.</typeparam>
            <param name="enumValue">The value that must have the flag bit removed.</param>
            <param name="flag">The flag bit that must be removed.</param>
            <returns>The enum value with the flag bit removed.</returns>
        </member>
        <member name="M:Enkoni.Framework.EnumHelper.ToggleFlag``1(``0,``0)">
            <summary>Toggles the specified flag in the enum value.</summary>
            <typeparam name="T">The type of enum that is manipulated.</typeparam>
            <param name="enumValue">The value that must have the flag bit toggled.</param>
            <param name="flag">The flag bit that must be toggled.</param>
            <returns>The enum value with the flag bit toggled.</returns>
        </member>
        <member name="T:Enkoni.Framework.LocalizedDescriptionAttribute">
            <summary>Defines an attribute that can be used to define a localizable description for a type or member.</summary>
        </member>
        <member name="M:Enkoni.Framework.LocalizedDescriptionAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.LocalizedDescriptionAttribute"/> class.</summary>
            <param name="resourceKey">The key with which the description must be retrieved from the resources.</param>
        </member>
        <member name="M:Enkoni.Framework.LocalizedDescriptionAttribute.#ctor(System.String,System.Type)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.LocalizedDescriptionAttribute"/> class.</summary>
            <param name="resourceKey">The key with which the description must be retrieved from the resources.</param>
            <param name="resourceType">The type of the resources that contains the description.</param>
        </member>
        <member name="P:Enkoni.Framework.LocalizedDescriptionAttribute.ResourceKey">
            <summary>Gets the key with which the description must be retrieved from the resources.</summary>
        </member>
        <member name="P:Enkoni.Framework.LocalizedDescriptionAttribute.ResourceType">
            <summary>Gets the type of the resources that contains the description.</summary>
        </member>
        <member name="P:Enkoni.Framework.LocalizedDescriptionAttribute.DefaultDescription">
            <summary>Gets or sets the default description in case the resource key could not be found in the resources.</summary>
        </member>
        <member name="T:Enkoni.Framework.Collections.ReferenceEqualityComparer`1">
            <summary>This class compares types based on their reference.</summary>
            <typeparam name="T">The type of object that must be compared.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.Collections.ReferenceEqualityComparer`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Collections.ReferenceEqualityComparer`1"/> class.</summary>
        </member>
        <member name="M:Enkoni.Framework.Collections.ReferenceEqualityComparer`1.Equals(`0,`0)">
            <summary>Determines whether the specified objects are equal.</summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns><see langword="true"/> if the specified objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.Collections.ReferenceEqualityComparer`1.GetHashCode(`0)">
            <summary>Returns a hash code for the specified object.</summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of obj is a reference type and obj is null.</exception>
        </member>
        <member name="T:Enkoni.Framework.Serialization.Serializer`1">
            <summary>Provides a base class for a type that is capable of (de)serializing data to and from a specific format.</summary>
            <typeparam name="T">Type of the object that has to be serialized.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Serialization.Serializer`1"/> class.</summary>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.#ctor(Enkoni.Framework.Serialization.Transformer{`0})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Serialization.Serializer`1"/> class.</summary>
            <param name="transformer">The transformer that must be used during the (de)serialization.</param>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.BeginSerialize(System.Collections.Generic.IEnumerable{`0},System.String,System.AsyncCallback,System.Object)">
            <summary>Begins to serialize the objects to the specified file using a default encoding.</summary>
            <param name="objects">The collection of objects that must be serialized.</param>
            <param name="filePath">The name of the output file.</param>
            <param name="callback">The method to be called when the asynchronous operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.BeginSerialize(System.Collections.Generic.IEnumerable{`0},System.String,System.Text.Encoding,System.AsyncCallback,System.Object)">
            <summary>Begins to serialize the objects to the specified file using the specified encoding.</summary>
            <param name="objects">The collection of objects that must be serialized.</param>
            <param name="filePath">The name of the output file.</param>
            <param name="encoding">The encoding that must be used to serialize the data.</param>
            <param name="callback">The method to be called when the asynchronous operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.BeginSerialize(System.Collections.Generic.IEnumerable{`0},System.IO.Stream,System.AsyncCallback,System.Object)">
            <summary>Begins to serialize the objects to the specified stream using a default encoding.</summary>
            <param name="objects">The collection of objects that must be serialized.</param>
            <param name="stream">The stream to which the objects must be serialized.</param>
            <param name="callback">The method to be called when the asynchronous operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.BeginSerialize(System.Collections.Generic.IEnumerable{`0},System.IO.Stream,System.Text.Encoding,System.AsyncCallback,System.Object)">
            <summary>Begins to serialize the objects to the specified stream using the specified encoding.</summary>
            <param name="objects">The collection of objects that must be serialized.</param>
            <param name="stream">The stream to which the objects must be serialized.</param>
            <param name="encoding">The encoding that must be used to serialize the data.</param>
            <param name="callback">The method to be called when the asynchronous operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.EndSerialize(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous serialize operation to complete. If an exception was thrown during the execution of the 
            asynchronous operation, it is rethrown when invoking this method.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <returns>The number of bytes that have been written to the file or stream.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.BeginDeserialize(System.String,System.AsyncCallback,System.Object)">
            <summary>Begins to deserialize the objects from the specified file using a default encoding.</summary>
            <param name="filePath">The name of the input file.</param>
            <param name="callback">The method to be called when the asynchronous operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.BeginDeserialize(System.String,System.Text.Encoding,System.AsyncCallback,System.Object)">
            <summary>Begins to deserialize the objects from the specified file using the specified encoding.</summary>
            <param name="filePath">The name of the input file.</param>
            <param name="encoding">The encoding that must be used to deserialize the data.</param>
            <param name="callback">The method to be called when the asynchronous operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.BeginDeserialize(System.IO.Stream,System.AsyncCallback,System.Object)">
            <summary>Begins to deserialize the objects from the specified stream using a default encoding.</summary>
            <param name="stream">The stream to which the objects must be serialized.</param>
            <param name="callback">The method to be called when the asynchronous operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.BeginDeserialize(System.IO.Stream,System.Text.Encoding,System.AsyncCallback,System.Object)">
            <summary>Begins to deserialize the objects from the specified stream using the specified encoding.</summary>
            <param name="stream">The stream to which the objects must be serialized.</param>
            <param name="encoding">The encoding that must be used to serialize the data.</param>
            <param name="callback">The method to be called when the asynchronous operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous operation.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.EndDeserialize(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous deserialize operation to complete. If an exception was thrown during the execution of the 
            asynchronous operation, it is rethrown when invoking this method.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <returns>The items that were deserialized from the file or stream.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.Serialize(System.Collections.Generic.IEnumerable{`0},System.String)">
            <summary>Serializes a list of objects to a file using a default encoding.</summary>
            <param name="objects">The collection of objects that must be serialized.</param>
            <param name="filePath">The name of the output file.</param>
            <returns>The number of bytes that have been written to the file.</returns>
            <exception cref="T:System.ArgumentNullException">The parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The file path is empty or contains illegal characters.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.Serialize(System.Collections.Generic.IEnumerable{`0},System.String,System.Text.Encoding)">
            <summary>Serializes a list of objects to a file.</summary>
            <param name="objects">The collection of objects that must be serialized.</param>
            <param name="filePath">The name of the output file.</param>
            <param name="encoding">The encoding that must be used to serialize the data.</param>
            <returns>The number of bytes that have been written to the file.</returns>
            <exception cref="T:System.ArgumentNullException">The parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The file path is empty or contains illegal characters.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.Serialize(System.Collections.Generic.IEnumerable{`0},System.IO.Stream)">
            <summary>Serializes a list of objects to a stream using a default encoding.</summary>
            <param name="objects">The collection of objects that must be serialized.</param>
            <param name="stream">The stream to which the objects must be serialized.</param>
            <returns>The number of bytes that have been written to the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The stream is read-only.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.Serialize(System.Collections.Generic.IEnumerable{`0},System.IO.Stream,System.Text.Encoding)">
            <summary>Serializes a list of objects to a stream.</summary>
            <param name="objects">The collection of objects that must be serialized.</param>
            <param name="stream">The stream to which the objects must be serialized.</param>
            <param name="encoding">The encoding that must be used to serialize the data.</param>
            <returns>The number of bytes that have been written to the stream.</returns>
            <exception cref="T:System.ArgumentNullException">The parameter is null.</exception>
            <exception cref="T:System.ArgumentException">The stream is read-only.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.Deserialize(System.String)">
            <summary>Deserializes a CSV to a list of objects using a default encoding of UTF-8.</summary>
            <param name="filePath">File path to csv file.</param>
            <returns>List with objects.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.Deserialize(System.String,System.Text.Encoding)">
            <summary>Deserializes a CSV to a list of objects.</summary>
            <param name="filePath">File path to csv file.</param>
            <param name="encoding">The encoding that must be used to deserialize the data.</param>
            <returns>List with objects.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.Deserialize(System.IO.Stream)">
            <summary>Deserializes CSV data to a list of objects using a default encoding of UTF-8.</summary>
            <param name="stream">The stream that contains the csv data.</param>
            <returns>List with objects.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.Deserialize(System.IO.Stream,System.Text.Encoding)">
            <summary>Deserializes a CSV to a list of objects.</summary>
            <param name="stream">The stream that contains the csv data.</param>
            <param name="encoding">The encoding that must be used to deserialize the data.</param>
            <returns>List with objects.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.Serialize(System.Collections.Generic.IEnumerable{`0},System.Text.Encoding,System.IO.Stream)">
            <summary>Serializes a collection of items by transforming each item using the <see cref="P:Enkoni.Framework.Serialization.Serializer`1.Transformer"/> property and writing the 
            transformed item to the <paramref name="stream"/>. Each item will be separated using the new line character(s) of the current environment.
            </summary>
            <param name="objects">The objects that must be serialized.</param>
            <param name="encoding">The encoding that must be used.</param>
            <param name="stream">The stream to which the serialized items must be sent.</param>
            <returns>The number of bytes that have been written to the stream.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.Deserialize(System.IO.StreamReader)">
            <summary>Deserializes a collection of objects using the data that is accessible through the specified stream reader.</summary>
            <param name="reader">The object that gives access to the underlying stream.</param>
            <returns>The collection of deserialized objects.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.SerializeToFileHelper(System.Object)">
            <summary>Executes the <see cref="M:Enkoni.Framework.Serialization.Serializer`1.Serialize(System.Collections.Generic.IEnumerable{`0},System.String,System.Text.Encoding)"/> method in a separate thread. This is used to support 
            asynchronous operations.</summary>
            <param name="propertyContainer">The object that holds properties that are required for the asynchronous operation.</param>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.SerializeToStreamHelper(System.Object)">
            <summary>Executes the <see cref="M:Enkoni.Framework.Serialization.Serializer`1.Serialize(System.Collections.Generic.IEnumerable{`0},System.IO.Stream,System.Text.Encoding)"/> method in a separate thread. This is used to support 
            asynchronous operations.</summary>
            <param name="propertyContainer">The object that holds properties that are required for the asynchronous operation.</param>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.DeserializeToFileHelper(System.Object)">
            <summary>Executes the <see cref="M:Enkoni.Framework.Serialization.Serializer`1.Deserialize(System.String,System.Text.Encoding)"/> method in a separate thread. This is used to support asynchronous 
            operations.</summary>
            <param name="propertyContainer">The object that holds properties that are required for the asynchronous operation.</param>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Serializer`1.DeserializeToStreamHelper(System.Object)">
            <summary>Executes the <see cref="M:Enkoni.Framework.Serialization.Serializer`1.Deserialize(System.IO.Stream,System.Text.Encoding)"/> method in a separate thread. This is used to support asynchronous 
            operations.</summary>
            <param name="propertyContainer">The object that holds properties that are required for the asynchronous operation.</param>
        </member>
        <member name="P:Enkoni.Framework.Serialization.Serializer`1.DefaultEncoding">
            <summary>Gets or sets the default encoding that will be used when no encoding is specified.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.Serializer`1.Transformer">
            <summary>Gets or sets the transformer that transforms single objects into a specific format.</summary>
        </member>
        <member name="T:Enkoni.Framework.Serialization.Serializer`1.SerializePropertyContainer">
            <summary>Defines a base container that holds the properties that are required during the serialization of objects.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.Serializer`1.SerializePropertyContainer.Objects">
            <summary>Gets or sets the objects that must be serialized.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.Serializer`1.SerializePropertyContainer.Encoding">
            <summary>Gets or sets the encoding that must be used.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.Serializer`1.SerializePropertyContainer.AsyncResult">
            <summary>Gets or sets the asynchronous result object.</summary>
        </member>
        <member name="T:Enkoni.Framework.Serialization.Serializer`1.DeserializePropertyContainer">
            <summary>Defines a base container that holds the properties that are required during the deserialization of objects.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.Serializer`1.DeserializePropertyContainer.Encoding">
            <summary>Gets or sets the encoding that must be used.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.Serializer`1.DeserializePropertyContainer.AsyncResult">
            <summary>Gets or sets the asynchronous result object.</summary>
        </member>
        <member name="T:Enkoni.Framework.Serialization.Serializer`1.SerializeToFilePropertyContainer">
            <summary>Defines a container that holds the properties that are required during the serialization of objects to a file.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.Serializer`1.SerializeToFilePropertyContainer.FilePath">
            <summary>Gets or sets the path to the file that must be used.</summary>
        </member>
        <member name="T:Enkoni.Framework.Serialization.Serializer`1.DeserializeFromFilePropertyContainer">
            <summary>Defines a container that holds the properties that are required during the deserialization of objects from a file.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.Serializer`1.DeserializeFromFilePropertyContainer.FilePath">
            <summary>Gets or sets the path to the file that must be used.</summary>
        </member>
        <member name="T:Enkoni.Framework.Serialization.Serializer`1.SerializeToStreamPropertyContainer">
            <summary>Defines a container that holds the properties that are required during the serialization of objects to a stream.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.Serializer`1.SerializeToStreamPropertyContainer.Stream">
            <summary>Gets or sets the stream that must be used.</summary>
        </member>
        <member name="T:Enkoni.Framework.Serialization.Serializer`1.DeserializeFromStreamPropertyContainer">
            <summary>Defines a container that holds the properties that are required during the deserialization of objects from a stream.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.Serializer`1.DeserializeFromStreamPropertyContainer.Stream">
            <summary>Gets or sets the stream that must be used.</summary>
        </member>
        <member name="T:Enkoni.Framework.Serialization.CsvTransformer`1">
            <summary>Transforms an instance of type <typeparamref name="T"/> to and from CSV data.</summary>
            <typeparam name="T">Type of the object that has to be serialized.</typeparam>
        </member>
        <member name="T:Enkoni.Framework.Serialization.Transformer`1">
            <summary>Represents a transformer that transforms an instance of <typeparamref name="T"/> into a byte array or string 
            and vice versa.</summary>
            <typeparam name="T">The type that must be transformed.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Transformer`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Serialization.Transformer`1"/> class.</summary>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Transformer`1.ToString(`0)">
            <summary>Transforms <paramref name="instance"/> into a string.</summary>
            <param name="instance">The instance that must be transformed.</param>
            <returns>The string that contains the transformed instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Transformer`1.ToBytes(`0,System.Text.Encoding)">
            <summary>Transforms <paramref name="instance"/> into a byte array.</summary>
            <param name="instance">The instance that must be transformed.</param>
            <param name="encoding">The encoding that must be used to transform the instance into bytes.</param>
            <returns>The byte array that contains the transformed instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Transformer`1.ToBytes(`0,System.Text.Encoding,System.Byte[],System.Int32)">
            <summary>Transforms <paramref name="instance"/> into a byte array.</summary>
            <param name="instance">The instance that must be transformed.</param>
            <param name="encoding">The encoding that must be used to transform the instance into bytes.</param>
            <param name="bytes">The byte array into which the transformed instance must be stored.</param>
            <param name="offset">The offset in <paramref name="bytes"/>.</param>
            <returns>The number of bytes that were written into <paramref name="bytes"/>.</returns>
            <exception cref="T:System.ArgumentException">The byte array has a zero length.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset is outside the bounds of the byte array.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="instance"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Transformer`1.FromString(System.String)">
            <summary>Transforms a string value into an instance of type <typeparamref name="T"/>.</summary>
            <param name="input">The string that must be transformed.</param>
            <returns>The transformed instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="input"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Transformer`1.FromBytes(System.Byte[],System.Text.Encoding)">
            <summary>Transforms the content of a byte array into an instance of type <typeparamref name="T"/>.</summary>
            <param name="bytes">The byte array whose content must be transformed.</param>
            <param name="encoding">The encoding that must be used to transform the bytes.</param>
            <returns>The transformed instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Transformer`1.FromBytes(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>Transforms the content of a byte array into an instance of type <typeparamref name="T"/>.</summary>
            <param name="bytes">The byte array whose content must be transformed.</param>
            <param name="offset">The offset from which to start reading bytes.</param>
            <param name="length">The number of bytes that must be read from the array.</param>
            <param name="encoding">The encoding that must be used to transform the bytes.</param>
            <returns>The transformed instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bytes"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified length is less then or equal to zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset is negative.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset + length is outside the bounds of the array.
            </exception>
            <exception cref="T:System.ArgumentException">The byte array has a length of zero.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Transformer`1.ToStringCore(`0)">
            <summary>Transforms <paramref name="instance"/> into a string.</summary>
            <param name="instance">The instance that must be transformed.</param>
            <returns>The string that contains the transformed instance.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Transformer`1.ToBytesCore(`0,System.Text.Encoding)">
            <summary>Transforms <paramref name="instance"/> into a byte array.</summary>
            <param name="instance">The instance that must be transformed.</param>
            <param name="encoding">The encoding that must be used to transform the instance into bytes.</param>
            <returns>The byte array that contains the transformed instance.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Transformer`1.ToBytesCore(`0,System.Text.Encoding,System.Byte[],System.Int32)">
            <summary>Transforms <paramref name="instance"/> into a byte array.</summary>
            <param name="instance">The instance that must be transformed.</param>
            <param name="encoding">The encoding that must be used to transform the instance into bytes.</param>
            <param name="bytes">The byte array into which the transformed instance must be stored.</param>
            <param name="offset">The offset in <paramref name="bytes"/>.</param>
            <returns>The number of bytes that were written into <paramref name="bytes"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Transformer`1.FromStringCore(System.String)">
            <summary>Transforms a string value into an instance of type <typeparamref name="T"/>.</summary>
            <param name="input">The string that must be transformed.</param>
            <returns>The transformed instance.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Transformer`1.FromBytesCore(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>Transforms the content of a byte array into an instance of type <typeparamref name="T"/>.</summary>
            <param name="bytes">The byte array whose content must be transformed.</param>
            <param name="offset">The offset from which to start reading bytes.</param>
            <param name="length">The number of bytes that must be read from the array.</param>
            <param name="encoding">The encoding that must be used to transform the bytes.</param>
            <returns>The transformed instance.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.Transformer`1.FromBytesCore(System.Byte[],System.Text.Encoding)">
            <summary>Transforms the content of a byte array into an instance of type <typeparamref name="T"/>.</summary>
            <param name="bytes">The byte array whose content must be transformed.</param>
            <param name="encoding">The encoding that must be used to transform the bytes.</param>
            <returns>The transformed instance.</returns>
        </member>
        <member name="F:Enkoni.Framework.Serialization.CsvTransformer`1.DefaultFormatRegex">
            <summary>The regex that is used to determine if a format string matches the default format string.</summary>
        </member>
        <member name="F:Enkoni.Framework.Serialization.CsvTransformer`1.TrueFalseFormatRegex">
            <summary>The regex that is used to determine if a format string matches a special true/false format string.</summary>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvTransformer`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Serialization.CsvTransformer`1"/> class.</summary>
            <exception cref="T:Enkoni.Framework.InvalidTypeParameterException">The specified type-parameter cannot be serialized using this 
            serializer.</exception>
            <exception cref="T:System.InvalidOperationException">The specified type-parameter contains illegal metadata that prevents it 
            from being (de)serialized.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvTransformer`1.ToStringCore(`0)">
            <summary>Transforms <paramref name="instance"/> into a string.</summary>
            <param name="instance">The instance that must be transformed.</param>
            <returns>The string that contains the transformed instance.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvTransformer`1.ToBytesCore(`0,System.Text.Encoding)">
            <summary>Transforms <paramref name="instance"/> into a byte array.</summary>
            <param name="instance">The instance that must be transformed.</param>
            <param name="encoding">The encoding that must be used to transform the instance into bytes.</param>
            <returns>The byte array that contains the transformed instance.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvTransformer`1.ToBytesCore(`0,System.Text.Encoding,System.Byte[],System.Int32)">
            <summary>Transforms <paramref name="instance"/> into a byte array.</summary>
            <param name="instance">The instance that must be transformed.</param>
            <param name="encoding">The encoding that must be used to transform the instance into bytes.</param>
            <param name="bytes">The byte array into which the transformed instance must be stored.</param>
            <param name="offset">The offset in <paramref name="bytes"/>.</param>
            <returns>The number of bytes that were written into <paramref name="bytes"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvTransformer`1.FromStringCore(System.String)">
            <summary>Transforms a string value into an instance of type <typeparamref name="T"/>.</summary>
            <param name="input">The string that must be transformed.</param>
            <returns>The transformed instance.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvTransformer`1.FromBytesCore(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>Transforms the content of a byte array into an instance of type <typeparamref name="T"/>.</summary>
            <param name="bytes">The byte array whose content must be transformed.</param>
            <param name="offset">The offset from which to start reading bytes.</param>
            <param name="length">The number of bytes that must be read from the array.</param>
            <param name="encoding">The encoding that must be used to transform the bytes.</param>
            <returns>The transformed instance.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvTransformer`1.FromBytesCore(System.Byte[],System.Text.Encoding)">
            <summary>Transforms the content of a byte array into an instance of type <typeparamref name="T"/>.</summary>
            <param name="bytes">The byte array whose content must be transformed.</param>
            <param name="encoding">The encoding that must be used to transform the bytes.</param>
            <returns>The transformed instance.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvTransformer`1.CreateFormatString(System.String)">
            <summary>Creates a format string given the formatting that is applied to the property.</summary>
            <param name="propertyFormat">The formatting as it is applied to the property.</param>
            <returns>The created format string.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvTransformer`1.CreateBooleanFormatString(System.String,System.Nullable{System.Boolean})">
            <summary>Creates a format string given the formatting that is applied to the property.</summary>
            <param name="propertyFormat">The formatting as it is applied to the property.</param>
            <param name="propertyValue">De actual value of the property.</param>
            <returns>The created format string.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvTransformer`1.CreateEnumFormatString(System.String,System.Object,System.Globalization.CultureInfo)">
            <summary>Creates a format string given the formatting that is applied to the property.</summary>
            <param name="propertyFormat">The formatting as it is applied to the property.</param>
            <param name="propertyValue">De actual value of the property.</param>
            <param name="propertyCulture">The culture that must be used.</param>
            <returns>The created format string.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvTransformer`1.CreateCharFormatString(System.String,System.Nullable{System.Char},System.Globalization.CultureInfo)">
            <summary>Creates a format string given the formatting that is applied to the property.</summary>
            <param name="propertyFormat">The formatting as it is applied to the property.</param>
            <param name="propertyValue">De actual value of the property.</param>
            <param name="propertyCulture">The culture that must be used.</param>
            <returns>The created format string.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvTransformer`1.CreateStringFormatString(System.String)">
            <summary>Creates a format string given the formatting that is applied to the property.</summary>
            <param name="propertyFormat">The formatting as it is applied to the property.</param>
            <returns>The created format string.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvTransformer`1.SetPropertyValue(System.Reflection.PropertyInfo,`0,System.String,System.String,System.String)">
            <summary>Set a property value of an object.</summary>
            <param name="propertyInfo">The property that must be assigned.</param>
            <param name="obj">Reference to the object whose property must be assigned.</param>
            <param name="value">The value that must be assigned.</param>
            <param name="formatString">An optional format string that can be used to properly parse the value.</param>
            <param name="cultureName">An optional culture name that can be used to properly parse the value.</param>
            <exception cref="T:System.NotSupportedException">The type of the property that must be assigned is not supported.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvTransformer`1.SetValueTypePropertyValue(System.Reflection.PropertyInfo,`0,System.String,System.String,System.Globalization.CultureInfo)">
            <summary>Set a value type property value of an object.</summary>
            <param name="propertyInfo">The property that must be assigned.</param>
            <param name="obj">Reference to the object whose property must be assigned.</param>
            <param name="value">The value that must be assigned.</param>
            <param name="formatString">An optional format string that can be used to properly parse the value.</param>
            <param name="culture">An optional culture that can be used to properly parse the value.</param>
            <exception cref="T:System.NotSupportedException">The type of the property that must be assigned is not supported.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvTransformer`1.SetBooleanValue(System.Reflection.PropertyInfo,`0,System.String,System.String,System.Globalization.CultureInfo)">
            <summary>Set a property value of type <see cref="T:System.Boolean"/> of an object.</summary>
            <param name="propertyInfo">The property that must be assigned.</param>
            <param name="obj">Reference to the object whose property must be assigned.</param>
            <param name="value">The value that must be assigned.</param>
            <param name="formatString">An optional format string that can be used to properly parse the value.</param>
            <param name="culture">An optional culture name that can be used to properly parse the value.</param>
            <exception cref="T:System.FormatException">The value cannot be recognized as a valid <see cref="T:System.Boolean"/>.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvTransformer`1.SetStringValue(System.Reflection.PropertyInfo,`0,System.String,System.String)">
            <summary>Set a property value of type <see cref="T:System.String"/> of an object.</summary>
            <param name="propertyInfo">The property that must be assigned.</param>
            <param name="obj">Reference to the object whose property must be assigned.</param>
            <param name="value">The value that must be assigned.</param>
            <param name="formatString">An optional format string that can be used to properly parse the value.</param>
            <exception cref="T:System.InvalidOperationException">The format string contains an invalid formatting definition.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvTransformer`1.SetDateTimeValue(System.Reflection.PropertyInfo,`0,System.String,System.String,System.Globalization.CultureInfo)">
            <summary>Set a property value of type <see cref="T:System.DateTime"/> of an object.</summary>
            <param name="propertyInfo">The property that must be assigned.</param>
            <param name="obj">Reference to the object whose property must be assigned.</param>
            <param name="value">The value that must be assigned.</param>
            <param name="formatString">An optional format string that can be used to properly parse the value.</param>
            <param name="culture">An optional culture name that can be used to properly parse the value.</param>
            <exception cref="T:System.FormatException">The value cannot be recognized as a valid <see cref="T:System.DateTime"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The format string contains an invalid formatting definition.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvTransformer`1.SetEnumValue(System.Reflection.PropertyInfo,`0,System.String,System.String,System.Globalization.CultureInfo)">
            <summary>Set a property value of an enum type of an object.</summary>
            <param name="propertyInfo">The property that must be assigned.</param>
            <param name="obj">Reference to the object whose property must be assigned.</param>
            <param name="value">The value that must be assigned.</param>
            <param name="formatString">An optional format string that can be used to properly parse the value.</param>
            <param name="culture">An optional culture name that can be used to properly parse the value.</param>
            <exception cref="T:System.FormatException">The value cannot be recognized as a valid enum value.</exception>
            <exception cref="T:System.InvalidOperationException">The format string contains an invalid formatting definition.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvTransformer`1.SetCharValue(System.Reflection.PropertyInfo,`0,System.String,System.String,System.Globalization.CultureInfo)">
            <summary>Set a property value of a <see cref="T:System.Char"/> type of an object.</summary>
            <param name="propertyInfo">The property that must be assigned.</param>
            <param name="obj">Reference to the object whose property must be assigned.</param>
            <param name="value">The value that must be assigned.</param>
            <param name="formatString">An optional format string that can be used to properly parse the value.</param>
            <param name="culture">An optional culture name that can be used to properly parse the value.</param>
            <exception cref="T:System.FormatException">The value cannot be recognized as a valid <see cref="T:System.Char"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The format string contains an invalid formatting definition.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvTransformer`1.SetPropertyValue``1(System.Reflection.PropertyInfo,`0,System.String,System.String,System.Globalization.CultureInfo,Enkoni.Framework.Serialization.CsvTransformer{`0}.TryParse{``0},Enkoni.Framework.Serialization.CsvTransformer{`0}.TryParseFormatted{``0})">
            <summary>Set a property value of type <typeparamref name="TPropertyType"/> of an object.</summary>
            <typeparam name="TPropertyType">The type of the property that must be set.</typeparam>
            <param name="propertyInfo">The property that must be assigned.</param>
            <param name="obj">Reference to the object whose property must be assigned.</param>
            <param name="value">The value that must be assigned.</param>
            <param name="formatString">An optional format string that can be used to properly parse the value.</param>
            <param name="culture">An optional culture name that can be used to properly parse the value.</param>
            <param name="parseFunc">The delegate that is used to perform the actual parsing.</param>
            <param name="parseFormattedFunc">The delegate that is used to perform the actual culture-aware parsing.</param>
            <exception cref="T:System.FormatException">The value cannot be recognized as a valid <see cref="T:System.Boolean"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The format string contains an invalid formatting definition.</exception>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvTransformer`1.ColumnNameMappings">
            <summary>Gets the mappings of the column names. The dictionary uses the column index as key and column name as value.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvTransformer`1.EmitHeader">
            <summary>Gets or sets a value indicating whether a header-line must be included when serializing the objects.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvTransformer`1.IgnoreHeaderOnRead">
            <summary>Gets or sets a value indicating whether the header should be ignored when reading the file.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvTransformer`1.Separator">
            <summary>Gets or sets the separator-character.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvTransformer`1.PropertyDelegates">
            <summary>Gets the delegates that give access to the properties of the instances that need to be serialized and deserialized.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvTransformer`1.FormatMappings">
            <summary>Gets the mappings of the format strings. The dictionary uses the column index as key and format string as value.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvTransformer`1.NullStringMappings">
            <summary>Gets the mappings of the null strings. The dictionary uses the column index as key and null string as value.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvTransformer`1.CultureMappings">
            <summary>Gets the mappings of the cultures. The dictionary uses the column index as key and culture name as value.</summary>
        </member>
        <member name="T:Enkoni.Framework.Serialization.CsvTransformer`1.TryParse`1">
            <summary>Defines a delegate that can be used to reference a TryParse-method.</summary>
            <typeparam name="TPropertyType">The type of the out-parameter of the TryParse-method.</typeparam>
            <param name="input">The input string.</param>
            <param name="output">The output value.</param>
            <returns><see langword="true"/> if <paramref name="input"/> was successfully parsed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Enkoni.Framework.Serialization.CsvTransformer`1.TryParseFormatted`1">
            <summary>Defines a delegate that can be used to reference a culture-aware TryParse-method.</summary>
            <typeparam name="TPropertyType">The type of the out-parameter of the TryParse-method.</typeparam>
            <param name="input">The input string.</param>
            <param name="styles">The <see cref="T:System.Globalization.NumberStyles"/> that must be passed to the TryParse method.</param>
            <param name="formatProvider">The format provider that must be used.</param>
            <param name="output">The output value.</param>
            <returns><see langword="true"/> if <paramref name="input"/> was successfully parsed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Enkoni.Framework.SortSpecificationsEventArgs`1">
            <summary>Represents a generic type of <see cref="T:System.EventArgs"/> that holds a single value.</summary>
            <typeparam name="T">The type of the value that is passed with the event.</typeparam>
        </member>
        <member name="T:Enkoni.Framework.EventArgs`1">
            <summary>Represents a generic type of <see cref="T:System.EventArgs"/> that holds a single value.</summary>
            <typeparam name="T">The type of the value that is passed with the event.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.EventArgs`1.#ctor(`0)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.EventArgs`1"/> class.</summary>
            <param name="eventValue">The value that must be passed to the event handler.</param>
        </member>
        <member name="P:Enkoni.Framework.EventArgs`1.EventValue">
            <summary>Gets the value that is passed to the event handler.</summary>
        </member>
        <member name="M:Enkoni.Framework.SortSpecificationsEventArgs`1.#ctor(Enkoni.Framework.SortSpecifications{`0})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.SortSpecificationsEventArgs`1"/> class.</summary>
            <param name="eventValue">The value that must be passed to the event handler.</param>
        </member>
        <member name="T:Enkoni.Framework.SortSpecifications`1">
            <summary>This class holds a collection of sort specifications which can be used to sort a sequence of <typeparamref name="T"/>.</summary>
            <typeparam name="T">The type of object that must be sorted.</typeparam>
        </member>
        <member name="F:Enkoni.Framework.SortSpecifications`1.sortingSpecifications">
            <summary>The collection of sort specifications.</summary>
        </member>
        <member name="M:Enkoni.Framework.SortSpecifications`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.SortSpecifications`1"/> class.</summary>
        </member>
        <member name="M:Enkoni.Framework.SortSpecifications`1.Sort(System.Linq.IQueryable{`0})">
            <summary>Sorts a sequence according to the specifications that are held by this instance.</summary>
            <param name="query">The sequence that must be sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.SortSpecifications`1.Sort(System.Collections.Generic.IEnumerable{`0})">
            <summary>Sorts a sequence according to the specifications that are held by this instance.</summary>
            <param name="query">The sequence that must be sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.SortSpecifications`1.Add(Enkoni.Framework.ISortSpecification{`0})">
            <summary>Adds a new sort specification to the collection.</summary>
            <param name="sortSpecification">The sort specification that must be added.</param>
        </member>
        <member name="M:Enkoni.Framework.SortSpecifications`1.AddRange(Enkoni.Framework.SortSpecifications{`0})">
            <summary>Adds a new collection of sort specifications to the collection.</summary>
            <param name="sortSpecifications">The sort specifications that must be added.</param>
        </member>
        <member name="M:Enkoni.Framework.SortSpecifications`1.Clear">
            <summary>Removes all the sort specifications from the collection.</summary>
        </member>
        <member name="T:Enkoni.Framework.SortSpecification`2">
            <summary>Implements the <see cref="T:Enkoni.Framework.ISortSpecification`1"/>.</summary>
            <typeparam name="T">The type of object that must be sorted.</typeparam>
            <typeparam name="TKey">The type of the key that is used to perform the sorting.</typeparam>
        </member>
        <member name="T:Enkoni.Framework.ISortSpecification`1">
            <summary>Defines a type that is able to sort a collection using the specification system.</summary>
            <typeparam name="T">The type of object that must be sorted.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.ISortSpecification`1.OrderBy(System.Linq.IQueryable{`0})">
            <summary>Sorts the elements of a sequence.</summary>
            <param name="query">The sequence that must be sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISortSpecification`1.OrderBy(System.Collections.Generic.IEnumerable{`0})">
            <summary>Sorts the elements of a sequence.</summary>
            <param name="query">The sequence that must be sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISortSpecification`1.ThenBy(System.Linq.IOrderedQueryable{`0})">
            <summary>Performs a subsequent ordering of the elements in a sequence.</summary>
            <param name="query">The sequence that must be sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISortSpecification`1.ThenBy(System.Linq.IOrderedEnumerable{`0})">
            <summary>Performs a subsequent ordering of the elements in a sequence.</summary>
            <param name="query">The sequence that must be sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="F:Enkoni.Framework.SortSpecification`2.sortDirection">
            <summary>Defines the direction of the ordering.</summary>
        </member>
        <member name="F:Enkoni.Framework.SortSpecification`2.sortExpression">
            <summary>Defines the expression that must be used to perform the sorting.</summary>
        </member>
        <member name="M:Enkoni.Framework.SortSpecification`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.SortSpecification`2"/> class using the ascending sort order as default sort 
            direction.</summary>
            <param name="sortExpression">The expression that is used for the sorting.</param>
        </member>
        <member name="M:Enkoni.Framework.SortSpecification`2.#ctor(System.Linq.Expressions.Expression{System.Func{`0,`1}},Enkoni.Framework.SortOrder)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.SortSpecification`2"/> class.</summary>
            <param name="sortExpression">The expression that is used for the sorting.</param>
            <param name="sortDirection">The direction of the sorting.</param>
        </member>
        <member name="M:Enkoni.Framework.SortSpecification`2.OrderBy(System.Linq.IQueryable{`0})">
            <summary>Sorts the elements of a sequence.</summary>
            <param name="query">The sequence that must be sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.SortSpecification`2.OrderBy(System.Collections.Generic.IEnumerable{`0})">
            <summary>Sorts the elements of a sequence.</summary>
            <param name="query">The sequence that must be sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.SortSpecification`2.ThenBy(System.Linq.IOrderedQueryable{`0})">
            <summary>Performs a subsequent ordering of the elements in a sequence.</summary>
            <param name="query">The sequence that must be sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.SortSpecification`2.ThenBy(System.Linq.IOrderedEnumerable{`0})">
            <summary>Performs a subsequent ordering of the elements in a sequence.</summary>
            <param name="query">The sequence that must be sorted.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="T:Enkoni.Framework.SortOrder">
            <summary>Defines the supported sort orders.</summary>
        </member>
        <member name="F:Enkoni.Framework.SortOrder.Ascending">
            <summary>Indicates that the objects should be sorted 'smallest first'.</summary>
        </member>
        <member name="F:Enkoni.Framework.SortOrder.Descending">
            <summary>Indicates that the objects should be sorted 'biggest first'.</summary>
        </member>
        <member name="T:Enkoni.Framework.WorkflowState">
            <summary>Contains the states in which a workflow can be. A workflow can only be in one state at a time.</summary>
        </member>
        <member name="F:Enkoni.Framework.WorkflowState.Init">
            <summary>Indicates that the workflow is created but not yet started.</summary>
        </member>
        <member name="F:Enkoni.Framework.WorkflowState.Starting">
            <summary>Indicates that the workflow is currently starting.</summary>
        </member>
        <member name="F:Enkoni.Framework.WorkflowState.Started">
            <summary>Indicates that the workflow is running.</summary>
        </member>
        <member name="F:Enkoni.Framework.WorkflowState.Pausing">
            <summary>Indicates that the workflow is pausing its processes.</summary>
        </member>
        <member name="F:Enkoni.Framework.WorkflowState.Paused">
            <summary>Indicates that the workflow is currently paused.</summary>
        </member>
        <member name="F:Enkoni.Framework.WorkflowState.Continuing">
            <summary>Indicates that the workflow is resuming its processes.</summary>
        </member>
        <member name="F:Enkoni.Framework.WorkflowState.Continued">
            <summary>Indicates that the workflow is resuming. This basically is equal to the <see cref="F:Enkoni.Framework.WorkflowState.Started"/> state.</summary>
        </member>
        <member name="F:Enkoni.Framework.WorkflowState.Stopping">
            <summary>Indicates that the workflow is stopping its processes.</summary>
        </member>
        <member name="F:Enkoni.Framework.WorkflowState.Stopped">
            <summary>Indicates that the workflow has stopped.</summary>
        </member>
        <member name="F:Enkoni.Framework.WorkflowState.Faulted">
            <summary>Indicates that the workflow is stopped as a result of an error.</summary>
        </member>
        <member name="T:Enkoni.Framework.DoubleCompareOption">
            <summary>Contains the options that can be passed to a double comparison function to specify the method to compare doubles.</summary>
        </member>
        <member name="F:Enkoni.Framework.DoubleCompareOption.Margin">
            <summary>Compare two doubles by looking if the difference is within a specific margin.</summary>
        </member>
        <member name="F:Enkoni.Framework.DoubleCompareOption.SignificantDigits">
            <summary>Compare two doubles by looking at their significant digits.</summary>
        </member>
        <member name="T:Enkoni.Framework.ISpecificationVisitor`1">
            <summary>This interface describes the public API of a visitor class that can be used to visit a specification using the visitor Design Pattern.
            </summary>
            <typeparam name="T">The type of object that is ultimately selected using the specification.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.ISpecificationVisitor`1.CreateLambdaExpression(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>Creates a lambda-expression using the specified expression. Typically, this method simply returns the parameter.</summary>
            <param name="expression">The expression that was originally passed to the specification.</param>
            <returns>The created expression.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISpecificationVisitor`1.CreateNotExpression(Enkoni.Framework.ISpecification{`0})">
            <summary>Creates a NOT-expression using the specified specification.</summary>
            <param name="specification">The specification whose result must be inverted.</param>
            <returns>The created expression.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISpecificationVisitor`1.CreateLikeExpression(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
            <summary>Creates a LIKE-expression using the specified field and search pattern.</summary>
            <param name="field">The field of type <c>T</c> that must match the pattern.</param>
            <param name="pattern">The pattern to which the field must apply. The pattern may contain a '*' and '?' wildcard.</param>
            <returns>The created expression.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISpecificationVisitor`1.CreateAndExpression(Enkoni.Framework.ISpecification{`0},Enkoni.Framework.ISpecification{`0})">
            <summary>Creates an AND-expression using the two specified specifications.</summary>
            <param name="leftOperand">The left operand of the combination.</param>
            <param name="rightOperand">The right operand of the combination.</param>
            <returns>The created expression.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISpecificationVisitor`1.CreateOrExpression(Enkoni.Framework.ISpecification{`0},Enkoni.Framework.ISpecification{`0})">
            <summary>Creates an OR-expression using the two specified specifications.</summary>
            <param name="leftOperand">The left operand of the combination.</param>
            <param name="rightOperand">The right operand of the combination.</param>
            <returns>The created expression.</returns>
        </member>
        <member name="M:Enkoni.Framework.ISpecificationVisitor`1.CreateCustomExpression(Enkoni.Framework.ISpecification{`0})">
            <summary>Creates an expression using the custom specification. This method is executed when a specification-type is used that is not part of 
            the default specification system.</summary>
            <param name="specification">The custom specification.</param>
            <returns>The created expression.</returns>
        </member>
        <member name="T:Enkoni.Framework.LikeSpecification`1">
            <summary>This class defines a specification type that matches using a string-pattern.</summary>
            <typeparam name="T">The type of object to which the specification applies.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.LikeSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.LikeSpecification`1"/> class.</summary>
            <param name="field">The field that must match the pattern.</param>
            <param name="pattern">The search-pattern.</param>
        </member>
        <member name="M:Enkoni.Framework.LikeSpecification`1.VisitCore(Enkoni.Framework.ISpecificationVisitor{`0})">
            <summary>Visits the specification and lets <paramref name="visitor"/> convert the contents of the specification into an expression that can 
            be used to perform the actual filtering/selection.</summary>
            <param name="visitor">The instance that will perform the conversion.</param>
            <returns>The expression that was created using this specification.</returns>
        </member>
        <member name="P:Enkoni.Framework.LikeSpecification`1.Field">
            <summary>Gets the field that must match the pattern.</summary>
        </member>
        <member name="P:Enkoni.Framework.LikeSpecification`1.Pattern">
            <summary>Gets the search-pattern.</summary>
        </member>
        <member name="T:Enkoni.Framework.NotSpecification`1">
            <summary>This class implements a specific Specification-type that uses a lambda expression to define the desired specification. The expression 
            must not be true in order for it to pass this specification.</summary>
            <typeparam name="T">The type of object to which the specification applies.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.NotSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.NotSpecification`1"/> class.</summary>
            <param name="function">The function that equals the search pattern that is implemented by the type.</param>
        </member>
        <member name="M:Enkoni.Framework.NotSpecification`1.#ctor(Enkoni.Framework.ISpecification{`0})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.NotSpecification`1"/> class.</summary>
            <param name="specification">The specification that must not be met.</param>
        </member>
        <member name="M:Enkoni.Framework.NotSpecification`1.VisitCore(Enkoni.Framework.ISpecificationVisitor{`0})">
            <summary>Visits the specification and lets <paramref name="visitor"/> convert the contents of the specification into an expression that can 
            be used to perform the actual filtering/selection.</summary>
            <param name="visitor">The instance that will perform the conversion.</param>
            <returns>The expression that was created using this specification.</returns>
        </member>
        <member name="P:Enkoni.Framework.NotSpecification`1.Specification">
            <summary>Gets the specification whose result must be negated.</summary>
        </member>
        <member name="T:Enkoni.Framework.OrSpecification`1">
            <summary>This class contains a specification type that combines two specifications using an OR operation.</summary>
            <typeparam name="T">The type of object that is ultimately selected by the specification.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.OrSpecification`1.#ctor(Enkoni.Framework.ISpecification{`0},Enkoni.Framework.ISpecification{`0})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.OrSpecification`1"/> class.</summary>
            <param name="leftOperand">The left operant of the combination.</param>
            <param name="rightOperand">The right operand of the combination.</param>
        </member>
        <member name="M:Enkoni.Framework.OrSpecification`1.VisitCore(Enkoni.Framework.ISpecificationVisitor{`0})">
            <summary>Visits the specification and lets <paramref name="visitor"/> convert the contents of the specification into an expression that can 
            be used to perform the actual filtering/selection.</summary>
            <param name="visitor">The instance that will perform the conversion.</param>
            <returns>The expression that was created using this specification.</returns>
        </member>
        <member name="T:Enkoni.Framework.Specification">
            <summary>This class contains static members that would normally be part of the <see cref="T:Enkoni.Framework.Specification`1"/> class, but since that class is 
            generic the static members are placed in this non-generic counterpart to avoid possible confusion about the use of the methods.</summary>
        </member>
        <member name="M:Enkoni.Framework.Specification.All``1">
            <summary>Creates a specification that will return all available objects.</summary>
            <typeparam name="T">The type of object that is ultimately selected by the specification.</typeparam>
            <returns>A specification that will return all available objects.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification.None``1">
            <summary>Creates a specification that will return none of the available objects.</summary>
            <typeparam name="T">The type of object that is ultimately selected by the specification.</typeparam>
            <returns>A specification that will return none of the available objects.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification.Lambda``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>Creates a specification that will return the objects that match the specified expression.</summary>
            <typeparam name="T">The type of object that is ultimately selected by the specification.</typeparam>
            <param name="expression">The expression that acts as a filter.</param>
            <returns>A specification that will only return the objects that match the expression.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification.Like``1(System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.String)">
            <summary>Creates a specification that will return the objects for which the specified field matches the specified pattern. The pattern 
            supports two types of wildcards. The '*' wildcard matches any character (zero or more times) and the '?' wildcard matches exactly one 
            character.</summary>
            <typeparam name="T">The type of object that is ultimately selected by the specification.</typeparam>
            <param name="field">The field that must match the expression.</param>
            <param name="pattern">The search-pattern.</param>
            <returns>A specification that will return only the objects for which the field matches the search-pattern.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>Creates a specification that will return the objects that do not match the specified expression.</summary>
            <typeparam name="T">The type of object that is ultimately selected by the specification.</typeparam>
            <param name="expression">The expression that acts as a filter.</param>
            <returns>A specification that will only return the objects that do not match the expression.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification.Not``1(Enkoni.Framework.ISpecification{``0})">
            <summary>Creates a specification that will return the objects that do not match the specified expression.</summary>
            <typeparam name="T">The type of object that is ultimately selected by the specification.</typeparam>
            <param name="specification">The specification that acts as a filter.</param>
            <returns>A specification that will only return the objects that do not match the specification.</returns>
        </member>
        <member name="M:Enkoni.Framework.Specification.BusinessRule``1(System.String,System.Object[])">
            <summary>Creates a specification that holds information about a business rule that must be executed.</summary>
            <typeparam name="T">The type of object that is ultimately selected by the specification.</typeparam>
            <param name="ruleName">The name of the rule that must be executed.</param>
            <param name="ruleArguments">The arguments that must be used by the business rule.</param>
            <returns>A specification that holds information about a business rule.</returns>
        </member>
        <member name="T:Enkoni.Framework.Extensions">
            <summary>This class contains some all-purpose extension-methods.</summary>
        </member>
        <member name="F:Enkoni.Framework.Extensions.typeCache">
            <summary>Caches types and there derived types for performance reasons.</summary>
        </member>
        <member name="M:Enkoni.Framework.Extensions.Clone``1(``0)">
            <summary>Returns a strong-typed clone of the instance.</summary>
            <typeparam name="T">The actual type of the instance that will be cloned.</typeparam>
            <param name="instance">The instance on which the clone-method will be invoked.</param>
            <returns>A typed clone of the instance.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.Fire(System.EventHandler,System.Object,System.EventArgs)">
            <summary>Fires an event in a sequential way. An event handler needs to finish before the next event handler will be called. This method will return when all 
            the event handlers have finished. <br/>
            This method will automatically check if there are any event handlers subscribed to <paramref name="handler"/> and it will automatically propagate the call 
            the the appropriate thread.</summary>
            <param name="handler">The multicast delegate that must be executed.</param>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Any metadata that must be passed to the event handlers.</param>
        </member>
        <member name="M:Enkoni.Framework.Extensions.Fire``1(System.EventHandler{``0},System.Object,``0)">
            <summary>Fires an event in a sequential way. An event handler needs to finish before the next event handler will be called. This method will 
            return when all the event handlers have finished. <br/>
            This method will automatically check if there are any event handlers subscribed to <paramref name="handler"/> and it will automatically 
            propagate the call the the appropriate thread.</summary>
            <typeparam name="T">The type of event args that is passed with the event.</typeparam>
            <param name="handler">The multicast delegate that must be executed.</param>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Any metadata that must be passed to the event handlers.</param>
        </member>
        <member name="M:Enkoni.Framework.Extensions.FireInParallel(System.EventHandler,System.Object,System.EventArgs)">
            <summary>Fires an event in a parallel way. This method will return when all the event handlers have finished.<br/>
            This method will automatically check if there are any event handlers subscribed to <paramref name="handler"/> and it will automatically 
            propagate the call the the appropriate thread.</summary>
            <param name="handler">The multicast delegate that must be executed.</param>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Any metadata that must be passed to the event handlers.</param>
        </member>
        <member name="M:Enkoni.Framework.Extensions.FireInParallel``1(System.EventHandler{``0},System.Object,``0)">
            <summary>Fires an event in a parallel way. This method will return when all the event handlers have finished.<br/>
            This method will automatically check if there are any event handlers subscribed to <paramref name="handler"/> and it will automatically 
            propagate the call the the appropriate thread.</summary>
            <typeparam name="T">The type of event args that is passed with the event.</typeparam>
            <param name="handler">The multicast delegate that must be executed.</param>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Any metadata that must be passed to the event handlers.</param>
        </member>
        <member name="M:Enkoni.Framework.Extensions.FireAsync(System.EventHandler,System.Object,System.EventArgs)">
            <summary>Fires an event in an asynchronous way. When this method returns, the event handlers may still be running.<br/>
            This method will automatically check if there are any event handlers subscribed to <paramref name="handler"/> and it will automatically 
            propagate the call the the appropriate thread.</summary>
            <param name="handler">The multicast delegate that must be executed.</param>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Any metadata that must be passed to the event handlers.</param>
        </member>
        <member name="M:Enkoni.Framework.Extensions.FireAsync``1(System.EventHandler{``0},System.Object,``0)">
            <summary>Fires an event in an asynchronous way. When this method returns, the event handlers may still be running.<br/>
            This method will automatically check if there are any event handlers subscribed to <paramref name="handler"/> and it will automatically 
            propagate the call the the appropriate thread.</summary>
            <typeparam name="T">The type of event args that is passed with the event.</typeparam>
            <param name="handler">The multicast delegate that must be executed.</param>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">Any metadata that must be passed to the event handlers.</param>
        </member>
        <member name="M:Enkoni.Framework.Extensions.Capitalize(System.String)">
            <summary>Capitalizes the first letter of each word assuming that words are separated by a single space.</summary>
            <param name="source">The string that must be capitalized.</param>
            <returns>The capitalized string. If <paramref name="source"/> is empty, <paramref name="source"/> is returned without
            modifications.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.Capitalize(System.String,System.Boolean)">
            <summary>Capitalizes the first letter of each word assuming that words are separated by a single space.</summary>
            <param name="source">The string that must be capitalized.</param>
            <param name="keepExistingCapitals">Indicates if any capitals that are already in the string must be preserved or must be lowered.</param>
            <returns>The capitalized string. If <paramref name="source"/> is empty, <paramref name="source"/> is returned without
            modifications.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.Capitalize(System.String,System.Globalization.CultureInfo)">
            <summary>Capitalizes the first letter of each word assuming that words are separated by a single space.</summary>
            <param name="source">The string that must be capitalized.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object that supplies culture-specific casing rules.</param>
            <returns>The capitalized string. If <paramref name="source"/> is empty, <paramref name="source"/> is returned without
            modifications.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.Capitalize(System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>Capitalizes the first letter of each word assuming that words are separated by a single space.</summary>
            <param name="source">The string that must be capitalized.</param>
            <param name="keepExistingCapitals">Indicates if any capitals that are already in the string must be preserved or must be lowered.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object that supplies culture-specific casing rules.</param>
            <returns>The capitalized string. If <paramref name="source"/> is empty, <paramref name="source"/> is returned without
            modifications.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.CapitalizeSentence(System.String)">
            <summary>Capitalizes the first letter of a sentence assuming that words are separated by a single space.</summary>
            <param name="source">The sentence that must be capitalized.</param>
            <returns>The capitalized sentence. If <paramref name="source"/> is empty, <paramref name="source"/> is returned without
            modifications.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.CapitalizeSentence(System.String,System.Boolean)">
            <summary>Capitalizes the first letter of a sentence assuming that words are separated by a single space.</summary>
            <param name="source">The sentence that must be capitalized.</param>
            <param name="keepExistingCapitals">Indicates if any capitals that are already in the string must be preserved or must be lowered.</param>
            <returns>The capitalized sentence. If <paramref name="source"/> is empty, <paramref name="source"/> is returned without
            modifications.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.CapitalizeSentence(System.String,System.Globalization.CultureInfo)">
            <summary>Capitalizes the first letter of a sentence assuming that words are separated by a single space.</summary>
            <param name="source">The sentence that must be capitalized.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object that supplies culture-specific casing rules.</param>
            <returns>The capitalized sentence. If <paramref name="source"/> is empty, <paramref name="source"/> is returned without
            modifications.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.CapitalizeSentence(System.String,System.Boolean,System.Globalization.CultureInfo)">
            <summary>Capitalizes the first letter of a sentence assuming that words are separated by a single space.</summary>
            <param name="source">The sentence that must be capitalized.</param>
            <param name="keepExistingCapitals">Indicates if any capitals that are already in the string must be preserved or must be lowered.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> object that supplies culture-specific casing rules.</param>
            <returns>The capitalized sentence. If <paramref name="source"/> is empty, <paramref name="source"/> is returned without
            modifications.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.Truncate(System.String,System.Int32)">
            <summary>Truncates a string value to a maximum length. If the length of the string value is already less or equal to <paramref name="maxLength"/> the
            original string value is returned.</summary>
            <param name="source">The string value that must be truncated.</param>
            <param name="maxLength">The maximum length of the returned string.</param>
            <returns>The string value truncated to the specified length or the original string if the length is already less then or equal to the maximum length.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.Equals(System.Double,System.Double,System.Double,Enkoni.Framework.DoubleCompareOption)">
            <summary>Returns a value indicating whether both values represent the same value.</summary>
            <param name="source">The first value to compare.</param>
            <param name="obj">The second value to compare.</param>
            <param name="comparisonFactor">The factor that must be taken into account. If <paramref name="compareOption"/> is set to 
            <see cref="F:Enkoni.Framework.DoubleCompareOption.Margin"/>, the comparison factor will be treated as an absolute margin. If <paramref name="compareOption"/> is
            set to <see cref="F:Enkoni.Framework.DoubleCompareOption.SignificantDigits"/> the comparison factor will be treated as the number of digits that must be 
            examined will comparing. Note that the comparison factor in that case will be truncated to an integer.</param>
            <param name="compareOption">Defines the method that must be used to compare the double values.</param>
            <returns><see langword="true"/> if the two values are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.CompareTo(System.Double,System.Double,System.Double,Enkoni.Framework.DoubleCompareOption)">
            <summary>Compares the two values and returns an integer that indicates whether the first value is less than, equal to, or greater than the 
            second value.</summary>
            <param name="source">The first value to compare.</param>
            <param name="value">The second value to compare.</param>
            <param name="comparisonFactor">The factor that must be taken into account. If <paramref name="compareOption"/> is set to 
            <see cref="F:Enkoni.Framework.DoubleCompareOption.Margin"/>, the comparison factor will be treated as an absolute margin. If <paramref name="compareOption"/> is
            set to <see cref="F:Enkoni.Framework.DoubleCompareOption.SignificantDigits"/> the comparison factor will be treated as the number of digits that must be 
            examined will comparing. Note that the comparison factor in that case will be truncated to an integer.</param>
            <param name="compareOption">Defines the method that must be used to compare the double values.</param>
            <returns>A signed number indicating the relative values of the two numbers. <br/>
            Return Value Description <br/>
            Less than zero: <paramref name="source"/> is less than <paramref name="value"/> -or- <paramref name="source"/> is not a number 
            (<see cref="F:System.Double.NaN"/>) and value is a number.<br/>
            Zero: <paramref name="source"/> is equal to <paramref name="value"/> -or- Both <paramref name="source"/> and <paramref name="value"/> are 
            not a number (<see cref="F:System.Double.NaN"/>), <see cref="F:System.Double.PositiveInfinity"/>, or <see cref="F:System.Double.NegativeInfinity"/>.<br/>
            Greater than zero: <paramref name="source"/> is greater than <paramref name="value"/> -or- <paramref name="source"/> is a number and 
            <paramref name="value"/> is not a number (<see cref="F:System.Double.NaN"/>).</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.GetWeekNumber(System.DateTime)">
            <summary>Determines the week number of the given <see cref="T:System.DateTime"/> value using the ISO 8601 specification.</summary>
            <param name="source">The date time of which the week number must be determined.</param>
            <returns>The determined week number.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.Between(System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>Determines whether or not a <see cref="T:System.DateTime"/> value is between to specified <see cref="T:System.DateTime"/> boundaries.</summary>
            <param name="source">The date time that must be tested.</param>
            <param name="lowerLimit">The lower bound (exclusive) of the equation.</param>
            <param name="upperLimit">The upper bound (exclusive) of the equation.</param>
            <returns><see langword="true"/> if <paramref name="source"/> is greater than <paramref name="lowerLimit"/> and smaller than <paramref name="upperLimit"/>; 
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.Between(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>Determines whether or not a <see cref="T:System.DateTime"/> value is between to specified <see cref="T:System.DateTime"/> boundaries.</summary>
            <param name="source">The date time that must be tested.</param>
            <param name="lowerLimit">The lower bound (exclusive) of the equation.</param>
            <param name="upperLimit">The upper bound (exclusive) of the equation.</param>
            <returns><see langword="true"/> if <paramref name="source"/> is greater than <paramref name="lowerLimit"/> and smaller than <paramref name="upperLimit"/>; 
            otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.IsNullable(System.Type)">
            <summary>Determines if the specified type actually a nullable type.</summary>
            <param name="source">The type that is investigated.</param>
            <returns><see langword="true"/> is <paramref name="source"/> denotes a nullable type, <see langword="false"/>
            otherwise.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Enkoni.Framework.Extensions.ActualType(System.Type)">
            <summary>Returns the actual type of <paramref name="source"/>. If <paramref name="source"/> denotes a nullable type,
            the underlying type is returned. Otherwise, <paramref name="source"/> is returned.</summary>
            <param name="source">The type that is investigated.</param>
            <returns>The underlying type if <paramref name="source"/> is nullable or <paramref name="source"/> if it is not 
            nullable.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is null.</exception>
        </member>
        <member name="M:Enkoni.Framework.Extensions.GetBaseClasses(System.Type)">
            <summary>Gets all the base classes extended or inherited by the current <see cref="T:System.Type"/>.</summary>
            <param name="source">The <see cref="T:System.Type"/> whose base classes must be retrieved.</param>
            <returns>The base classes that are extended or inherited by the current <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.GetBaseTypes(System.Type)">
            <summary>Gets all the base types (base classes and interfaces) extended, implemented or inherited by the current <see cref="T:System.Type"/>.</summary>
            <param name="source">The <see cref="T:System.Type"/> whose base types must be retrieved.</param>
            <returns>The base types that are extended, implemented or inherited by the current <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.Implements(System.Type,System.Type)">
            <summary>Determines if the source implements the specified base type.</summary>
            <param name="source">The instance that must be evaluated.</param>
            <param name="baseType">The base type that must be implemented.</param>
            <returns><see langword="true"/> if <paramref name="source"/> implements <paramref name="baseType"/>;
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.GetDerivedTypes(System.Type)">
            <summary>Gets the types that derive from <paramref name="source"/> and are available in the loaded assemblies. If this type has been evaluated 
            before, the previous results are returned regardless of any assembly load or unload event.</summary>
            <param name="source">The instance that must be evaluated.</param>
            <returns>The detected types that derive from <paramref name="source"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.GetDerivedTypes(System.Type,System.Boolean)">
            <summary>Gets the types that derive from <paramref name="source"/> and are available in the loaded assemblies.</summary>
            <param name="source">The instance that must be evaluated.</param>
            <param name="forceRescan">Forces to ignore the previous scan-results and rescan the loaded assemblies.</param>
            <returns>The detected types that derive from <paramref name="source"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.InvokeDelegate(System.Delegate,System.Object[])">
            <summary>Invokes a delegate. If required, the call is transferred to the appropriate thread.</summary>
            <param name="del">The delegate that must be invoked.</param>
            <param name="args">The arguments that must be passed to the delegate.</param>
        </member>
        <member name="M:Enkoni.Framework.Extensions.UnsafeFire(System.Delegate,System.Object[])">
            <summary>Invokes the subscribers of the specified delegate in a sequential way.</summary>
            <param name="del">The delegate whose subscribers must be invoked.</param>
            <param name="args">The arguments that must be passed to the delegate-subscribers.</param>
        </member>
        <member name="M:Enkoni.Framework.Extensions.UnsafeFireInParallel(System.Delegate,System.Object[])">
            <summary>Invokes the subscribers of the specified delegate in a parallel way.</summary>
            <param name="del">The delegate whose subscribers must be invoked.</param>
            <param name="args">The arguments that must be passed to the delegate-subscribers.</param>
        </member>
        <member name="M:Enkoni.Framework.Extensions.UnsafeFireAsync(System.Delegate,System.Object[])">
            <summary>Invokes the subscribers of the specified delegate in an asynchronous way.</summary>
            <param name="del">The delegate whose subscribers must be invoked.</param>
            <param name="args">The arguments that must be passed to the delegate-subscribers.</param>
        </member>
        <member name="M:Enkoni.Framework.Extensions.Find(System.Type,System.Boolean)">
            <summary>Gets the derived types from the cache for the specified type.</summary>
            <param name="parent">The parent type.</param>
            <param name="forceRescan">Indicates whether or not to ignore the cache.</param>
            <returns>The found types.</returns>
        </member>
        <member name="T:Enkoni.Framework.Extensions.TypeEqualityComparer">
            <summary>Provides the functionality to compare two <see cref="T:System.Type"/> instances.</summary>
        </member>
        <member name="M:Enkoni.Framework.Extensions.TypeEqualityComparer.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Extensions.TypeEqualityComparer"/> class.</summary>
        </member>
        <member name="M:Enkoni.Framework.Extensions.TypeEqualityComparer.Equals(System.Type,System.Type)">
            <summary>Determines if the specified instances are equal.</summary>
            <param name="x">The left operand.</param>
            <param name="y">The right operand.</param>
            <returns><see langword="true"/> if both parameters are equal; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Enkoni.Framework.Extensions.TypeEqualityComparer.GetHashCode(System.Type)">
            <summary>Returns the hash code for the given instance.</summary>
            <param name="obj">The instance whose hash code must be returned.</param>
            <returns>The hash code of <paramref name="obj"/> or zero if <paramref name="obj"/> is 
            <see langword="null"/>.</returns>
        </member>
        <member name="T:Enkoni.Framework.InvalidTypeParameterException">
            <summary>This exception can be thrown when a method or class definition is used with an illegal type parameter.</summary>
        </member>
        <member name="M:Enkoni.Framework.InvalidTypeParameterException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.InvalidTypeParameterException"/> class.</summary>
        </member>
        <member name="M:Enkoni.Framework.InvalidTypeParameterException.#ctor(System.String)">
            <summary> Initializes a new instance of the <see cref="T:Enkoni.Framework.InvalidTypeParameterException"/> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Enkoni.Framework.InvalidTypeParameterException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.InvalidTypeParameterException"/> class with a specified error message and a reference to 
            the inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/> reference if no inner 
            exception is specified.</param>
        </member>
        <member name="M:Enkoni.Framework.InvalidTypeParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.InvalidTypeParameterException"/> class with serialized data.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Enkoni.Framework.IWorkflow">
            <summary>Represents a process or workflow that executes a defined task or set of tasks.</summary>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.Start">
            <summary>Tries to start the workflow. It blocks until the workflow is started.</summary>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be started. Only when the workflow is in the state
            <see cref="F:Enkoni.Framework.WorkflowState.Init"/> or <see cref="F:Enkoni.Framework.WorkflowState.Stopped"/>, it can be started.</exception>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.Stop">
            <summary>Tries to stop the workflow. It blocks until the workflow is stopped.</summary>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be stopped. Only when the workflow is in the state 
            <see cref="F:Enkoni.Framework.WorkflowState.Started"/>, <see cref="F:Enkoni.Framework.WorkflowState.Pausing"/> or <see cref="F:Enkoni.Framework.WorkflowState.Continued"/>, it can be stopped.</exception>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.Pause">
            <summary>Tries to pause the workflow. It blocks until the workflow is paused.</summary>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and resuming.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be paused. Only when the workflow is in the state
            <see cref="F:Enkoni.Framework.WorkflowState.Started"/> or <see cref="F:Enkoni.Framework.WorkflowState.Continued"/>, it can be paused.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.Continue">
            <summary>Tries to continue the workflow. It blocks until the workflow is continued.</summary>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and continuing.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be continued. Only when the workflow is in the
            state <see cref="F:Enkoni.Framework.WorkflowState.Paused"/>, it can be continued.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.BeginStart(System.AsyncCallback,System.Object)">
            <summary>Begins to start the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous start operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous start request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous start.</returns>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.EndStart(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous start to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be started. Only when the workflow is in the state 
            <see cref="F:Enkoni.Framework.WorkflowState.Init"/> or <see cref="F:Enkoni.Framework.WorkflowState.Stopped"/>, it can be started.</exception>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.BeginStop(System.AsyncCallback,System.Object)">
            <summary>Begins to stop the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous stop operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous stop request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous stop.</returns>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.EndStop(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous stop to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be stopped. Only when the workflow is in the state
            <see cref="F:Enkoni.Framework.WorkflowState.Started"/>, <see cref="F:Enkoni.Framework.WorkflowState.Pausing"/> or <see cref="F:Enkoni.Framework.WorkflowState.Continued"/>, it can be stopped.</exception>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.BeginPause(System.AsyncCallback,System.Object)">
            <summary>Begins to pause the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous pause operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous pause request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous pause.</returns>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.EndPause(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous pause to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and resuming.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be paused. Only when the workflow is in the state 
            <see cref="F:Enkoni.Framework.WorkflowState.Started"/> or <see cref="F:Enkoni.Framework.WorkflowState.Continued"/>, it can be paused.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.BeginContinue(System.AsyncCallback,System.Object)">
            <summary>Begins to continue the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous continue operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous continue request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous continue.</returns>
        </member>
        <member name="M:Enkoni.Framework.IWorkflow.EndContinue(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous continue to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and continuing.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be continued. Only when the workflow is in the 
            state <see cref="F:Enkoni.Framework.WorkflowState.Paused"/>, it can be continued.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="P:Enkoni.Framework.IWorkflow.CanPauseAndContinue">
            <summary>Gets a value indicating whether the workflow is able to pause and continue its internal processes. By default, a <b>Workflow</b> 
            cannot be paused or continued.</summary>
        </member>
        <member name="P:Enkoni.Framework.IWorkflow.State">
            <summary>Gets the current <see cref="T:Enkoni.Framework.WorkflowState"/> of the workflow.</summary>
        </member>
        <member name="T:Enkoni.Framework.Collections.LambdaEqualityComparer`2">
            <summary>This class compares types based on a field of the type. By using this class, it is no longer required to create a specific equality 
            comparer to compare types using just one field.</summary>
            <typeparam name="T">The type of object that must be compared.</typeparam>
            <typeparam name="TField">The type of the field of <b>T</b> that must be used in the comparison.</typeparam>
        </member>
        <member name="F:Enkoni.Framework.Collections.LambdaEqualityComparer`2.fieldFunction">
            <summary>The function that gives access to the field.</summary>
        </member>
        <member name="M:Enkoni.Framework.Collections.LambdaEqualityComparer`2.#ctor(System.Func{`0,`1})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Collections.LambdaEqualityComparer`2"/> class.</summary>
            <param name="field">The function that gives access to the field that must be used in the comparison.</param>
        </member>
        <member name="M:Enkoni.Framework.Collections.LambdaEqualityComparer`2.Equals(`0,`0)">
            <summary>Determines whether the specified objects are equal.</summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns><see langword="true"/> if the specified objects are equal; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.Collections.LambdaEqualityComparer`2.GetHashCode(`0)">
            <summary>Returns a hash code for the specified object.</summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of obj is a reference type and obj is null.</exception>
        </member>
        <member name="T:Enkoni.Framework.Linq.Extensions">
            <summary>This class contains some all-purpose extension-methods.</summary>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>Adds an overload for the Linq-method 'SingleOrDefault' which lets the user define the default value that must be returned when the 
            standard 'SingleOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns>The single element of the input sequence that satisfies the condition, or 
            <paramref name="defaultValue"/> if no such element is found.</returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>Adds an overload for the Linq-method 'ElementAtOrDefault' which lets the user define the default value that must be returned when 
            the standard 'ElementAtOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element from.</param>
            <param name="index">The zero-based index of the element to retrieve.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns><paramref name="defaultValue"/> if the index is outside the bounds of the source sequence; otherwise, the element at the specified 
            position in the source sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Adds an overload for the Linq-method 'FirstOrDefault' which lets the user define the default value that must be returned when the 
            standard 'FirstOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element from.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns>The first element of the input sequence, or <paramref name="defaultValue"/> if no such element is found.</returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>Adds an overload for the Linq-method 'FirstOrDefault' which lets the user define the default value that must be returned when the 
            standard 'FirstOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns>The first element of the input sequence that satisfies the condition, or <paramref name="defaultValue"/> if no such element is 
            found.</returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>Adds an overload for the Linq-method 'LastOrDefault' which lets the user define the default value that must be returned when the 
            standard 'LastOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element from.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns>The last element of the input sequence, or <paramref name="defaultValue"/> if no such element is found.</returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>Adds an overload for the Linq-method 'LastOrDefault' which lets the user define the default value that must be returned when the 
            standard 'LastOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns>The last element of the input sequence that satisfies the condition, or <paramref name="defaultValue"/> if no such element is found.
            </returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>Performs an operation on each member in <paramref name="source"/>.</summary>
            <typeparam name="T">The type of element that is stored in the enumerable.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to perform the operations on.</param>
            <param name="action">The operation that must be performed for each item in the enumerable.</param>
            <exception cref="T:System.ArgumentNullException">One or more of the parameters are null.</exception>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.OrderBy``1(System.Collections.Generic.IEnumerable{``0},Enkoni.Framework.SortSpecifications{``0})">
            <summary>Sorts the sequence according to the sort specifications.</summary>
            <typeparam name="T">The type of object that must be sorted.</typeparam>
            <param name="source">The sequence that must be sorted.</param>
            <param name="sortSpecifications">The specifications for the sorting.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.CreateEqualityComparer``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>Creates a new <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> using the signature of <paramref name="source"/>. The 
            comparer will compare two instances of type <typeparamref name="T"/> by evaluating field <paramref name="field"/> of
            each instance of <typeparamref name="T"/>.</summary>
            <typeparam name="T">The type of objects that must be compared.</typeparam>
            <typeparam name="TField">The type of the field that must be used for the comparison.</typeparam>
            <param name="source">The collection whose signature will be used to create the equality comparer. The collection does 
            not actually have to contain any items.</param>
            <param name="field">The function that gives access to the field that must be used in the comparison.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that compares objects of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.Distinct``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>Returns distinct elements from a sequence by using a <see cref="T:Enkoni.Framework.Collections.LambdaEqualityComparer`2"/> that 
            compares values using the specified <paramref name="field"/>.</summary>
            <param name="source">The sequence to remove duplicate elements from.</param>
            <param name="field">The function that gives access to the field that must be used in the comparison.</param>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <typeparam name="TField">The type of the field that must be used for the comparison.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains distinct elements from the source sequence.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="field"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0)">
            <summary>Adds an overload for the Linq-method 'SingleOrDefault' which lets the user define the default value that must be returned when the 
            standard 'SingleOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns>The single element of the input sequence that satisfies the condition, or <paramref name="defaultValue"/> if no such element is 
            found.</returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0)">
            <summary>Adds an overload for the Linq-method 'FirstOrDefault' which lets the user define the default value that must be returned when the 
            standard 'FirstOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns>The first element of the input sequence that satisfies the condition, or <paramref name="defaultValue"/> if no such element is 
            found.</returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``0)">
            <summary>Adds an overload for the Linq-method 'LastOrDefault' which lets the user define the default value that must be returned when the 
            standard 'LastOrDefault' operation yields no results.</summary>
            <typeparam name="T">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Linq.IQueryable`1"/> to return a single element from.</param>
            <param name="predicate">A function to test an element for a condition.</param>
            <param name="defaultValue">The default value that must be used.</param>
            <returns>The last element of the input sequence that satisfies the condition, or <paramref name="defaultValue"/> if no such element is found.
            </returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.OrderBy``1(System.Linq.IQueryable{``0},Enkoni.Framework.SortSpecifications{``0})">
            <summary>Sorts the sequence according to the sort specifications.</summary>
            <typeparam name="T">The type of object that must be sorted.</typeparam>
            <param name="source">The sequence that must be sorted.</param>
            <param name="sortSpecifications">The specifications for the sorting.</param>
            <returns>The sorted sequence.</returns>
        </member>
        <member name="M:Enkoni.Framework.Linq.Extensions.Not``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>Creates an <see cref="T:System.Linq.Expressions.Expression`1"/> that inverts the result of <paramref name="source"/>.</summary>
            <typeparam name="T">The type that is used as input for the expression.</typeparam>
            <param name="source">An <see cref="T:System.Linq.Expressions.Expression`1"/> whose result must be inverted.</param>
            <returns>An expression that will invert the result of <paramref name="source"/>.</returns>
        </member>
        <member name="T:Enkoni.Framework.NotSupportedTypeParameterException">
            <summary>This exception can be thrown when a method or class definition is called with an unsupported type parameter.</summary>
        </member>
        <member name="M:Enkoni.Framework.NotSupportedTypeParameterException.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.NotSupportedTypeParameterException"/> class.</summary>
        </member>
        <member name="M:Enkoni.Framework.NotSupportedTypeParameterException.#ctor(System.String)">
            <summary> Initializes a new instance of the <see cref="T:Enkoni.Framework.NotSupportedTypeParameterException"/> class with a specified error message.</summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Enkoni.Framework.NotSupportedTypeParameterException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.NotSupportedTypeParameterException"/> class with a specified error message and a reference to the 
            inner exception that is the cause of this exception.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a <see langword="null"/> reference if no inner 
            exception is specified.</param>
        </member>
        <member name="M:Enkoni.Framework.NotSupportedTypeParameterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.NotSupportedTypeParameterException"/> class with serialized data.</summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Enkoni.Framework.Serialization.CsvColumnAttribute">
            <summary>This attribute defines how a property must be serialized and deserialized to and from a column in a CSV file.</summary>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvColumnAttribute.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Serialization.CsvColumnAttribute"/> class using a default field index.</summary>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvColumnAttribute.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Serialization.CsvColumnAttribute"/> class.</summary>
            <param name="fieldIndex">The index of the field in the CSV file.</param>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvColumnAttribute.FieldIndex">
            <summary>Gets the index of the field in the CSV file.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvColumnAttribute.FormatString">
            <summary>Gets or sets the format string that is to be used when parsing the column value.<br/>
            De following format strings are supported:<br/>
            <list type="bullet">
              <item>
                <term>XXX</term>
                <description>Serialize the property according to the format. I.e.: '000' in combination with integer value 7 results in "007".</description>
              </item>
              <item>
                <term>[prefix]{0:XXX}[postfix]</term>
                <description>Serialize the property according to the format. I.e.: 'a{0:000}b' in combination with integer value 7 results in "a007b".</description>
              </item>
              <item>
                <term>X or -X (<see cref="T:System.String"/> properties only)</term>
                <description>Serialize the property according to the format. I.e.: '-5' in combination with string value 'abc' results in "abc  ".</description>
              </item>
              <item>
                <term>[prefix]{0,X}[postfix] or [prefix]{0,-X}[postfix] (<see cref="T:System.String"/> properties only)</term>
                <description>Serialize the property according to the format. I.e.: 'y{0,-5}z' in combination with string value 'abc' results in "yabc  z".</description>
              </item>
              <item>
                <term>true:[true string]|false:[false string] (<see cref="T:System.Boolean"/> properties only)</term>
                <description>Serialize the property according to the format. I.e.: 'true:Y|false:N' in combination with boolean value 'True' results in "Y".</description>
              </item>
            </list>
            </summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvColumnAttribute.NullString">
            <summary>Gets or sets the string that is used to identify a null-value. During serialization, this value is used when the property to which 
            this attribute is applied equals <see langword="null"/>. During deserialization, if the serialized value equals this null-string, 
            <see langword="null"/> or the default value is used.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvColumnAttribute.CultureName">
            <summary>Gets or sets the name of the culture that must be used to parse the field value. If this property is set, it overrides any 
            culture-settings that may have been set in the CsvRecord-attribute.</summary>
        </member>
        <member name="T:Enkoni.Framework.Serialization.CsvRecordAttribute">
            <summary>This attribute defines how an object must be serialized and deserialized to and from a CSV file.</summary>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvRecordAttribute.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Serialization.CsvRecordAttribute"/> class using a default separator.</summary>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvRecordAttribute.#ctor(System.Char)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Serialization.CsvRecordAttribute"/> class.</summary>
            <param name="separator">The separator that is used to separate the fields.</param>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvRecordAttribute.Separator">
            <summary>Gets the separator character. Defaults to ','.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvRecordAttribute.IgnoreHeaderOnRead">
            <summary>Gets or sets a value indicating whether the first line in the file must be ignored when deserializing the object.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvRecordAttribute.WriteHeader">
            <summary>Gets or sets a value indicating whether the header must be included in the file when serializing the object.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvRecordAttribute.CultureName">
            <summary>Gets or sets the name of the culture that must be used to parse the field values.</summary>
        </member>
        <member name="T:Enkoni.Framework.Serialization.CsvSerializer`1">
            <summary>Serializes or deserializes a list of objects to and from a CSV file.</summary>
            <typeparam name="T">Type of the object that has to be serialized.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvSerializer`1.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Serialization.CsvSerializer`1"/> class.</summary>
            <exception cref="T:Enkoni.Framework.InvalidTypeParameterException">The specified type-parameter cannot be serialized using this serializer.</exception>
            <exception cref="T:System.InvalidOperationException">The specified type-parameter contains illegal metadata that prevents it from being 
            (de)serialized.</exception>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvSerializer`1.Serialize(System.Collections.Generic.IEnumerable{`0},System.Text.Encoding,System.IO.Stream)">
            <summary>Serializes a collection of items by transforming each item using the <see cref="P:Enkoni.Framework.Serialization.Serializer`1.Transformer"/> property and writing the 
            transformed item to the <paramref name="stream"/>. Each item will be separated using the new line character(s) of the current environment.
            </summary>
            <param name="objects">The objects that must be serialized.</param>
            <param name="encoding">The encoding that must be used.</param>
            <param name="stream">The stream to which the serialized items must be sent.</param>
            <returns>The number of bytes that have been written to the stream.</returns>
        </member>
        <member name="M:Enkoni.Framework.Serialization.CsvSerializer`1.Deserialize(System.IO.StreamReader)">
            <summary>Deserializes a collection of objects using the data that is accessible through the specified stream reader.</summary>
            <param name="reader">The object that gives access to the underlying stream.</param>
            <returns>The collection of deserialized objects.</returns>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvSerializer`1.ColumnNameMappings">
            <summary>Gets the mappings of the column names. The dictionary uses the column index as key and column name as value.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvSerializer`1.EmitHeader">
            <summary>Gets or sets a value indicating whether a header-line must be included when serializing the objects.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvSerializer`1.IgnoreHeaderOnRead">
            <summary>Gets or sets a value indicating whether the header should be ignored when reading the file.</summary>
        </member>
        <member name="P:Enkoni.Framework.Serialization.CsvSerializer`1.Separator">
            <summary>Gets or sets the separator-character.</summary>
        </member>
        <member name="T:Enkoni.Framework.LambdaSpecification`1">
            <summary>This class implements a specific Specification-type that uses a lambda expression to define the desired specification.</summary>
            <typeparam name="T">The type of object to which the specification applies.</typeparam>
        </member>
        <member name="M:Enkoni.Framework.LambdaSpecification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.LambdaSpecification`1"/> class.</summary>
            <param name="function">The function that equals the search pattern that is implemented by the type.</param>
        </member>
        <member name="M:Enkoni.Framework.LambdaSpecification`1.VisitCore(Enkoni.Framework.ISpecificationVisitor{`0})">
            <summary>Visits the specification and lets <paramref name="visitor"/> convert the contents of the specification into an expression that can 
            be used to perform the actual filtering/selection.</summary>
            <param name="visitor">The instance that will perform the conversion.</param>
            <returns>The expression that was created using this specification.</returns>
        </member>
        <member name="P:Enkoni.Framework.LambdaSpecification`1.Expression">
            <summary>Gets the function that equals the search-pattern that is implemented by this type.</summary>
        </member>
        <member name="T:Enkoni.Framework.Workflow">
            <summary>Represents a process or workflow that executes a defined task or set of tasks. This class provides the basic logic to start, stop, 
            pause and continue a workflow both synchronously and asynchronously.</summary>
        </member>
        <member name="M:Enkoni.Framework.Workflow.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Workflow"/> class. It sets the state to the initial value of 
            <see cref="F:Enkoni.Framework.WorkflowState.Init"/>.</summary>
        </member>
        <member name="M:Enkoni.Framework.Workflow.Start">
            <summary>Tries to start the workflow. It blocks until the workflow is started.</summary>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be started. Only when the workflow is in the state 
            <see cref="F:Enkoni.Framework.WorkflowState.Init"/> or <see cref="F:Enkoni.Framework.WorkflowState.Stopped"/>, it can be started.</exception>
        </member>
        <member name="M:Enkoni.Framework.Workflow.Stop">
            <summary>Tries to stop the workflow. It blocks until the workflow is stopped.</summary>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be stopped. Only when the workflow is in the state 
            <see cref="F:Enkoni.Framework.WorkflowState.Started"/>, <see cref="F:Enkoni.Framework.WorkflowState.Pausing"/> or <see cref="F:Enkoni.Framework.WorkflowState.Continued"/>, it can be stopped.
            </exception>
        </member>
        <member name="M:Enkoni.Framework.Workflow.Pause">
            <summary>Tries to pause the workflow. It blocks until the workflow is paused.</summary>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and resuming.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be paused. Only when the workflow is in the state 
            <see cref="F:Enkoni.Framework.WorkflowState.Started"/> or <see cref="F:Enkoni.Framework.WorkflowState.Continued"/>, it can be paused.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="M:Enkoni.Framework.Workflow.Continue">
            <summary>Tries to continue the workflow. It blocks until the workflow is continued.</summary>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and continuing.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be continued. Only when the workflow is in the 
            state <see cref="F:Enkoni.Framework.WorkflowState.Paused"/>, it can be continued.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="M:Enkoni.Framework.Workflow.BeginStart(System.AsyncCallback,System.Object)">
            <summary>Begins to start the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous start operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous start request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous start.</returns>
        </member>
        <member name="M:Enkoni.Framework.Workflow.EndStart(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous start to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be started. Only when the workflow is in the state 
            <see cref="F:Enkoni.Framework.WorkflowState.Init"/> or <see cref="F:Enkoni.Framework.WorkflowState.Stopped"/>, it can be started.</exception>
        </member>
        <member name="M:Enkoni.Framework.Workflow.BeginStop(System.AsyncCallback,System.Object)">
            <summary>Begins to stop the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous stop operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous stop request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous stop.</returns>
        </member>
        <member name="M:Enkoni.Framework.Workflow.EndStop(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous stop to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be stopped. Only when the workflow is in the state 
            <see cref="F:Enkoni.Framework.WorkflowState.Started"/>, <see cref="F:Enkoni.Framework.WorkflowState.Pausing"/> or <see cref="F:Enkoni.Framework.WorkflowState.Continued"/>, it can be stopped.</exception>
        </member>
        <member name="M:Enkoni.Framework.Workflow.BeginPause(System.AsyncCallback,System.Object)">
            <summary>Begins to pause the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous pause operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous pause request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous pause.</returns>
        </member>
        <member name="M:Enkoni.Framework.Workflow.EndPause(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous pause to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and resuming.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be paused. Only when the workflow is in the state 
            <see cref="F:Enkoni.Framework.WorkflowState.Started"/> or <see cref="F:Enkoni.Framework.WorkflowState.Continued"/>, it can be paused.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="M:Enkoni.Framework.Workflow.BeginContinue(System.AsyncCallback,System.Object)">
            <summary>Begins to continue the workflow.</summary>
            <param name="callback">The method to be called when the asynchronous continue operation is completed.</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous continue request from other requests.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous continue.</returns>
        </member>
        <member name="M:Enkoni.Framework.Workflow.EndContinue(System.IAsyncResult)">
            <summary>Waits for the pending asynchronous continue to complete.</summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <exception cref="T:System.NotSupportedException">The workflow does not support pausing and continuing.</exception>
            <exception cref="T:System.InvalidOperationException">The workflow is not in a state in which it can be continued. Only when the workflow is in the 
            state <see cref="F:Enkoni.Framework.WorkflowState.Paused"/>, it can be continued.</exception>
            <seealso cref="P:CanPauseAndContinue"/>
        </member>
        <member name="M:Enkoni.Framework.Workflow.OnStart">
            <summary>Contains the actual start-up logic. The default implementation is empty, subclasses will have to provide the implementation by 
            overriding this method. Implementers of this method do not have to check the state of the workflow or change the state of the workflow as 
            this is already done by the public <see cref="M:Enkoni.Framework.Workflow.Start"/> method.</summary>
            <remarks>If the implementer detects a situation in which it cannot be started, it should throw an <see cref="T:System.InvalidOperationException"/>. 
            This will cause the <b>Workflow</b> to move to the <see cref="F:Enkoni.Framework.WorkflowState.Faulted"/> state.</remarks>
        </member>
        <member name="M:Enkoni.Framework.Workflow.OnStop">
            <summary>Contains the actual stop logic. The default implementation is empty, subclasses will have to provide the implementation by 
            overriding this method. Implementers of this method do not have to check the state of the workflow or change the state of the workflow as 
            this is already done by the public <see cref="M:Enkoni.Framework.Workflow.Stop"/> method.</summary>
            <remarks>If the implementer detects a situation in which it cannot be stopped, it should throw an <see cref="T:System.InvalidOperationException"/>. 
            This will cause the <b>Workflow</b> to move to the <see cref="F:Enkoni.Framework.WorkflowState.Faulted"/> state.</remarks>
        </member>
        <member name="M:Enkoni.Framework.Workflow.OnPause">
            <summary>Contains the actual pause logic. The default implementation is empty, subclasses will have to provide the implementation by 
            overriding this method. Implementers of this method do not have to check the state of the workflow or change the state of the workflow as 
            this is already done by the public <see cref="M:Enkoni.Framework.Workflow.Pause"/> method.</summary>
            <remarks>If the implementer detects a situation in which it cannot be paused, it should throw an <see cref="T:System.InvalidOperationException"/>. 
            This will cause the <b>Workflow</b> to move to the <see cref="F:Enkoni.Framework.WorkflowState.Faulted"/> state.</remarks>
        </member>
        <member name="M:Enkoni.Framework.Workflow.OnContinue">
            <summary>Contains the actual continue logic. The default implementation is empty, subclasses will have to provide the implementation by 
            overriding this method. Implementers of this method do not have to check the state of the workflow or change the state of the workflow as 
            this is already done by the public <see cref="M:Enkoni.Framework.Workflow.Continue"/> method.</summary>
            <remarks>If the implementer detects a situation in which it cannot be continued, it should throw an <see cref="T:System.InvalidOperationException"/>. 
            This will cause the <b>Workflow</b> to move to the <see cref="F:Enkoni.Framework.WorkflowState.Faulted"/> state.</remarks>
        </member>
        <member name="M:Enkoni.Framework.Workflow.StartWorkflowHelper(System.Object)">
            <summary>Executes the <see cref="M:Enkoni.Framework.Workflow.Start"/> method in a separate thread. This is used to support asynchronous operations.</summary>
            <param name="asyncResult">The object that holds the status of the asynchronous operation.</param>
        </member>
        <member name="M:Enkoni.Framework.Workflow.StopWorkflowHelper(System.Object)">
            <summary>Executes the <see cref="M:Enkoni.Framework.Workflow.Stop"/> method in a separate thread. This is used to support asynchronous operations.</summary>
            <param name="asyncResult">The object that holds the status of the asynchronous operation.</param>
        </member>
        <member name="M:Enkoni.Framework.Workflow.PauseWorkflowHelper(System.Object)">
            <summary>Executes the <see cref="M:Enkoni.Framework.Workflow.Pause"/> method in a separate thread. This is used to support asynchronous operations.</summary>
            <param name="asyncResult">The object that holds the status of the asynchronous operation.</param>
        </member>
        <member name="M:Enkoni.Framework.Workflow.ContinueWorkflowHelper(System.Object)">
            <summary>Executes the <see cref="M:Enkoni.Framework.Workflow.Continue"/> method in a separate thread. This is used to support asynchronous operations.</summary>
            <param name="asyncResult">The object that holds the status of the asynchronous operation.</param>
        </member>
        <member name="P:Enkoni.Framework.Workflow.CanPauseAndContinue">
            <summary>Gets a value indicating whether the workflow is able to pause and continue its internal processes. By default, a <b>Workflow</b> 
            cannot be paused or continued.</summary>
        </member>
        <member name="P:Enkoni.Framework.Workflow.State">
            <summary>Gets or sets the current <see cref="T:Enkoni.Framework.WorkflowState"/> of the workflow.</summary>
        </member>
        <member name="P:Enkoni.Framework.Workflow.CanStart">
            <summary>Gets a value indicating whether this workflow is in a state in which it can be started. Only when the workflow is in the state 
            <see cref="F:Enkoni.Framework.WorkflowState.Init"/> or <see cref="F:Enkoni.Framework.WorkflowState.Stopped"/>, it can be started.</summary>
        </member>
        <member name="P:Enkoni.Framework.Workflow.CanStop">
            <summary>Gets a value indicating whether this workflow is in a state in which it can be stopped. Only when the workflow is in the state 
            <see cref="F:Enkoni.Framework.WorkflowState.Started"/>, <see cref="F:Enkoni.Framework.WorkflowState.Pausing"/> or <see cref="F:Enkoni.Framework.WorkflowState.Continued"/>, it can be stopped.</summary>
        </member>
        <member name="P:Enkoni.Framework.Workflow.CanPause">
            <summary>Gets a value indicating whether this workflow is in a state in which it can be paused. Only when the workflow supports pausing and 
            the workflow is in the state <see cref="F:Enkoni.Framework.WorkflowState.Started"/> or <see cref="F:Enkoni.Framework.WorkflowState.Continued"/>, it can be paused.</summary>
        </member>
        <member name="P:Enkoni.Framework.Workflow.CanContinue">
            <summary>Gets a value indicating whether this workflow is in a state in which it can be continued. Only when the workflow supports pausing and 
            the workflow is in the state <see cref="F:Enkoni.Framework.WorkflowState.Paused"/>, it can be continued.</summary>
        </member>
        <member name="T:Enkoni.Framework.Xml.XmlResourceResolver">
            <summary>Implements a xml resolver that is capable of resolving xml namespaces from embedded resources.</summary>
        </member>
        <member name="F:Enkoni.Framework.Xml.XmlResourceResolver.resourceAssembly">
            <summary>The assembly that contains the embedded resources.</summary>
        </member>
        <member name="F:Enkoni.Framework.Xml.XmlResourceResolver.resourceNamespace">
            <summary>The namespace of the embedded resources.</summary>
        </member>
        <member name="M:Enkoni.Framework.Xml.XmlResourceResolver.#ctor(System.Reflection.Assembly,System.String)">
            <summary>Initializes a new instance of the <see cref="T:Enkoni.Framework.Xml.XmlResourceResolver"/> class.</summary>
            <param name="resourceAssembly">The assembly from which the embedded resources must be retrieved.</param>
            <param name="resourceNamespace">The namespace of the embedded resources.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="resourceAssembly"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Enkoni.Framework.Xml.XmlResourceResolver.GetEntity(System.Uri,System.String,System.Type)">
            <summary>Maps a URI to an object containing the actual resource.</summary>
            <param name="absoluteUri">The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)"/>.</param>
            <param name="role">The current implementation does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can
            be mapped to the xlink: role and used as an implementation specific argument in other scenarios.</param>
            <param name="ofObjectToReturn">The type of object to return. The current implementation only returns <see cref="T:System.IO.Stream"/> objects.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object or <see langword="null"/> if a type other than stream is specified.</returns>
        </member>
    </members>
</doc>
